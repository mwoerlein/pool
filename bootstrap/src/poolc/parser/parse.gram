//DECL
%baseclass-preinclude poolc/parser/Symbol.hpp
%union
{
    long u_number;
    String *u_string;
    MutableCollection<String> *u_string_list;
    MutableMap<String, String> *u_string_map;
    ClassDefNode *u_class_decl;
    MethodDefNode *u_method_decl;
    VariableDefNode *u_variable_decl;
    IntConstDefNode *u_const_int_decl;
    CStringConstDefNode *u_const_cstring_decl;
    NamespaceDefNode *u_namespace_decl;
    UseStatementNode *u_use_stmt;
    InstructionNode *u_instruction;
    TranslationUnitNode *u_unit;
}
%lsp-needed

%token COLON_EQUAL
%right DOT
%right EQUAL

%token ABSTRACT
%token AS
%token CLASS
%token EXTENDS
%token GLOBAL
%token NAMESPACE
%token RETURN
%token THIS
%token USE

%token NAKED
%token PASM

%token <u_string> STRING
%token <u_string> ID
%token <u_string> FQN
%token <u_number> NUMBER

%type <u_unit> translation_unit
%type <u_namespace_decl> namespace_decl
%type <u_use_stmt> use_stmt
%type <u_class_decl> class_decl
%type <u_class_decl> class_body_empty
%type <u_method_decl> method_decl
%type <u_method_decl> method_body_empty
%type <u_variable_decl> variable_decl
%type <u_const_int_decl> const_int_decl
%type <u_const_cstring_decl> const_cstring_decl
%type <u_string_list> type_list
%type <u_string_list> id_list
%type <u_string_list> id_list_empty
%type <u_string_map> id_map
%type <u_string_map> id_map_empty

%type <u_instruction> instruction
%type <u_instruction> inline_pasm_inst

//=
%%
//RULES
translation_unit:
    namespace_decl
    {
        $$ = driver.getUnit();
        $$->ns = $1;
    }
|   translation_unit use_stmt
    {
        $$ = $1;
        if ($2) { $$->uses.add(*$2); }
    }
|   translation_unit class_decl
    {
        $$ = $1;
        if ($2) { $$->classes.add(*$2); }
    }
;

namespace_decl:
    NAMESPACE ID ';'
    {
        $$ = &driver.env().create<NamespaceDefNode>();
        $$->name = *$2;
        $2->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   NAMESPACE FQN ';'
    {
        $$ = &driver.env().create<NamespaceDefNode>();
        $$->name = *$2;
        $2->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
;

use_stmt:
    USE FQN ';'
    {
        $$ = &driver.env().create<UseStatementNode>();
        $$->name = *$2;
        $$->alias = $$->name.lastPart();
        $2->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   USE FQN AS ID ';'
    {
        $$ = &driver.env().create<UseStatementNode>();
        $$->name = *$2;
        $$->alias = *$4;
        $2->destroy();
        $4->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
    }
;

class_decl:
    CLASS ID '{' class_body_empty '}'
    {
        $$ = $4;
        $$->name = *$2;
        $2->destroy();
        
        $4->first_line = @3.first_line;
        $4->first_column = @3.first_column;
        $4->last_line = @5.last_line;
        $4->last_column = @5.last_column;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
    }
|   CLASS ID EXTENDS type_list '{' class_body_empty '}'
    {
        $$ = $6;
        $$->name = *$2;
        $2->destroy();
        Iterator<String> &it = $4->iterator();
        while (it.hasNext()) {
            ClassRefNode &ref = driver.env().create<ClassRefNode>();
            ref.name = it.next();
            $$->extends.add(ref);
        }
        it.destroy();
        $4->destroy();
        
        $6->first_line = @5.first_line;
        $6->first_column = @5.first_column;
        $6->last_line = @7.last_line;
        $6->last_column = @7.last_column;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @7.last_line;
        $$->last_column = @7.last_column;
    }
;

type_list:
    ID
    {
        $$ = &driver.env().create<LinkedList<String>>();
        $$->add(*$1);
    }
|   FQN
    {
        $$ = &driver.env().create<LinkedList<String>>();
        $$->add(*$1);
    }
|   type_list ',' ID
    {
        $$ = $1;
        $$->add(*$3);
    }
|   type_list ',' FQN
    {
        $$ = $1;
        $$->add(*$3);
    }
;

id_list:
    ID
    {
        $$ = &driver.env().create<LinkedList<String>>();
        $$->add(*$1);
    }
|   id_list ',' ID
    {
        $$ = $1;
        $$->add(*$3);
    }
;

id_list_empty:
    // empty
    {
        $$ = &driver.env().create<LinkedList<String>>();
    }
|   id_list
    {
        $$ = $1;
    }
;

id_map:
    ID ID
    {
        $$ = &driver.env().create<HashMap<String, String>>();
        $$->set(*$1, *$2);
    }
|   id_map ',' ID ID
    {
        $$ = $1;
        $$->set(*$3, *$4);
    }
;

id_map_empty:
    // empty
    {
        $$ = &driver.env().create<HashMap<String, String>>();
    }
|   id_map
    {
        $$ = $1;
    }
;

class_body_empty:
    // empty
    {
        $$ = &driver.env().create<ClassDefNode>();
    }
|   class_body_empty method_decl
    {
        $$ = $1;
        if ($2) { $1->methods.add(*$2); }
    }
|   class_body_empty variable_decl
    {
        $$ = $1;
        if ($2) { $$->variables.add(*$2); }
    }
|   class_body_empty const_int_decl
    {
        $$ = $1;
        if ($2) { $$->intConsts.add(*$2); }
    }
|   class_body_empty const_cstring_decl
    {
        $$ = $1;
        if ($2) { $$->consts.add(*$2); }
    }
|   class_body_empty error ';'
;

method_decl:
    '<' id_list_empty '>' ID '(' id_map_empty ')' '{' method_body_empty '}'
    {
        $$ = $9;
        $$->name = *$4;
        
        $9->first_line = @8.first_line;
        $9->first_column = @8.first_column;
        $9->last_line = @10.last_line;
        $9->last_column = @10.last_column;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @10.last_line;
        $$->last_column = @10.last_column;
    }
|   GLOBAL '<' id_list_empty '>' ID '(' id_map_empty ')' '{' method_body_empty '}'
    {
        $$ = $10;
        $$->name = *$5;
        $$->scope = scope_class;
        
        $10->first_line = @9.first_line;
        $10->first_column = @9.first_column;
        $10->last_line = @11.last_line;
        $10->last_column = @11.last_column;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @11.last_line;
        $$->last_column = @11.last_column;
    }
|   NAKED '<' id_list_empty '>' ID '(' id_map_empty ')' '{' method_body_empty '}'
    {
        $$ = $10;
        $$->name = *$5;
        $$->kind = naked;
        $$->scope = scope_class;
        
        $10->first_line = @9.first_line;
        $10->first_column = @9.first_column;
        $10->last_line = @11.last_line;
        $10->last_column = @11.last_column;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @11.last_line;
        $$->last_column = @11.last_column;
    }
|   ABSTRACT '<' id_list_empty '>' ID '(' id_map_empty ')' ';'
    {
        $$ = &driver.env().create<MethodDefNode>();
        $$->name = *$5;
        $$->kind = abstract;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @9.last_line;
        $$->last_column = @9.last_column;
    }
|   '<' error '}'
|   GLOBAL '<' error '}'
|   NAKED '<' error '}'
|   ABSTRACT '<' error ';'
;

variable_decl:
    ID ID ';'
    {
        $$ = &driver.env().create<VariableDefNode>();
        $$->name = *$2;
        $1->destroy();
        $2->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
;

const_int_decl:
    ID ID COLON_EQUAL NUMBER ';'
    {
        $$ = &driver.env().create<IntConstDefNode>();
        $$->name = *$2;
        $$->value = $4;
        $1->destroy();
        $2->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
    }
|   GLOBAL ID ID COLON_EQUAL NUMBER ';'
    {
        $$ = &driver.env().create<IntConstDefNode>();
        $$->name = *$3;
        $$->value = $5;
        $$->global = true;
        $2->destroy();
        $3->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @6.last_line;
        $$->last_column = @6.last_column;
    }
;

const_cstring_decl:
    ID ID COLON_EQUAL STRING ';'
    {
        $$ = &driver.env().create<CStringConstDefNode>();
        $$->name = *$2;
        $$->value = *$4;
        $1->destroy();
        $2->destroy();
        $4->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
    }
;

method_body_empty:
    // empty
    {
        $$ = &driver.env().create<MethodDefNode>();
    }
|   method_body_empty instruction
    {
        $$ = $1;
        if ($2) { $1->body.add(*$2); }
    }
;


// EXPRESSIONS
expression:
    NUMBER
    {
        driver.debug() << "-- NUMBER ("<<(int)$1<<")\n";
    }
|   STRING
    {
        driver.debug() << "-- STRING ("<<*$1<<")\n";
    }
|   variable_expr
    {
        driver.debug() << "-- expression (1)\n";
    }
|   assignment_expr
    {
        driver.debug() << "-- expression (2)\n";
    }
|   method_call_expr
    {
        driver.debug() << "-- expression (3)\n";
    }
|   '(' expression ')'
    {
        driver.debug() << "-- expression (4)\n";
    }
;

expression_list:
    expression
|   expression_list ',' expression
;

expression_list_empty:
    // empty
|   expression_list
;

variable_expr:
    ID
    {
        driver.debug() << "-- variable_expr (1)\n";
    }
|   THIS
    {
        driver.debug() << "-- variable_expr (2)\n";
    }
|   THIS DOT ID
    {
        driver.debug() << "-- variable_expr (3)\n";
    }
;

assignment_expr:
    variable_expr EQUAL expression
    {
        driver.debug() << "-- assignment_expr (1)\n";
    }
;

method_call_expr:
    ID DOT ID '(' expression_list_empty ')'
    {
        driver.debug() << "-- method_call_expr (1)\n";
    }
|   THIS DOT ID '(' expression_list_empty ')'
    {
        driver.debug() << "-- method_call_expr (2)\n";
    }
;


// INSTRUCTIONS
instruction:
    expression ';'
    {
        driver.debug() << "-- instruction (1)\n";
        $$ = 0;
    }
|   variable_initializer_inst
    {
        driver.debug() << "-- instruction (3)\n";
        $$ = 0;
    }
|   return_inst
    {
        driver.debug() << "-- instruction (4)\n";
        $$ = 0;
    }
|   inline_pasm_inst
    {
        driver.debug() << "-- instruction (5)\n";
        $$ = $1;
    }
|   '{' instruction_list_empty '}'
    {
        driver.debug() << "-- instruction (6)\n";
        $$ = 0;
    }
|   error ';'
;

instruction_list_empty:
    //empty
|   instruction_list_empty instruction
;

return_inst:
    RETURN ';'
|   RETURN expression ';'
|   RETURN '<' expression_list_empty '>' ';'
;

variable_initializer_inst:
    ID ID EQUAL expression ';'
|   ID ID COLON_EQUAL expression ';'
|   '<' id_map '>' EQUAL method_call_expr ';'
|   '<' id_map '>' COLON_EQUAL method_call_expr ';'
;

inline_pasm_inst:
    PASM '(' STRING ')' ';'
    {
        InlinePasmInstructionNode &node = driver.env().create<InlinePasmInstructionNode>();
        node.pasm = *$3;
        $3->destroy();
        $$ = &node;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
    }
;

//=
