//DECL
%baseclass-preinclude poolc/parser/Symbol.hpp
%union
{
    long u_number;
    String *u_string;
    
    TranslationUnitNode *u_unit;
    NamespaceDeclNode *u_namespace_decl;
    UseStatementNode *u_use_stmt;
    
    ClassDeclNode *u_class_decl;
    MethodDeclNode *u_method_decl;
    VariableDeclNode *u_variable_decl;
    MutableCollection<VariableDeclNode> *u_variable_decl_list;
    
    InstructionNode *u_instruction;
    BlockInstNode *u_block;
    VariableInitInstNode *u_variable_init;
    
    ExpressionNode *u_expression;
    MutableCollection<ExpressionNode> *u_expression_list;
    NodeMap<ExpressionNode> *u_expression_map;
    MethodCallExprNode *u_method_call;
    VariableExprNode *u_variable;
    
    TypeRefNode *u_type;
    ClassRefNode *u_type_class;
    MutableCollection<TypeRefNode> *u_type_list;
}
%lsp-needed

%token COLON
%token COLON_EQUAL
%token COLON_COLON_EQUAL

%token ABSTRACT
%token AS
%token CLASS
%token EXTENDS
%token GLOBAL
%token NAMESPACE
%token T_NULL
%token RETURN
%token THIS
%token USE

%token ALL
%token ANY
%token CSTRING
%token INT

%token NAKED
%token PASM

%token <u_string> STRING
%token <u_string> ID
%token <u_string> FQN
%token <u_number> NUMBER

%right EQUAL PLUS_EQUAL MINUS_EQUAL STAR_EQUAL SLASH_EQUAL PERCENTAGE_EQUAL
%left PLUS MINUS
%left STAR SLASH PERCENTAGE
%left SIGN_PREC
%right PLUS_PLUS MINUS_MINUS
%left UNARY_POST_PREC
%left DOT

%type <u_unit> translation_unit
%type <u_namespace_decl> namespace_decl
%type <u_use_stmt> use_stmt

%type <u_class_decl> class_decl
%type <u_class_decl> class_body_empty
%type <u_method_decl> method_decl
%type <u_variable_decl> variable_decl
%type <u_variable_decl_list> variable_decl_list
%type <u_variable_decl_list> variable_decl_list_empty

%type <u_instruction> instruction
%type <u_instruction> inline_pasm_inst
%type <u_instruction> return_inst
%type <u_block> instruction_block
%type <u_variable_init> variable_initializer_inst

%type <u_expression> expression
%type <u_expression_list> expression_list
%type <u_expression_list> expression_list_empty
%type <u_expression_map> expression_map
%type <u_expression_map> expression_map_empty
%type <u_expression> value_expr
%type <u_variable> variable_expr
%type <u_method_call> method_call_expr
%type <u_expression> arithmetic_expr

%type <u_type> type
%type <u_type_class> type_class
%type <u_type_list> type_list
%type <u_type_list> type_list_empty

//=
%%
//RULES
translation_unit:
    namespace_decl
    {
        $$ = driver.getUnit();
        $$->ns = $1;
    }
|   translation_unit use_stmt
    {
        $$ = $1;
        if ($2) { $$->uses.add(*$2); }
    }
|   translation_unit class_decl
    {
        $$ = $1;
        if ($2) { $$->classes.add(*$2); }
    }
;

namespace_decl:
    NAMESPACE ID ';'
    {
        $$ = &driver.env().create<NamespaceDeclNode>();
        $$->name = *$2;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
        
        $2->destroy();
    }
|   NAMESPACE FQN ';'
    {
        $$ = &driver.env().create<NamespaceDeclNode>();
        $$->name = *$2;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
        
        $2->destroy();
    }
;

use_stmt:
    USE FQN ';'
    {
        $$ = &driver.env().create<UseStatementNode>();
        $$->name = *$2;
        $$->alias = $$->name.lastPart();
        $2->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   USE FQN AS ID ';'
    {
        $$ = &driver.env().create<UseStatementNode>();
        $$->name = *$2;
        $$->alias = *$4;
        $2->destroy();
        $4->destroy();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
    }
;

class_decl:
    CLASS ID '{' class_body_empty '}'
    {
        $$ = $4;
        $$->name = *$2;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
        
        $2->destroy();
    }
|   CLASS ID EXTENDS type_list '{' class_body_empty '}'
    {
        $$ = $6;
        $$->name = *$2;
        $$->extends.addAll(*$4);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @7.last_line;
        $$->last_column = @7.last_column;
        
        $2->destroy();
        $4->destroy();
    }
;

class_body_empty:
    // empty
    {
        $$ = &driver.env().create<ClassDeclNode>();
    }
|   class_body_empty method_decl
    {
        $$ = $1;
        if ($2) { $1->methods.add(*$2); }
    }
|   class_body_empty variable_decl ';'
    {
        $$ = $1;
        if ($2) {
            
            $2->last_line = @3.last_line;
            $2->last_column = @3.last_column;
            
            $$->variables.add(*$2);
        }
    }
|   class_body_empty variable_initializer_inst ';'
    {
        $$ = $1;
        if ($2) { 
            
            $2->last_line = @3.last_line;
            $2->last_column = @3.last_column;
            
            $$->consts.add(*$2);
        }
    }
|   class_body_empty GLOBAL variable_initializer_inst ';'
    {
        $$ = $1;
        if ($3) { 
            $3->global = true;
            
            $3->first_line = @2.first_line;
            $3->first_column = @2.first_column;
            $3->last_line = @4.last_line;
            $3->last_column = @4.last_column;
            
            $$->consts.add(*$3);
        }
    }
|   class_body_empty error ';'
;

type:
    type_class
    {
        $$ = $1;
    }
|   ALL
    {
        $$ = &driver.env().create<AllRefNode>();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
|   ANY
    {
        $$ = &driver.env().create<AnyRefNode>();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
|   CSTRING
    {
        $$ = &driver.env().create<CStringRefNode>();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
|   INT
    {
        $$ = &driver.env().create<IntRefNode>();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
;

type_class: 
    ID
    {
        ClassRefNode & ref = driver.env().create<ClassRefNode>();
        ref.name = *$1;
        $$ = &ref;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
        
        $1->destroy();
    }
|   FQN
    {
        ClassRefNode & ref = driver.env().create<ClassRefNode>();
        ref.name = *$1;
        $$ = &ref;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
        
        $1->destroy();
    }
;

type_list:
    type
    {
        $$ = &driver.env().create<LinkedList<TypeRefNode>>();
        $$->add(*$1);
    }
|   type_list ',' type
    {
        $$ = $1;
        $$->add(*$3);
    }
;

type_list_empty:
    //empty
    {
        $$ = &driver.env().create<LinkedList<TypeRefNode>>();
    }
|   type_list
;

variable_decl:
    type ID
    {
        $$ = &driver.env().create<VariableDeclNode, TypeRefNode&, String&>(*$1, *$2);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
;

variable_decl_list:
    variable_decl
    {
        $$ = &driver.env().create<LinkedList<VariableDeclNode>>();
        $$->add(*$1);
    }
|   variable_decl_list ',' variable_decl
    {
        $$ = $1;
        $$->add(*$3);
    }
;

variable_decl_list_empty:
    //empty
    {
        $$ = &driver.env().create<LinkedList<VariableDeclNode>>();
    }
|   variable_decl_list
;

method_decl:
    '<' type_list_empty '>' ID '(' variable_decl_list_empty ')' '{' instruction_block '}'
    {
        $$ = &driver.env().create<MethodDeclNode, String&, BlockInstNode&, MutableCollection<TypeRefNode> &, MutableCollection<VariableDeclNode> &>(*$4, *$9, *$2, *$6);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @10.last_line;
        $$->last_column = @10.last_column;
        
        $2->destroy();
        $6->destroy();
    }
|   GLOBAL '<' type_list_empty '>' ID '(' variable_decl_list_empty ')' '{' instruction_block '}'
    {
        $$ = &driver.env().create<MethodDeclNode, String&, BlockInstNode&, MutableCollection<TypeRefNode> &, MutableCollection<VariableDeclNode> &>(*$5, *$10, *$3, *$7);
        $$->global = true;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @11.last_line;
        $$->last_column = @11.last_column;
        
        $3->destroy();
        $7->destroy();
    }
|   NAKED '<' type_list_empty '>' ID '(' variable_decl_list_empty ')' '{' instruction_block '}'
    {
        $$ = &driver.env().create<MethodDeclNode, String&, BlockInstNode&, MutableCollection<TypeRefNode> &, MutableCollection<VariableDeclNode> &>(*$5, *$10, *$3, *$7);
        $$->global = true;
        $$->kind = naked;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @11.last_line;
        $$->last_column = @11.last_column;
        
        $3->destroy();
        $7->destroy();
    }
|   ABSTRACT '<' type_list_empty '>' ID '(' variable_decl_list_empty ')' ';'
    {
        $$ = &driver.env().create<MethodDeclNode, String&, MutableCollection<TypeRefNode> &, MutableCollection<VariableDeclNode> &>(*$5, *$3, *$7);
        $$->kind = abstract;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @9.last_line;
        $$->last_column = @9.last_column;
        
        $3->destroy();
        $7->destroy();
    }
|   '<' error '}'
|   GLOBAL '<' error '}'
|   NAKED '<' error '}'
|   ABSTRACT '<' error ';'
;


// EXPRESSIONS
expression:
    value_expr
    {
        $$ = $1;
    }
|   variable_expr
    {
        $$ = $1;
    }
|   method_call_expr
    {
        $$ = $1;
    }
|   arithmetic_expr
    {
        $$ = $1;
    }
|   '(' expression ')'
    {
        $$ = $2;
    }
;

expression_list:
    expression
    {
        $$ = &driver.env().create<LinkedList<ExpressionNode>>();
        if ($1) { $$->add(*$1); }
    }
|   expression_list ',' expression
    {
        $$ = $1;
        if ($3) { $$->add(*$3); }
    }
;

expression_list_empty:
    // empty
    {
        $$ = &driver.env().create<LinkedList<ExpressionNode>>();
    }
|   expression_list
;

expression_map:
    STRING COLON expression
    {
        $$ = &driver.env().create<NodeMap<ExpressionNode>>();
        if ($3) { $$->set(*$1, *$3); }
    }
|   expression_map ',' STRING COLON expression
    {
        $$ = $1;
        if ($5) { $$->set(*$3, *$5); }
    }
;

expression_map_empty:
    // empty
    {
        $$ = &driver.env().create<NodeMap<ExpressionNode>>();
    }
|   expression_map
;

value_expr:
    NUMBER
    {
        $$ = &driver.env().create<ConstIntExprNode, int>($1);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
|   PLUS NUMBER
    {
        $$ = &driver.env().create<ConstIntExprNode, int>($2);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   MINUS NUMBER
    {
        $$ = &driver.env().create<ConstIntExprNode, int>(-$2);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   STRING
    {
        $$ = &driver.env().create<ConstCStringExprNode, String&>(*$1);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
|   THIS
    {
        $$ = &driver.env().create<ThisExprNode>();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
|   T_NULL
    {
        $$ = &driver.env().create<NullExprNode>();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
;

variable_expr:
    ID
    {
        $$ = &driver.env().create<VariableExprNode, String&>(*$1);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
|   expression DOT ID
    {
        $$ = &driver.env().create<VariableExprNode, ExpressionNode&, String&>(*$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   type_class COLON ID
    {
        $$ = &driver.env().create<VariableExprNode, ExpressionNode&, String&>(*$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
;

method_call_expr:
    expression DOT ID '(' expression_list_empty ')'
    {
        $$ = &driver.env().create<MethodCallExprNode, ExpressionNode&, String&, MutableCollection<ExpressionNode>&>(*$1, *$3, *$5);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @6.last_line;
        $$->last_column = @6.last_column;
        
        $5->destroy();
    }
;

arithmetic_expr:
    expression PLUS expression
    {
        $$ = &driver.env().create<ArithBinaryExprNode, arith_op, ExpressionNode&, ExpressionNode&>(op_add, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   expression MINUS expression
    {
        $$ = &driver.env().create<ArithBinaryExprNode, arith_op, ExpressionNode&, ExpressionNode&>(op_sub, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   expression STAR expression
    {
        $$ = &driver.env().create<ArithBinaryExprNode, arith_op, ExpressionNode&, ExpressionNode&>(op_mul, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   expression SLASH expression
    {
        $$ = &driver.env().create<ArithBinaryExprNode, arith_op, ExpressionNode&, ExpressionNode&>(op_div, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   expression PERCENTAGE expression
    {
        $$ = &driver.env().create<ArithBinaryExprNode, arith_op, ExpressionNode&, ExpressionNode&>(op_mod, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   PLUS expression %prec SIGN_PREC
    {
        $$ = &driver.env().create<SignExprNode, sign_t, ExpressionNode&>(sign_plus, *$2);

        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   MINUS expression %prec SIGN_PREC
    {
        $$ = &driver.env().create<SignExprNode, sign_t, ExpressionNode&>(sign_minus, *$2);

        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   PLUS_PLUS variable_expr
    {
        $$ = &driver.env().create<ArithUnaryExprNode, arith_unary, VariableExprNode&>(unary_inc, *$2);

        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   MINUS_MINUS variable_expr
    {
        $$ = &driver.env().create<ArithUnaryExprNode, arith_unary, VariableExprNode&>(unary_dec, *$2);

        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   variable_expr PLUS_PLUS %prec UNARY_POST_PREC
    {
        $$ = &driver.env().create<ArithUnaryExprNode, arith_unary, VariableExprNode&>(unary_post_inc, *$1);

        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   variable_expr MINUS_MINUS %prec UNARY_POST_PREC
    {
        $$ = &driver.env().create<ArithUnaryExprNode, arith_unary, VariableExprNode&>(unary_post_dec, *$1);

        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   variable_expr EQUAL expression
    {
        $$ = &driver.env().create<AssignmentExprNode, VariableExprNode&, ExpressionNode&>(*$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   variable_expr PLUS_EQUAL expression
    {
        $$ = &driver.env().create<ArithAssignmentExprNode, arith_op, VariableExprNode&, ExpressionNode&>(op_add, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   variable_expr MINUS_EQUAL expression
    {
        $$ = &driver.env().create<ArithAssignmentExprNode, arith_op, VariableExprNode&, ExpressionNode&>(op_sub, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   variable_expr STAR_EQUAL expression
    {
        $$ = &driver.env().create<ArithAssignmentExprNode, arith_op, VariableExprNode&, ExpressionNode&>(op_mul, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   variable_expr SLASH_EQUAL expression
    {
        $$ = &driver.env().create<ArithAssignmentExprNode, arith_op, VariableExprNode&, ExpressionNode&>(op_div, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   variable_expr PERCENTAGE_EQUAL expression
    {
        $$ = &driver.env().create<ArithAssignmentExprNode, arith_op, VariableExprNode&, ExpressionNode&>(op_mod, *$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
;


// INSTRUCTIONS
instruction:
    expression ';'
    {
        $$ = &driver.env().create<ExpressionInstNode, ExpressionNode&>(*$1);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   variable_initializer_inst ';'
    {
        $$ = $1;
        
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   return_inst ';'
    {
        $$ = $1;
        
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   inline_pasm_inst ';'
    {
        $$ = $1;
        
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   '{' instruction_block '}'
    {
        $$ = $2;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   error ';'
;

instruction_block:
    //empty
    {
        $$ = &driver.env().create<BlockInstNode>();
    }
|   instruction_block instruction
    {
        $$ = $1;
        if ($2) { $$->instructions.add(*$2); }
    }
;

return_inst:
    RETURN '<' expression_list_empty '>'
    {
        $$ = &driver.env().create<ReturnInstNode, MutableCollection<ExpressionNode>&>(*$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @4.last_line;
        $$->last_column = @4.last_column;
        
        $3->destroy();
    }
|   RETURN expression
    {
        $$ = &driver.env().create<ReturnInstNode, ExpressionNode&>(*$2);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @2.last_line;
        $$->last_column = @2.last_column;
    }
|   RETURN
    {
        $$ = &driver.env().create<ReturnInstNode>();
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @1.last_line;
        $$->last_column = @1.last_column;
    }
;

variable_initializer_inst:
    variable_decl EQUAL expression
    {
        $$ = &driver.env().create<VariableInitInstNode, VariableDeclNode &, ExpressionNode &>(*$1, *$3);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   variable_decl COLON_EQUAL expression
    {
        $$ = &driver.env().create<VariableInitInstNode, VariableDeclNode &, ExpressionNode &>(*$1, *$3);
        $$->final = true;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   variable_decl COLON_COLON_EQUAL expression
    {
        $$ = &driver.env().create<VariableInitInstNode, VariableDeclNode &, ExpressionNode &>(*$1, *$3);
        $$->final = true;
        $$->reinterpret = true;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @3.last_line;
        $$->last_column = @3.last_column;
    }
|   '<' variable_decl_list '>' EQUAL method_call_expr
    {
        $$ = &driver.env().create<VariableInitInstNode, MutableCollection<VariableDeclNode> &, MethodCallExprNode &>(*$2, *$5);
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
        
        $2->destroy();
    }
|   '<' variable_decl_list '>' COLON_EQUAL method_call_expr
    {
        $$ = &driver.env().create<VariableInitInstNode, MutableCollection<VariableDeclNode> &, MethodCallExprNode &>(*$2, *$5);
        $$->final = true;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @5.last_line;
        $$->last_column = @5.last_column;
        
        $2->destroy();
    }
;

inline_pasm_inst:
    PASM '(' STRING ')'
    {
        InlinePasmInstNode &node = driver.env().create<InlinePasmInstNode, NodeMap<ExpressionNode> &, NodeMap<ExpressionNode> &>(
            driver.env().create<NodeMap<ExpressionNode>>(),
            driver.env().create<NodeMap<ExpressionNode>>()
        );
        node.pasm = *$3;
        $$ = &node;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @4.last_line;
        $$->last_column = @4.last_column;
        
        $3->destroy();
    }
|   PASM '(' STRING ',' '{' expression_map_empty '}' ')'
    {
        InlinePasmInstNode &node = driver.env().create<InlinePasmInstNode, NodeMap<ExpressionNode> &, NodeMap<ExpressionNode> &>(
            *$6,
            driver.env().create<NodeMap<ExpressionNode>>()
        );
        node.pasm = *$3;
        $$ = &node;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @8.last_line;
        $$->last_column = @8.last_column;
        
        $3->destroy();
    }
|   PASM '(' STRING ',' '{' expression_map_empty '}' ',' '{' expression_map_empty '}' ')'
    {
        InlinePasmInstNode &node = driver.env().create<InlinePasmInstNode, NodeMap<ExpressionNode> &, NodeMap<ExpressionNode> &>(
            *$6,
            *$10
        );
        node.pasm = *$3;
        $$ = &node;
        
        $$->first_line = @1.first_line;
        $$->first_column = @1.first_column;
        $$->last_line = @12.last_line;
        $$->last_column = @12.last_column;
        
        $3->destroy();
    }
;

//=
