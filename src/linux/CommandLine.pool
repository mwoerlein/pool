/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux;

use sys::core::utils::StringOwner;
use sys::core::String;
use sys::core::OStream;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyListIterator;
use sys::core::anycollection::AnyMap;
use sys::core::anycollection::AnyMapEntry;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::runtime::Runtime;

class CommandLine extends StringOwner {

    String _calledCommand;
    AnyList _arguments;     // LinkedList<String>
    AnyMap _options;        // HashMap<String, String>
    AnyMap _optionAliases;  // HashMap<String, String>
    AnyMap _listOptions;    // HashMap<String, LinkedList<String>>
    
    [] _initCommandLine() {
        _arguments = this.rt().createInstance(AnyList:CLASSNAME);
        _options = this.rt().createInstance(AnyMap:CLASSNAME);
        _options.init(13);
        _optionAliases = this.rt().createInstance(AnyMap:CLASSNAME);
        _optionAliases.init(13);
        _listOptions = this.rt().createInstance(AnyMap:CLASSNAME);
        _listOptions.init(13);
        this._initStringOwner();
    }
    
    [] _destructCommandLine() {
        _arguments.destroy();
        _options.destroy();
        _optionAliases.destroy();
        _listOptions.destroy();
        this._destructStringOwner();
    }

    // TODO: implement usage parsing (see http://docopt.org/)
    [CommandLine] registerOptionAlias(int alias, cstring option) {
        _optionAliases.set(
            this.createOwnStringFromChar(alias),
            this.createOwnStringFromCString(option)
        );
        return this;
    }
    
    // TODO: implement usage parsing (see http://docopt.org/)
    [CommandLine] registerOptionList(cstring option) {
        _listOptions.set(
            this.createOwnStringFromCString(option),
            this.rt().createInstance(AnyList:CLASSNAME)
        );
        return this;
    }
    
    [int] hasOption(cstring option) {
        if (this.hasListOption(option)) { return true; }
        String optionName = this._getOptionNameFromCString(option);
        int ret = this._options.has(optionName);
        optionName.destroy();
        return ret;
    }
    
    [int] hasValueOption(cstring option) {
        if (this.getValueOption(option)) { return true; }
        return false;
    }
    
    [String] getValueOption(cstring option) {
        String optionName = this._getOptionNameFromCString(option);
        String ret = this._options.get(optionName);
        optionName.destroy();
        return ret;
    }
    
    [int] hasListOption(cstring option) {
        return this.getListOptionSize(option) > 0;
    }
    
    [int] getListOptionSize(cstring option) {
        int ret = 0;
        String optionName = this._getOptionNameFromCString(option);
        if (this._listOptions.has(optionName)) {
            AnyList list = this._listOptions.get(optionName);
            ret = list.size();
        }
        optionName.destroy();
        return ret;
    }
    
    [AnyIterator] getListOption(cstring option) {
        AnyIterator ret = null;
        String optionName = this._getOptionNameFromCString(option);
        if (this._listOptions.has(optionName)) {
            AnyList list = this._listOptions.get(optionName);
            ret = list.iterator();
        } else {
            ret = this.rt().cast(AnyIterator:CLASSNAME, this.rt().createInstance(AnyListIterator:CLASSNAME));
        }
        optionName.destroy();
        return ret;
    }
    
    [int] getArgumentsSize() { return this._arguments.size(); }
    [AnyIterator] getArguments() { return this._arguments.iterator(); }
    
    [OStream] dumpCLToStream(OStream stream) {
        stream.printCString("called command: ").print(this._calledCommand).printNewline();
        stream.printCString("options:").printNewline();
        {
            AnyMapEntryIterator it = this._options.entries();
            while (it.hasNext()) {
                AnyMapEntry e = it.next();
                String key = e.getKey();
                String value = e.getValue();
                stream.printChar('-').printChar(' ').print(key);
                if (e.getValue()) {
                    stream.printChar(' ').printChar('=').printChar(' ').print(value);
                }
                stream.printNewline();
            }
            it.destroy();
        }
        {
            AnyMapEntryIterator it = this._listOptions.entries();
            while (it.hasNext()) {
                AnyMapEntry e = it.next();
                String key = e.getKey();
                AnyList list = e.getValue();
                stream.printChar('-').printChar(' ').print(key).printChar(' ').printChar('[');
                AnyIterator lit = list.iterator();
                while (lit.hasNext()) {
                    String value = lit.next();
                    stream.printChar(' ').print(value);
                }
                lit.destroy();
                stream.printChar(' ').printChar(']').printNewline();
            }
            it.destroy();
        }
        stream.printCString("arguments:").printNewline();
        {
            AnyIterator it = this._arguments.iterator();
            while (it.hasNext()) {
                String arg = it.next();
                stream.printChar('-').printChar(' ').print(arg).printNewline();
            }
            it.destroy();
        }
        return stream;
    }
    
    [int] parseCommandLine(int argc, int argv) {
        _calledCommand = this.createOwnStringFromCString(this._getStringFromMem(argv));
        
        Runtime rt = this.rt();
        String arg = rt.createInstance(String:CLASSNAME);
        String opt = rt.createInstance(String:CLASSNAME);
        String value = rt.createInstance(String:CLASSNAME);
        
        int ret = this._parseCommandLine(argc, argv, arg, opt, value);
        
        value.destroy();
        opt.destroy();
        arg.destroy();
        return ret;
    }
    
    // private
    int MODE_START      := 0;
    int MODE_ARG        := 1;
    int MODE_SHORT_OPT  := 2;
    int MODE_LONG_OPT   := 3;
    int MODE_OPT_VALUE  := 4;
        
    [int] _parseCommandLine(int argc, int argv, String arg, String opt, String value) {
        OStream err = this.rt().err();
        int mode = MODE_START;
        while (--argc) {
            int current = this._getAddressFromMem(argv += 4);
            int c = this._getCharFromMem(current++);
            if (c == '-') {
                if (mode == MODE_ARG) {
                    if (!this._pushArgument(arg)) { return false; }
                } else if (mode == MODE_SHORT_OPT || mode == MODE_LONG_OPT) {
                    if (!this._pushOption(opt)) { return false; }
                } else if (mode == MODE_OPT_VALUE) {
                    if (!this._pushValueOption(opt, value)) { return false; }
                }
                mode = MODE_SHORT_OPT;
            } else {
                if (mode == MODE_START) {
                    mode = MODE_ARG;
                    arg.printChar(c);
                } else if (mode == MODE_ARG) {
                    if (!this._pushArgument(arg)) { return false; }
                    arg.printChar(c);
                } else if (mode == MODE_SHORT_OPT || mode == MODE_LONG_OPT) {
                    mode = MODE_OPT_VALUE;
                    value.printChar(c);
                } else if (mode == MODE_OPT_VALUE) {
                    if (!this._pushValueOption(opt, value)) { return false; }
                    mode = MODE_ARG;
                    arg.printChar(c);
                }
            }
            while (c = this._getCharFromMem(current++)) {
                if (c == '-') {
                    if (mode == MODE_ARG) {
                        arg.printChar(c);
                    } else if (mode == MODE_SHORT_OPT) {
                        if (opt.length()) {
                            err.printCString("'-' within short option list").printNewline();
                            return false;
                        }
                        mode = MODE_LONG_OPT;
                    } else if (mode == MODE_LONG_OPT) {
                        if (!opt.length()) {
                            err.printCString("'-' at start of long option").printNewline();
                            return false;
                        }
                        opt.printChar(c);
                    } else if (mode == MODE_OPT_VALUE) {
                        value.printChar(c);
                    }
                } else if (c == '=') {
                    if (mode == MODE_ARG) {
                        arg.printChar(c);
                    } else if (mode == MODE_SHORT_OPT || mode == MODE_LONG_OPT) {
                        mode = MODE_OPT_VALUE;
                    } else if (mode == MODE_OPT_VALUE) {
                        value.printChar(c);
                    }
                } else {
                    if (mode == MODE_ARG) {
                        arg.printChar(c);
                    } else if (mode == MODE_SHORT_OPT) {
                        if (opt.length()) { 
                            if (!this._pushOption(opt)) { return false; }
                        }
                        opt.printChar(c);
                    } else if (mode == MODE_LONG_OPT) {
                        opt.printChar(c);
                    } else if (mode == MODE_OPT_VALUE) {
                        value.printChar(c);
                    }
                }
            }
        }
        if (mode == MODE_ARG) {
            if (!this._pushArgument(arg)) { return false; }
        } else if (mode == MODE_SHORT_OPT) {
            if (opt.length()) {
                if (!this._pushOption(opt)) { return false; }
            } else {
                arg.printChar('-');
                if (!this._pushArgument(arg)) { return false; }
            }
        } else if (mode == MODE_LONG_OPT) {
            if (opt.length()) {
                if (!this._pushOption(opt)) { return false; }
            } else {
                arg.printChar('-').printChar('-');
                if (!this._pushArgument(arg)) { return false; }
            }
        } else if (mode == MODE_OPT_VALUE) {
            if (!this._pushValueOption(opt, value)) { return false; }
        }
        return true;
    }
    
    [int] _pushArgument(String arg) {
        if (!arg.length()) {
            this.rt().err().printCString("no argument to push").printNewline();
            return false;
        }
        String argument = this.createOwnStringFromString(arg); arg.clear();
        this._arguments.add(argument);
        return true;
    }
    
    [int] _pushOption(String opt) {
        if (!opt.length()) {
            this.rt().err().printCString("no option to push").printNewline();
            return false;
        }
        String optionName = this._getOwnOptionName(opt); opt.clear();
        if (this._listOptions.has(optionName)) {
            this.rt().err().printCString("list option without value to push").printNewline();
            return false;
        }
        this._options.set(optionName, null);
        return true;
    }
    
    [int] _pushValueOption(String opt, String val) {
        if (!opt.length() || !val.length()) {
            this.rt().err().printCString("no option with value to push").printNewline();
            return false;
        }
        String optionName = this._getOwnOptionName(opt); opt.clear();
        String value = this.createOwnStringFromString(val); val.clear();
        if (this._listOptions.has(optionName)) {
            AnyList listOption = this._listOptions.get(optionName);
            listOption.add(value);
        } else {
            this._options.set(optionName, value);
        }
        return true;
    }
    
    [String] _getOwnOptionName(String option) {
        if (this._optionAliases.has(option)) {
            return this._optionAliases.get(option);
        }
        return this.createOwnStringFromString(option);
    }
    
    [String] _getOptionNameFromCString(cstring option) {
        String optionName = this.createStringFromCString(option);
        if (this._optionAliases.has(optionName)) {
            String alias = this._optionAliases.get(optionName);
            optionName.destroy();
            optionName = this.createStringFromString(alias);
        }
        return optionName;
    }
    
    [cstring] _getStringFromMem(int address) {
        cstring s = "";
        __pasm__("movl (%eax), %eax;", {"%eax": address}, {"%eax": s});
        return s;
    }
    
    [int] _getAddressFromMem(int address) {
        int addr = 0;
        __pasm__("movl (%eax), %eax;", {"%eax": address}, {"%eax": addr});
        return addr;
    }
    
    [int] _getCharFromMem(int address) {
        int c = 0;
        __pasm__("movb (%eax), %bl", {"%eax": address, "%ebx": c} , {"%ebx": c});
        return c;
    }
}
