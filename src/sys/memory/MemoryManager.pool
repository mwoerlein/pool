/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::memory;

use sys::runtime::ClassDescriptor;
use sys::stream::OStream;

class MemoryManager extends Allocator {
    
    MemoryInfo available;
    MemoryInfo used;
    MemoryInfo reserved;
    MemoryInfoPool nonEmbeddedInfos;
    int allocateIncreasing;
    
    // methods
    [MemoryInfo] allocate(int size) {
        int required = size + MemoryInfo:SIZEOF;
        
        if (required < size) {
            return this.sizeOverflow(size);
        }
        
        // find available memory
        MemoryInfo available = this._findInfoByLen(this.available, required);
        if (available.len < required) {
            return this.outOfAvailable(size);
        }
        
        if (available.len < (required + 2*MemoryInfo:SIZEOF)) {
            // use whole info
            available.buf += MemoryInfo:SIZEOF;
            available.len -= MemoryInfo:SIZEOF;
            
            // remove from available
            this._unlinkMemoryInfo(available);
        } else {
            // split info
            [MemoryInfo used, MemoryInfo remaining] = this._splitAvailableMemoryInfo(available, size);
    
            if (Address:compare(available, remaining)) {
                // replace available by remaining in available list
                this._replaceMemoryInfo(available, remaining);
            } else {
                available = used;
            }
        }
        
        // append to used
        this._appendToUsed(available);
        
        return available;
    }
    
    [] free(MemoryInfo info) {
        MemoryInfo freeInfo = info; 
        int freeInfoPtr = Address:from(freeInfo);
        
        if (!freeInfo || (freeInfo.flags != MemoryInfo:FLAGS_USED)) {
            this.rt().err().printCString("bad free ").printPtr(freeInfoPtr).printNewline();
            return;
        }
        
        // remove from used
        freeInfo.flags = MemoryInfo:FLAGS_AVAILABLE;
        this._unlinkMemoryInfo(freeInfo);
        
        if (freeInfo.buf == freeInfoPtr + MemoryInfo:SIZEOF) {
            // adjust embedded info
            freeInfo.buf = freeInfoPtr;
            freeInfo.len += MemoryInfo:SIZEOF;
        } else {
            freeInfo = this._makeEmbedded(freeInfo);
        }
    
        // insert into available
        this._mergeMemoryInfoInto(available, freeInfo);
    }
    
    [MemoryInfo] getInfo(int addr) {
        // TODO: implement
        return Address:cast(MemoryInfo:NONE);
    }
    
    [int] getAvailableBytes() {
        int bytes = 0;
        MemoryInfo cur = available.next;
        while (Address:compare(cur, available)) {
            bytes += cur.len;
            cur = cur.next;
        }
        return bytes;
    }
    
    // errors
    [MemoryInfo] sizeOverflow(int size) {
        this.rt().err().printCString("bad allocate ").printPtr(size).printNewline();
        return Address:cast(MemoryInfo:NONE);
    }
    
    [MemoryInfo] outOfAvailable(int size) {
        this.rt().err().printCString("bad allocate ").printPtr(size).printNewline();
        return Address:cast(MemoryInfo:NONE);
    }
    
    // initializations
    [] initEmpty(MemoryInfo available, int allocateIncreasing, int poolElements) {
        this.allocateIncreasing = allocateIncreasing;
        
        // initialize pool
        [MemoryInfoPool pool, MemoryInfo initialAvailable] = this._createPool(available, 3 + poolElements);
        if (Address:from(pool) == MemoryInfo:NONE) { return; } // bail out
        
        // init manager
        this.nonEmbeddedInfos = pool;
        this.available = this._nextNonEmbeddedInfo(0, 0, MemoryInfo:FLAGS_AVAILABLE);
        this.used      = this._nextNonEmbeddedInfo(0, 0, MemoryInfo:FLAGS_USED);
        this.reserved  = this._nextNonEmbeddedInfo(0, 0, MemoryInfo:FLAGS_RESERVED);
        
        this._appendMemoryInfo(this.available.prev, initialAvailable);
        this._appendMemoryInfo(this.used.prev, pool.self);
    }
    
    [] initEmptyFromAllocator(Allocator allocator, int allocateIncreasing, int poolElements) {
        // initialize pool
        int poolSize = MemoryInfoPool:SIZEOF + poolElements*MemoryInfo:SIZEOF;
        MemoryInfo used = allocator.allocate(poolSize);
        if (Address:from(used) == MemoryInfo:NONE) { return; } // bail out
        
        MemoryInfoPool pool = Address:cast(used.buf);
        pool.self = used;
        pool.size = poolElements;
        pool.used = 0;
        pool.elements = used.buf + MemoryInfoPool:SIZEOF;
        
        // init manager
        this.allocateIncreasing = allocateIncreasing;
        this.nonEmbeddedInfos = pool;
        this.available = this._nextNonEmbeddedInfo(0, 0, MemoryInfo:FLAGS_AVAILABLE);
        this.used      = this._nextNonEmbeddedInfo(0, 0, MemoryInfo:FLAGS_USED);
        this.reserved  = this._nextNonEmbeddedInfo(0, 0, MemoryInfo:FLAGS_RESERVED);
    }
    
    [] initFromMemoryManager(MemoryManager src) {
        this.allocateIncreasing = src.allocateIncreasing;
        this.nonEmbeddedInfos = src.nonEmbeddedInfos;
        this.available = src.available;
        this.used = src.used;
        this.reserved = src.reserved;
    }
    
    [MemoryInfoPool, MemoryInfo] _createPool(MemoryInfo available, int poolElements) {
        int poolSize = MemoryInfoPool:SIZEOF + poolElements*MemoryInfo:SIZEOF;
        int requiredSize = MemoryInfo:SIZEOF + poolSize;
        if (available.len < requiredSize + MemoryInfo:SIZEOF) {
            // bail out
            this.rt().err().printCString("too many pool elements for available space\n");
            return [Address:cast(MemoryInfo:NONE), Address:cast(MemoryInfo:NONE)];
        }
        // separate remaining space
        [MemoryInfo used, MemoryInfo remaining] = this._splitAvailableMemoryInfo(available, poolSize);
        
        // initiate pool
        used.flags = MemoryInfo:FLAGS_USED;
        
        MemoryInfoPool pool = Address:cast(used.buf);
        pool.self = used;
        pool.size = poolElements;
        pool.used = 0;
        pool.elements = used.buf + MemoryInfoPool:SIZEOF;
        return [pool, remaining];
    }
    
    // pool handling
    [MemoryInfo] _nextNonEmbeddedInfo(int buf, int len, int flags) {
        MemoryInfo info = Address:cast(MemoryInfo:NONE);
        if (nonEmbeddedInfos.used < nonEmbeddedInfos.size) {
            info = Address:cast(nonEmbeddedInfos.elements + MemoryInfo:SIZEOF*(nonEmbeddedInfos.used++));
            info.buf = buf;
            info.len = len;
            info.flags = flags;
            info.owner = 0;
            info.next = info.prev = info;
        }
        return info;
    }
    
    [MemoryInfo] _makeEmbedded(MemoryInfo nonEmbeddedInfo) {
        // create embedded info
        MemoryInfo info = Address:cast(nonEmbeddedInfo.buf);
        info.buf = nonEmbeddedInfo.buf;
        info.len = nonEmbeddedInfo.len;
        info.flags = nonEmbeddedInfo.flags;
        info.owner = nonEmbeddedInfo.owner;
        
        this._replaceMemoryInfo(nonEmbeddedInfo, info);
        // clear non-embedded info
        nonEmbeddedInfo.buf = 0;
        nonEmbeddedInfo.len = 0;
        nonEmbeddedInfo.next = nonEmbeddedInfo.prev = nonEmbeddedInfo;
        
        return info;
    }
    
    [MemoryInfo, MemoryInfo] _splitAvailableMemoryInfo(MemoryInfo available, int size) {
        if (!this.allocateIncreasing) {
            MemoryInfo info = MemoryManager:_allocateFromBottom(available, size);
            return [info, available];
        }
        
        int required = size + MemoryInfo:SIZEOF;
        int remainingBuf = available.buf + required;
        MemoryInfo remaining = Address:cast(remainingBuf);
        remaining.buf = remainingBuf;
        remaining.len = available.len - required;
        remaining.flags = MemoryInfo:FLAGS_AVAILABLE;
            
        available.buf += MemoryInfo:SIZEOF;
        available.len = size;
        return [available, remaining];
    }
    
    // memory info list handling    
    [MemoryInfo] _findInfoByPtr(MemoryInfo list, int ptr) {
        MemoryInfo cur = list;
        while (Address:compare(cur.next, list) && Address:compareAddress(cur.next.buf, ptr) <= 0) { cur = cur.next; }
        return cur;
    }
    
    [MemoryInfo] _findInfoByLen(MemoryInfo list, int len) {
        MemoryInfo cur = list;
        while (Address:compare(cur.next, list) && (cur.len < len)) { cur = cur.next; }
        //while (Address:compare(cur.next, list) && Address:compareAddress(cur.len, len) < 0) { cur = cur.next; }
        return cur;
    }
    
    [] _mergeMemoryInfoInto(MemoryInfo list, MemoryInfo info) {
        MemoryInfo prev = this._findInfoByPtr(list, info.buf);
        this._appendMemoryInfo(prev, info);
        MemoryInfo next = info.next;
        
        if (((info.buf + info.len) == next.buf) && Address:compare(next, list)) {
            // merge right
            info.len = (next.buf + next.len) - info.buf; 
            this._unlinkMemoryInfo(next);
            next.flags = 0;
        }
        if (((prev.buf + prev.len) == info.buf) && Address:compare(prev, list)) {
            // merge left
            prev.len = (info.buf + info.len) - prev.buf;
            this._unlinkMemoryInfo(info);
            info.flags = 0;
            
            int prevPtr = Address:from(prev);
            
            if ((prev.buf != prevPtr) && (prev.len > MemoryInfo:SIZEOF)) {
                prev = this._makeEmbedded(prev);
            }
        }
    }
    
    [] _appendToUsed(MemoryInfo used) {
        used.flags = MemoryInfo:FLAGS_USED;
        //MemoryInfo usedPrev = this._findInfoByPtr(this.used, available.buf); // for sorted used-list
        MemoryInfo usedPrev = this.used.prev;
        this._appendMemoryInfo(usedPrev, used);
    }
    
    // generic info list handling    
    [] _appendMemoryInfo(MemoryInfo info, MemoryInfo newInfo) {
        newInfo.prev = info;
        newInfo.next = info.next;
        newInfo.prev.next = newInfo.next.prev = newInfo;
    }
    
    [] _unlinkMemoryInfo(MemoryInfo info) {
        info.next.prev = info.prev;
        info.prev.next = info.next;
        info.next = info.prev = info;
    }
    
    [] _replaceMemoryInfo(MemoryInfo info, MemoryInfo newInfo) {
        newInfo.next = info.next;
        newInfo.prev = info.prev;
        newInfo.prev.next = newInfo.next.prev = newInfo;
        info.next = info.prev = info;
    }
    
    // debug
    [OStream] dumpToStream(OStream stream, int all) {
        if (Address:compare(available.next, available)) {
            stream.printCString("available:\n");
            MemoryInfo cur = available.next;
            while (Address:compare(cur, available)) {
                this._dumpInfo(cur, stream).printNewline();
                cur = cur.next;
            }
        }
        if (all) {
            if (Address:compare(reserved.next, reserved)) {
                stream.printCString("reserved:\n");
                MemoryInfo cur = reserved.next;
                while (Address:compare(cur, reserved)) {
                    this._dumpInfo(cur, stream).printNewline();
                    cur = cur.next;
                }
            }
            if (Address:compare(used.next, used)) {
                stream.printCString("used:\n");
                MemoryInfo cur = used.next;
                while (Address:compare(cur, used)) {
                    this._dumpInfo(cur, stream).printNewline();
                    cur = cur.next;
                }
            }
        }
        
        return stream;
    }
    
    [OStream] _dumpInfo(MemoryInfo info, OStream stream) {
        int infoEnd = info.buf + info.len;
        int infoPtr = Address:from(info);
        return stream.printPtr(info.buf).printChar(':').printPtr(infoEnd)
            .printChar('[').printPtr(info.len).printChar(']')
            .printChar(' ').printChar('(').printPtr(infoPtr).printChar(')');
    }
    
    // global
    global [MemoryInfo] _allocateFromBottom(MemoryInfo available, int size) {
        int required = size + MemoryInfo:SIZEOF;
        int bottomBuf = available.buf + available.len - required;
        MemoryInfo bottom = Address:cast(bottomBuf);
        bottom.buf = bottomBuf + MemoryInfo:SIZEOF;
        bottom.len = size;
            
        available.len -= required;
        return bottom;
    }
    
    global [ClassDescriptor] _getClassDesc() {
        ClassDescriptor desc = null;
        __pasm__("movl 8(%ebp), %eax", {}, {"%eax": desc});
        return desc;
    } 
}
