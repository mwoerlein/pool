/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::memory;

use sys::memory::Address;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

class MemoryIOStream extends SeekableIOStream {
    
    int _pos;
    int _owned;
    MemoryInfo _mem;
    
    [] _init(int size) {
        _mem = this.rt().getAllocator().allocate(size);
        _owned = true;
        _pos = 0;
    }
    
    [] _initMem(MemoryInfo mem) {
        _mem = mem;
        _owned = false;
        _pos = 0;
    }
    
    [] __destruct() {
        if (_owned) {
            this.rt().getAllocator().free(_mem);
        }
    }
     
    [int] isEmpty() { return _pos == _mem.len; }
    [int] length() { return _mem.len; }
    [int] pos() { return _pos; }
    
    [int] readChar() {
        if (_pos >= _mem.len) {
            return 0;
        }
        return Address:loadChar(_mem.buf + _pos++);
    }
    
    [OStream] printChar(int c) {
        if (_pos < _mem.len) {
            Address:storeChar(_mem.buf + _pos++, c);
        }
        return this.ostream();
    }
    
    [] seek(int pos) {
        if (pos <= 0) {
            _pos = 0;
        } else if (pos >= _mem.len) {
            _pos = _mem.len;
        } else {
            _pos = pos;
        }
    }
}
