/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::runtime;

use sys::core::Object;
use sys::core::OStream;
use sys::core::Thread;
use sys::core::Class;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;

class Runtime extends Object {

    OStream out;
    OStream err;
    Allocator allocator;
    ClassStorage classStorage;
    
    [OStream] out() { return out; }
    [] setOut(OStream out) { this.out = out; }
    
    [OStream] err() { return err; }
    [] setErr(OStream err) { this.err = err; }
    
    [Allocator] getAllocator() { return allocator; }
    [] setAllocator(Allocator allocator) { this.allocator = allocator; }
    
    [ClassStorage] getClassStorage() { return classStorage; }
    [] setClassStorage(ClassStorage classStorage) { this.classStorage = classStorage; }
    
    [] createAndRunThread(cstring name) {
        __any__ instance = this.createInstance(name);
        if (!instance) { return; } // abort on initialization error
        Object o = this.cast(Object:CLASSNAME, instance);
        if (!o) { return; } // abort on initialization error
        
        Thread thread = this.cast(Thread:CLASSNAME, instance);
        if (thread) { thread.run(); }
        o.destroy();
    }
        
    // TODO #9: use generic method or special cast syntax instead __all__/__any__
    [__all__] cast(cstring name, __any__ obj) {
        return Runtime:_castTo(classStorage.getClassDesc(name), obj);
    }
    
    // TODO #9: use generic method or special new syntax instead __all__
    [__all__] createInstance(cstring name) {
        ClassDescriptor classDesc = classStorage.getClassDesc(name);
        if (!classDesc) { return null; } // abort on initialization error
        
        if (!classDesc.class_instance) {
            Class cl = this.createInstance(Class:CLASSNAME);
            if (!cl) { return null; } // abort on initialization error
            cl.setDesc(classDesc);
        }
        
        // allocate memory for instance
        MemoryInfo instInfo = allocator.allocate(classDesc.inst_tpl_size);
        if (!instInfo) { return null; } // abort on initialization error

        [__all__ instance, Object oinstance] = Runtime:_initTemplate(instInfo, classDesc);
        oinstance.setRt(this); // TODO: adjust Object
        oinstance.__init();
        return instance;
    }
    
    // TODO #9: use generic method instead of __any__
    [] destroyInstance(__any__ obj) {
        InstanceHandle curHandle = null;
        __pasm__("", {"%eax": obj}, {"%eax": curHandle});
        allocator.free(curHandle.inst_desc.info);
    }
    
    global [ClassDescriptor] _getClassDesc() {
        ClassDescriptor desc = null;
        __pasm__("movl 8(%ebp), %eax", {}, {"%eax": desc});
        return desc;
    } 
    
    // TODO: move to I386Runtime
    global [__all__] _castTo(ClassDescriptor classDesc, __any__ obj) {
        InstanceHandle curHandle = null;
        __pasm__("", {"%eax": obj}, {"%eax": curHandle});
        ClassDescriptor objDesc = curHandle.inst_desc.class_desc;
        if (classDesc) {
            ClassTableEntry curEntry = null;
            __pasm__("addl %ebx, %eax", {"%eax": objDesc, "%ebx": objDesc.class_tabs_offset}, {"%eax": curEntry});
            while (curEntry.handle_offset) {
                int diff = 0;
                __pasm__("subl %ebx, %eax", {"%eax": curEntry.class_desc, "%ebx": classDesc}, {"%eax": diff});
                if (!diff) {
                    __all__ newHandle = null;
                    __pasm__("addl %ebx, %eax", {"%eax": curHandle.inst_desc, "%ebx": curEntry.handle_offset}, {"%eax": newHandle});
                    return newHandle;
                }
                __pasm__("addl %ebx, %eax", {"%eax": curEntry, "%ebx": ClassTableEntry:SIZEOF}, {"%eax": curEntry});
            }
        }
        return null;
    }
    
    global [__all__, Object] _initTemplate(MemoryInfo instInfo, ClassDescriptor classDesc) {
        int call_entry = 0;
        __pasm__("movl 8(%ebp), %eax; addl _cr_mo_call_entry, %eax", {}, {"%eax": call_entry});
        InstanceDescriptor inst_desc = null;
        __pasm__("", {"%eax": instInfo.buf}, {"%eax": inst_desc});
        
        // copy template to object
        __pasm__(
            "addl %eax, %esi; .byte 0xf3; .byte 0xa4 #// rep movsb",
             {"%eax": classDesc.inst_tpl_offset, "%ecx": classDesc.inst_tpl_size, "%esi": classDesc, "%edi": inst_desc}
        );
        
        inst_desc.class_desc = classDesc;
        inst_desc.info = instInfo;
        
        { // init handles
            ClassTableEntry curEntry = null;
            InstanceHandle curHandle = null;
            __pasm__("addl %ebx, %eax", {"%eax": classDesc, "%ebx": classDesc.class_tabs_offset}, {"%eax": curEntry});
            while (curEntry.handle_offset) {
                __pasm__("addl %ebx, %eax", {"%eax": inst_desc, "%ebx": curEntry.handle_offset}, {"%eax": curHandle});
                curHandle.call_entry = call_entry;
                curHandle.inst_desc = inst_desc;
                curHandle.vtab_offset = curEntry.vtab_offset;
                __pasm__("addl %ebx, %eax", {"%eax": curEntry, "%ebx": ClassTableEntry:SIZEOF}, {"%eax": curEntry});
            }
        }
        
        __all__ inst = null;
        __pasm__("addl %ebx, %eax", {"%eax": inst_desc, "%ebx": classDesc.class_handle_offset}, {"%eax": inst});
        Object obj = null;
        __pasm__("addl %ebx, %eax", {"%eax": inst_desc, "%ebx": classDesc.obj_handle_offset}, {"%eax": obj});
        return [inst, obj];
    }
    
    __naked__ [] _call_entry() {
        __pasm__(<"
        _cr_mo_call_entry := (_call_entry - _sys_runtime_Runtime)
        _call_entry:
            pushl %ecx
            movl 12(%esp), %ebx // load object handle
            movl 4(%ebx), %ecx	// get object
            movl 0(%ecx), %eax  // get class-desc
            addl 8(%ebx), %eax  // get vtab
            addl 8(%esp), %eax	// get vtab-entry by adding method-offset number
            movl 0(%ecx), %ebx	// get class-desc
            addl 4(%eax), %ebx  // get method-vtabs-entry
            addl 12(%ebx), %ecx  // compute method-@this
            movl %ecx, 12(%esp) // store method-@this
            movl 0(%ebx), %ebx // get method-class-desc
            movl %ebx, 8(%esp)  // store method-class-desc
            movl %ebx, %ecx
            addl 20(%ecx), %ecx   // get methods-tab
            addl 0(%eax), %ecx  // get method-offset-addr
            addl (%ecx), %ebx   // compute method-addr
            popl %ecx
            jmp %ebx            // goto method
        ">);
    }
    
}
