/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::memory::Address;
use sys::runtime::Class;
use sys::runtime::InstanceHandle;
use sys::runtime::Runtime;

class Object {
    
    // variables
    Runtime runtime;
    
    // methods
    [Class] getClass() {
        InstanceHandle self = Address:convert(this);
        return self.inst_desc.class_desc.class_instance;
    }
    
    [int] getAddress() {
        InstanceHandle self = Address:convert(this);
        return Address:from(self.inst_desc);
    }
    
    [int] hash() {
        return this.getAddress();
    }
    
    // TODO: use generic method instead of __any__?
    [int] equals(__any__ obj) {
        int eq = 0;
        __pasm__(<"
            movl 4(%eax), %eax  // @this
            cmpl %eax, 4(%ebx)  // @obj
            jne _come_ret
            movl 1, %ecx        // return true
            _come_ret:
        ">, {"%eax": this, "%ebx": obj, "%ecx": eq}, {"%ecx": eq});
        return eq;
    }
    
    [OStream] printToStream(OStream stream) {
        return stream.print(this.getClass().getName()).printChar('@').printPtr(this.getAddress());
    }
    
    [Runtime] rt() {
        return runtime;
    }
    
    // TODO #7: move to constructor?
    [] __init() {}
    
    // TODO #7: move to constructor?
    [] setRt(Runtime rt) {
        runtime = rt;
    }
    
    // TODO: move to destructor/implicit destruction instead of manual one
    [] __destruct() {}
    
    // TODO: move to destructor/implicit destruction instead of manual one
    [] destroy() {
        this.__destruct();
        this.rt().destroyInstance(this);
    }
}
