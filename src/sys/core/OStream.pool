/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::memory::Address;

class OStream extends Object {
    
    abstract [OStream] printChar(int c);
    
    [OStream] printInt(int i) {
        return this._printInt(i, 10, 0);
    }
    
    [OStream] printHex(int i) {
        return this._printHex(i, 0);
    }
    
    [OStream] printPtr(int i) {
        return this._printUHex(i, 8);
    }
    
    [OStream] printAddr(__any__ i) {
        return this._printUHex(Address:from(i), 8);
    }
    
    [OStream] printCString(cstring s) {
        return this._printCString(Address:fromString(s));
    }
    
    // TODO: use generic method instead of plain Object?
    [OStream] print(__any__ o) {
        Object obj = this.rt().cast(Object:CLASSNAME, o);
        return obj.printToStream(this);
    }
    
    [OStream] printNewline() {
        return this.printChar('\n');
    }

    // private
    [OStream] _printInt(int d, int base, int pad) {
        if (d < 0) {
            this.printChar('-');
            d = -d;
        }
        return this._printUInt(d, base, pad);
    }
    
    [OStream] _printUInt(int d, int base, int pad) {
        int p = 0;
        // allocate buffer on stack
        int buf_size = 32;
        if (pad > buf_size) { buf_size = pad; }
        buf_size++; // terminal \0 
        __pasm__("subl %eax, %esp", {"%eax": buf_size} , {"%esp": p});
        
        p += buf_size;          // goto end of buffer..
        this._putCharToMem(--p, 0);  // .. and terminate temporal cstring
        int padded_start = p - pad;
        int cur = d;
        int remainder = 0;
        
        /*  Divide D by BASE until D == 0. */
        { // TODO: use do {...} while, if available
            __pasm__("movl 0, %edx; div %ebx", {"%eax": cur, "%ebx": base}, {"%eax": cur, "%edx": remainder});
            if (remainder < 10) {
                this._putCharToMem(--p, remainder + '0');
            } else {
                this._putCharToMem(--p, remainder + 'a' - 10);
            }
        }
        while (cur) {
            __pasm__("movl 0, %edx; div %ebx", {"%eax": cur, "%ebx": base}, {"%eax": cur, "%edx": remainder});
            if (remainder < 10) {
                this._putCharToMem(--p, remainder + '0');
            } else {
                this._putCharToMem(--p, remainder + 'a' - 10);
            }
        }
        while (p > padded_start) {
            this._putCharToMem(--p, '0');
        }
    
        this._printCString(p);
        
        // free stack
        __pasm__("addl %eax, %esp", {"%eax": buf_size});
        return this;
    }
    
    [OStream] _printHex(int d, int pad) {
        if (d < 0) {
            this.printChar('-');
            d = -d;
        }
        return this._printUHex(d, pad);
    }
    
    [OStream] _printUHex(int d, int pad) {
        return this.printChar('0').printChar('x')._printUInt(d, 16, pad);
    }
    
    [OStream] _printCString(int stringAddress) {
        int c = 0;
        while (c = this._getCharFromMem(stringAddress++)) {
            this.printChar(c);
        }
        return this;
    }
    
    [] _putCharToMem(int address, int c) {
        __pasm__("movb %bl, (%eax)", {"%eax": address, "%ebx": c});
    }
    
    [int] _getCharFromMem(int address) {
        int c = 0;
        __pasm__("movb (%eax), %bl", {"%eax": address, "%ebx": c} , {"%ebx": c});
        return c;
    }
    
}
