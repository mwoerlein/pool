/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
[pool]
bootstrap = bootstrap
bootstrap2 = my::core::Runtime:bootstrap(int, int)
*/
namespace my::core;


class Runtime extends Object {
    
    // constants
    // streams
    global int out := 0;
    global int err := 1;
    
    // TODO: remove after implicit string handling
    cstring mClass := "my::core::Class";
    cstring mThread := "my::core::Thread";
    
    // TODO: remove with syscall
    // SysCall constants
    int SysCall_allocate := 1;
    int SysCall_free := 2;
    int SysCall_find_class := 3;
    int SysCall_print := 4;
    
    // TODO: remove with syscall
    // SysCall print kinds
    int spk_char := 0;
    int spk_int := 1;
    int spk_hex := 2;
    int spk_string := 3;
    
    // TODO: remove with syscall
    // SysCall print streams
    int sps_out := 0;
    int sps_err := 1;
    
    // TODO: remove with working ClassHeader "struct"
    int ch_inst_handle := 4;
    int ch_cts := 12;
    int ch_mt := 20;
    int ch_tpl := 24;
    int ch_tpl_size := 28;
    int ch_tpl_obj_handle := 32;
    int ch_tpl_cls_handle := 36;
    
    // TODO: remove with working ClassTab "struct"
    int cts_cdo := 0;
    int cts_vto := 8;
    int cts_ho := 12;
    int cts_size := 16;
    
    // variables
    // TODO: remove after real pool implementation exists
    int syscall_runtime;
    int syscall_entry;
    
    // methods
    global <Runtime> bootstrap(int syscall_runtime, int syscall_entry) {
        __pasm__(<"
// TODO #3: inline method-indices in method-call-generation
        _my_core_Class_m_setDesc := 48
            subl 12, %esp
            pushad
            
            movl 0x0, 24(%ebp)  // default result: NULL
            movl 8(%ebp), %eax  // @class-desc "Runtime"
            addl _my_core_Runtime_coso_mClass, %eax
            
            pushl 0     // desc
            pushl %eax  // "/my/Class"
            pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl 16(%ebp); call 20(%ebp)
            addl 16, %esp
            popl -12(%ebp)      // store @class desc
            
            movl -12(%ebp), %edx
            pushl 0     // info
            pushl _my_core_Runtime_coi_ch_tpl_size(%edx) // instance size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl 16(%ebp); call 20(%ebp)
            addl 16, %esp
            popl %eax   // return info
            addl 0, %eax; jz _bs_return // return NULL on allocate error
            
            movl -12(%ebp), %edx    // @class-desc "Class"
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
        	movl %edi, -8(%ebp)     // store @Class (Type Object)
        	
            pushl -12(%ebp)
            pushl %esi; pushl _my_core_Class_m_setDesc; call (%esi)
        	addl 12, %esp
        	
            movl 8(%ebp), %edx      // @class-desc "Runtime"
            pushl 0     // info
            pushl _my_core_Runtime_coi_ch_tpl_size(%edx) // instance size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl 16(%ebp); call 20(%ebp)
            addl 16, %esp
            popl %eax   // return info
            addl 0, %eax; jz _bs_return  // return NULL on allocate error
            
            movl 8(%ebp), %edx      // @class-desc "Runtime"
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
            
            pushl %esi
            pushl %edi; pushl _my_core_Object_m_setRt; call (%edi)
        	addl 12, %esp
            
            pushl 20(%ebp)  // @syscall-entry
            pushl 16(%ebp)  // @syscall-runtime
            pushl %esi; pushl _my_core_Runtime_m_initSysCall; call (%esi)
        	addl 16, %esp
        	
        	movl -8(%ebp), %edi     // load @Class (Type Object)
            pushl %esi
            pushl %edi; pushl _my_core_Object_m_setRt; call (%edi)
        	addl 12, %esp
            
            movl 8(%ebp), %eax      // @class-desc "Runtime"
            addl _my_core_Runtime_coso_mClass, %eax
            subl 4, %esp    // return value of createInstance
            pushl %eax      // @classname
            pushl %esi; pushl _my_core_Runtime_m_createInstance; call (%esi)
        	addl 12, %esp
            popl %eax       // @class (Type Class)
            addl 0, %eax; jz _crmci_return  // return NULL if class could not be initialized
            
            pushl 8(%ebp)   // @class-desc "Runtime"
            pushl %eax; pushl _my_core_Class_m_setDesc; call (%eax)
        	addl 12, %esp
        	
            movl %esi, 24(%ebp) // store @runtime (Type Runtime) as result
        _bs_return:
            popad
        ">);
    }
    
    <> initSysCall(int syscall_runtime, int syscall_entry) {
        this.syscall_runtime = syscall_runtime;
        this.syscall_entry = syscall_entry;
    }
    
    // TODO: replace int with working ClassHeader "struct"
    // TODO: replace cstring with working String class
    <int> getClassDesc(cstring name) {
        __pasm__(<"
            pushad
            
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 0         // desc
            pushl 16(%ebp)  // @classname
            pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 16, %esp
            popl 20(%ebp)   // return @class desc
            
            popad
        ">);
    }
    
    // TODO: replace int with working MemInfo "struct"
    <int> allocate(int size) {
        __pasm__(<"
            pushad
            
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 0         // info
            pushl 16(%ebp)  // param size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 16, %esp
            popl 20(%ebp)   // return info
            
            popad
        ">);
    }
    
    // TODO: replace int with working MemInfo "struct"
    <> free(int info) {
        __pasm__(<"
            pushad
            
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param info
            pushl 0         // size
            pushl _my_core_Runtime_coi_SysCall_free
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 20, %esp
            
            popad
        ">);
    }
    
    <> printChar(int c, int stream) {
        __pasm__(<"
            pushad
            
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param c
            pushl _my_core_Runtime_coi_spk_char // kind
            pushl 20(%ebp)  // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
            
            popad
        ">);
    }
    
    <> printString(cstring s, int stream) {
        __pasm__(<"
            pushad
            
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)    // param s
            pushl _my_core_Runtime_coi_spk_string // kind
            pushl 20(%ebp)    // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
            
            popad
        ">);
    }
    
    <> printInt(int i, int stream) {
        __pasm__(<"
            pushad
            
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param i
            pushl _my_core_Runtime_coi_spk_int  // kind
            pushl 20(%ebp)  // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
            
            popad
        ">);
    }
    
    <> printHex(int i, int stream) {
        __pasm__(<"
            pushad
            
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param i
            pushl _my_core_Runtime_coi_spk_hex  // kind
            pushl 20(%ebp)  // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
            
            popad
        ">);
    }
    
    // TODO: use generic method instead of plain Object?
    <> destroyInstance(Object any) {
        __pasm__(<"
            movl 16(%ebp), %eax       // @obj (Type ANY)
            movl 4(%eax), %eax        // @obj
            movl 12(%ebp), %ebx       // @this (Type Runtime)
            
            pushl 4(%eax)             // @obj meminfo
            pushl %ebx; pushl _my_core_Runtime_m_free; call (%ebx)
            addl 12, %esp
        ">);
    }
    
    // TODO: use generic method or special cast syntax instead of plain Object?
    <Object> cast(cstring name, Object any) {
        __pasm__(<"
            pushl %ecx
            pushl %esi
        _crma_start:
            movl 0, 24(%ebp)    // not-found default handle: NULL
            movl 12(%ebp), %esi // @this (Type Runtime)
            
            subl 4, %esp        // return value of getClassDesc
            pushl 16(%ebp)      // param @classname
            pushl %esi; pushl _my_core_Runtime_m_getClassDesc; call (%esi)
        	addl 12, %esp
            popl %ecx           // @class-desc
            addl 0, %ecx; jz _crma_return   // return NULL if class not exists
           
            movl 20(%ebp), %eax // @obj (Type ANY)
            movl 4(%eax), %ebx  // @obj
            movl (%ebx), %eax   // @obj-class desc
            addl _my_core_Runtime_coi_ch_cts(%eax), %eax // @obj-class vtabs entry
        _crma_loop:
            cmpl (%eax), %ecx
            je _crma_found
            addl _my_core_Runtime_coi_cts_size, %eax
            cmpl 0, (%eax)
            je _crma_return
            jmp _crma_loop
        _crma_found:
            addl _my_core_Runtime_coi_cts_ho(%eax), %ebx
            movl %ebx, 24(%ebp) // return correct handle
        _crma_return:
            popl %esi
            popl %ecx
        ">);
    }
    
    <> createAndRunThread(cstring name) {
        __pasm__(<"
// TODO #3: inline method-indices in method-call-generation
        _my_core_Thread_m_run := 40
            pushl %ecx
            pushl %esi
        _mcrmcart_start:
            movl 12(%ebp), %esi // @this (Type Runtime)
        ">);
        // createInstance
        __pasm__(<"
            subl 4, %esp        // return value of createInstance
            pushl 16(%ebp)      // param @classname
            pushl %esi; pushl _my_core_Runtime_m_createInstance; call (%esi)
        	addl 12, %esp
            popl %ecx;          // @instance (type <classname>)
            addl 0, %ecx; jz _mcrmcart_return // break if not instantiated
        ">);
        // cast to Thread
        __pasm__(<"
            movl 8(%ebp), %eax  // @class-desc "Runtime"
            addl _my_core_Runtime_coso_mThread, %eax
            subl 4, %esp        // return value of as
            pushl %ecx
            pushl %eax
            pushl %esi; pushl _my_core_Runtime_m_cast; call (%esi)
            addl 16, %esp
            popl %eax;          // @instance (type "Thread")
            addl 0, %eax; jz _mcrmcart_cleanup // destroy instance if not a thread
            movl %eax, %ecx
        ">);
        // run thread
        __pasm__(<"
            pushl %ecx; pushl _my_core_Thread_m_run; call (%ecx)
            addl 8, %esp
        ">);
        // cleanup
        __pasm__(<"
        _mcrmcart_cleanup:
            pushl %ecx
            pushl %esi; pushl _my_core_Runtime_m_destroyInstance; call (%esi)
        	addl 12, %esp
        ">);
        // return
        __pasm__(<"
        _mcrmcart_return:
            popl %esi
            popl %ecx
        ">);
    }
    
    // TODO: use generic method or special new syntax instead of plain Object?
    <Object> createInstance(cstring name) {
        __pasm__(<"
            pushad
        _crmci_start:
            movl 0, 20(%ebp)    // default handle: NULL
            movl 12(%ebp), %esi // @this (Type Runtime)
        ">);
        // getClassDesc
        __pasm__(<"
            subl 4, %esp    // return value of getClassDesc
            pushl 16(%ebp)  // param @classname
            pushl %esi; pushl _my_core_Runtime_m_getClassDesc; call (%esi)
        	addl 12, %esp
            popl %edx       // @class-desc
            addl 0, %edx; jz _crmci_return  // return NULL if class not exists
        ">);
        // if (!Class instance exist)
        __pasm__(<"
            cmpl 0, _my_core_Runtime_coi_ch_inst_handle(%edx)
            jnz _crmci_instantiate  // class already initialized
        ">);
        // create Class instance
        __pasm__(<"
            movl 8(%ebp), %eax      // @class-desc "Runtime"
            addl _my_core_Runtime_coso_mClass, %eax
            subl 4, %esp    // return value of createInstance
            pushl %eax      // @classname
            pushl %esi; pushl _my_core_Runtime_m_createInstance; call (%esi)
        	addl 12, %esp
            popl %eax       // @class (Type Class)
            addl 0, %eax; jz _crmci_return  // return NULL if class could not be initialized
        ">);
        // setDescriptor
        __pasm__(<"
            pushl %edx      // @class-desc
            pushl %eax; pushl _my_core_Class_m_setDesc; call (%eax)
        	addl 12, %esp
        ">);
        // endif
        // allocate memory for instance
        __pasm__(<"
        _crmci_instantiate:
            subl 4, %esp    // return value of allocate
            pushl _my_core_Runtime_coi_ch_tpl_size(%edx) // instance size
            pushl %esi; pushl _my_core_Runtime_m_allocate; call (%esi)
        	addl 12, %esp
            popl %eax       // @object-meminfo
            addl 0, %eax; jz _crmci_return
        ">);
        // call _crh_instantiate AND return correct handle
        __pasm__(<"
            pushl %esi      // @Runtime for later setRt
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
            addl 0, %esi; jz _crmci_return  // return NULL if instance could not be generated
            movl %esi, 20(%ebp)             // return correct handle
            pushl %edi; pushl _my_core_Object_m_setRt; call (%edi)
        	addl 12, %esp
        _crmci_return:
            popad
        ">);
    }
    
    __naked__ <> _crh_instantiate() {
        __pasm__(<"
        _crh_instantiate:       // %eax: @object-meminfo %ebx: @_call_entry %edx: @Class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
            movl (%eax), %edi   // @object
            movl %edx, %esi
            addl _my_core_Runtime_coi_ch_tpl(%edx), %esi         // @instance tpl
            movl _my_core_Runtime_coi_ch_tpl_size(%edx), %ecx    // instance size
            .byte 0xf3; .byte 0xa4 #// rep movsb // copy template to object
            
            movl (%eax), %edi   // @object
            movl %edx, (%edi)   // store @class desc in instance 
            movl %eax, 4(%edi)  // store @meminfo in instance
            
            movl %edx, %eax     // @obj-class desc
            addl _my_core_Runtime_coi_ch_cts(%eax), %eax         // @obj-class vtabs entry
        _crhi_loop:
            movl _my_core_Runtime_coi_cts_ho(%eax), %esi
            movl _my_core_Runtime_coi_cts_vto(%eax), %ecx
            movl %ebx, (%edi, %esi)     // store @call-entry in handle
            movl %edi, 4(%edi, %esi)    // store @object in handle
            movl %ecx, 8(%edi, %esi)    // store vtab-offset in handle
            addl _my_core_Runtime_coi_cts_size, %eax
            cmpl 0, (%eax)
            jne _crhi_loop
            
            movl %edi, %esi
            addl _my_core_Runtime_coi_ch_tpl_obj_handle(%edx), %edi // @object (Type Object)
            addl _my_core_Runtime_coi_ch_tpl_cls_handle(%edx), %esi // @object (Type <class>)
            ret
        ">);
    }
    
    __naked__ <> _call_entry() {
        __pasm__(<"
        _cr_mo_call_entry := (_call_entry - _my_core_Runtime)
        _call_entry:
            pushl %ecx
            movl 12(%esp), %ebx // load object handle
            movl 4(%ebx), %ecx	// get object
            movl 0(%ecx), %eax  // get class-desc
            addl 8(%ebx), %eax  // get vtab
            addl 8(%esp), %eax	// get vtab-entry by adding method-offset number
            movl 0(%ecx), %ebx	// get class-desc
            addl 4(%eax), %ebx  // get method-vtabs-entry
            addl _my_core_Runtime_coi_cts_ho(%ebx), %ecx  // compute method-@this
            movl %ecx, 12(%esp) // store method-@this
            movl _my_core_Runtime_coi_cts_cdo(%ebx), %ebx // get method-class-desc
            movl %ebx, 8(%esp)  // store method-class-desc
            movl %ebx, %ecx
            addl _my_core_Runtime_coi_ch_mt(%ecx), %ecx   // get methods-tab
            addl 0(%eax), %ecx  // get method-offset-addr
            addl (%ecx), %ebx   // compute method-addr
            popl %ecx
            jmp %ebx            // goto method
        ">);
    }
    
}
