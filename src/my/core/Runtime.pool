/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
[pool]
bootstrap = bootstrap
bootstrap2 = my::core::Runtime:bootstrap(int, int)
*/
namespace my::core;


class Runtime extends Object {
    
    // constants
    // streams
    int out := 0;
    int err := 1;
    
    // TODO: remove after implicit string handling
    cstring newline := "\n";
    
    // TODO: remove with syscall
    // SysCall constants
    int SysCall_allocate := 1;
    int SysCall_free := 2;
    int SysCall_find_class := 3;
    int SysCall_print := 4;
    
    // TODO: remove with syscall
    // SysCall print kinds
    int spk_char := 0;
    int spk_int := 1;
    int spk_hex := 2;
    int spk_string := 3;
    
    // TODO: remove with syscall
    // SysCall print streams
    int sps_out := 0;
    int sps_err := 1;
    
    // TODO: remove with working ClassHeader "struct"
    int ch_inst_handle := 4;
    int ch_cts := 12;
    int ch_mt := 20;
    int ch_tpl := 24;
    int ch_tpl_size := 28;
    int ch_tpl_obj_handle := 32;
    int ch_tpl_cls_handle := 36;
    
    // TODO: remove with working ClassTab "struct"
    int cts_cdo := 0;
    int cts_vto := 8;
    int cts_ho := 12;
    int cts_size := 16;
    
    // variables
    // TODO: remove after real pool implementation exists
    int syscall_runtime;
    int syscall_entry;
    
    // methods
    global <Runtime> bootstrap(int syscall_runtime, int syscall_entry) {
        // TODO #13: use null if supported
        int nil := 0;           //  -4(%ebp)
        Object oNil ::= nil;    //  -8(%ebp)
        Class cNil ::= nil;     // -12(%ebp)
        Runtime rNil ::= nil;   // -16(%ebp)
        // TODO: replace int with working ClassHeader "struct"
        int cdClass = 0;        // -20(%ebp)
        int cdRuntime = 0;      // -24(%ebp)
        Class cClass = cNil;    // -28(%ebp)
        Class cRuntime = cNil;  // -32(%ebp)
        Object ocClass = oNil;  // -36(%ebp)
        Object ocRuntime = oNil;// -40(%ebp)
        Runtime rt = rNil;      // -44(%ebp)
        Object ort = oNil;      // -48(%ebp)
        int icClass = 0;        // -52(%ebp)
        int irt = 0;            // -56(%ebp)
        cstring sClass = Class:CLASSNAME;     // -60(%ebp)
        cstring sRuntime = Runtime:CLASSNAME; // -64(%ebp)
        
        // create class "Class"
        // TODO #5: simplify syscall
        __pasm__(<"
            pushl 0         // desc
            pushl -60(%ebp) // var <sClass>
            pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl 16(%ebp); call 20(%ebp)
            addl 16, %esp
            popl -20(%ebp)  // store @class desc in var <cdClass>
        ">);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -20(%ebp); je _bs_return_null // return NULL if class not found");
        // TODO #5: simplify syscall
        __pasm__(<"
            pushl 0                 // space for meminfo
            movl -20(%ebp), %edx    // var <cdClass>
            pushl _my_core_Runtime_coi_ch_tpl_size(%edx) // instance size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl 16(%ebp); call 20(%ebp)
            addl 16, %esp
            popl -52(%ebp)  // store meminfo in var <icClass>
        ">);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -52(%ebp); je _bs_return_null // return NULL on allocate error");
        // TODO #14: simplify call to naked _crh_instantiate
        __pasm__(<"
            movl -52(%ebp), %eax    // var <icClass>
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            movl -20(%ebp), %edx    // var <cdClass>
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
        	movl %edi, -36(%ebp)    // store @Class (Type Object) in var <ocClass>
        	movl %esi, -28(%ebp)    // store @Class (Type Class) in var <cClass>
        ">);

        // create Runtime
        // TODO #5: simplify syscall
        __pasm__(<"
            pushl 0         // desc
            pushl -64(%ebp) // var <sRuntime>
            pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl 16(%ebp); call 20(%ebp)
            addl 16, %esp
            popl -24(%ebp)  // store @class desc in var <cdRuntime>
        ">);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -24(%ebp); je _bs_return_null // return NULL if class not found");
        // TODO #5: simplify syscall
        __pasm__(<"
            pushl 0                 // space for meminfo
            movl -24(%ebp), %edx    // var <cdRuntime>
            pushl _my_core_Runtime_coi_ch_tpl_size(%edx) // instance size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl 16(%ebp); call 20(%ebp)
            addl 16, %esp
            popl -56(%ebp)  // store meminfo in var <irt>
        ">);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -56(%ebp); je _bs_return_null // return NULL on allocate error");
        // TODO #14: simplify call to naked _crh_instantiate
        __pasm__(<"
            movl -56(%ebp), %eax    // var <irt>
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            movl -24(%ebp), %edx    // var <cdRuntime>
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
        	movl %edi, -48(%ebp)    // store @Class (Type Object) in var <ort>
        	movl %esi, -44(%ebp)    // store @Class (Type Runtime) in var <rt>
        ">);
        
        // init class "Class"
        cClass.setRt(rt);
        cClass.setDesc(cdClass);
        
        // init Runtime
        rt.setRt(rt);
        rt.initSysCall(syscall_runtime, syscall_entry);
        
        // create and init class "Runtime"
        Class _cRuntime ::= rt.createInstance(sClass);
        cRuntime = _cRuntime;
        // TODO #4: use pool guard
__pasm__("cmpl 0, -32(%ebp); je _bs_return_null // return NULL if class could not be initialized");
        cRuntime.setDesc(cdRuntime); 
        return rt;
        
        // TODO #4: use pool guard
__pasm__("_bs_return_null:");
        return rNil;
    }
    
    <> initSysCall(int syscall_runtime, int syscall_entry) {
        this.syscall_runtime = syscall_runtime;
        this.syscall_entry = syscall_entry;
    }
    
    // TODO: replace int with working ClassHeader "struct"
    // TODO: replace cstring with working String class
    // TODO #5: convert PASM to Pool
    <int> getClassDesc(cstring name) {
        __pasm__(<"
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 0         // desc
            pushl 16(%ebp)  // @classname
            pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 16, %esp
            popl 20(%ebp)   // return @class desc
        ">);
    }
    
    // TODO: replace int with working MemInfo "struct"
    // TODO #5: convert PASM to Pool
    <int> allocate(int size) {
        __pasm__(<"
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 0         // info
            pushl 16(%ebp)  // param size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 16, %esp
            popl 20(%ebp)   // return info
        ">);
    }
    
    // TODO: replace int with working MemInfo "struct"
    // TODO #5: convert PASM to Pool
    <> free(int info) {
        __pasm__(<"
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param info
            pushl 0         // size
            pushl _my_core_Runtime_coi_SysCall_free
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 20, %esp
        ">);
    }
    
    // TODO #5: convert PASM to Pool
    <> printChar(int c, int stream) {
        __pasm__(<"
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param c
            pushl _my_core_Runtime_coi_spk_char // kind
            pushl 20(%ebp)  // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
        ">);
    }
    
    // TODO #5: convert PASM to Pool
    <> printString(cstring s, int stream) {
        __pasm__(<"
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)    // param s
            pushl _my_core_Runtime_coi_spk_string // kind
            pushl 20(%ebp)    // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
        ">);
    }
    
    // TODO #5: convert PASM to Pool
    <> printInt(int i, int stream) {
        __pasm__(<"
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param i
            pushl _my_core_Runtime_coi_spk_int  // kind
            pushl 20(%ebp)  // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
        ">);
    }
    
    // TODO #5: convert PASM to Pool
    <> printHex(int i, int stream) {
        __pasm__(<"
            movl 12(%ebp), %eax                             // @this (Type Runtime)
            movl _my_core_Runtime_hvo_my_core_Runtime(%eax), %ebx     // inst vars offset (Runtime)
            addl 4(%eax), %ebx                              // @this.vars(Runtime)
            
            pushl 16(%ebp)  // param i
            pushl _my_core_Runtime_coi_spk_hex  // kind
            pushl 20(%ebp)  // param stream
            pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl _my_core_Runtime_i_syscall_runtime(%ebx); call _my_core_Runtime_i_syscall_entry(%ebx)
            addl 24, %esp
        ">);
    }
    
    // TODO: use generic method instead of plain Object?
    <> destroyInstance(Object any) {
        int instInfo = 0;       // -8(%ebp)
        __pasm__(<"
            movl 16(%ebp), %eax // @obj (Type ANY)
            movl 4(%eax), %eax  // @obj
            movl 4(%eax), %eax  // @obj meminfo
            movl %eax, -8(%ebp) // var <instInfo>
        ">);
        this.free(instInfo);
        return;
    }
    
    // TODO: use generic method or special cast syntax instead of plain Object?
    <Object> cast(cstring name, Object any) {
        // TODO #13: use null if supported
        int nil := 0;           // -8(%ebp)
        Object oNil ::= nil;    // -12(%ebp)
        // TODO: replace int with working class header "struct"
        int classDesc = 0;      // -16(%ebp)
        Object ret = oNil;      // -20(%ebp)
        classDesc = this.getClassDesc(name);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -16(%ebp); jz _crma_return_null   // return NULL if class not exists");
        __pasm__(<"
            movl -16(%ebp), %ecx // var <classDesc>
            movl 20(%ebp), %eax // @obj (Type ANY)
            movl 4(%eax), %ebx  // @obj
            movl (%ebx), %eax   // @obj-class desc
            addl _my_core_Runtime_coi_ch_cts(%eax), %eax // @obj-class vtabs entry
        _crma_loop:
            cmpl (%eax), %ecx
            je _crma_found
            addl _my_core_Runtime_coi_cts_size, %eax
            cmpl 0, (%eax)
            je _crma_return_null
            jmp _crma_loop
        _crma_found:
            addl _my_core_Runtime_coi_cts_ho(%eax), %ebx
            movl %ebx, -20(%ebp) // var <ret>
        ">);
        return ret;
        // TODO #4: use pool guard
__pasm__("_crma_return_null:");
        return oNil;
    }
    
    <> createAndRunThread(cstring name) {
        // TODO #13: use null if supported
        int nil := 0;           //  -8(%ebp)
        Object oNil ::= nil;    // -12(%ebp)
        Thread tNil ::= nil;    // -16(%ebp)
        Object instance = oNil; // -20(%ebp)
        Thread tinstance = tNil;// -24(%ebp)
        
        instance = this.createInstance(name);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -20(%ebp); je _mcrmcart_return    // break if not instantiated");
        Thread _t ::= this.cast(Thread:CLASSNAME, instance);
        tinstance = _t;
        // TODO #4: use pool guard
__pasm__("cmpl 0, -24(%ebp); je _mcrmcart_cleanup   // destroy instance if not a thread");
        tinstance.run();
        // TODO #4: use pool guard
__pasm__("_mcrmcart_cleanup:");
        this.destroyInstance(instance);
        // TODO #4: use pool guard
__pasm__("_mcrmcart_return:");
        return;
    }
    
    // TODO: use generic method or special new syntax instead of plain Object?
    <Object> createInstance(cstring name) {
        // TODO #13: use null if supported
        int nil := 0;           //  -8(%ebp)
        Object oNil ::= nil;    // -12(%ebp)
        Class cNil ::= nil;     // -16(%ebp)
        // TODO: replace ints with working class header "struct"
        int classDesc = 0;      // -20(%ebp)
        int instHandle = 0;     // -24(%ebp)
        int tplSize = 0;        // -28(%ebp)
        // TODO: replace int with working MemInfo "struct"
        int instInfo = 0;       // -32(%ebp)
        Class cl = cNil;        // -36(%ebp)
        Object oinstance = oNil;// -40(%ebp)
        Object instance = oNil; // -44(%ebp)
        
        // getClassDesc
        classDesc = this.getClassDesc(name);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -20(%ebp); je _crmci_return_null   // return NULL if class not found");
        
        // TODO: replace ints with working class header "struct"
        __pasm__(<"
            movl -20(%ebp), %eax    // var <classDesc>
            movl _my_core_Runtime_coi_ch_inst_handle(%eax), %ebx
            movl %ebx, -24(%ebp)    // var <instHandle>
            movl _my_core_Runtime_coi_ch_tpl_size(%eax), %ebx
            movl %ebx, -28(%ebp)    // var <tplSize>
        ">);
        // if (!instHandle)
        // TODO #4: use pool guard
__pasm__("cmpl 0, -24(%ebp); jnz _crmci_instantiate  // class already initialized");
        
        Class _cl ::= this.createInstance(Class:CLASSNAME);
        cl = _cl;
        // TODO #4: use pool guard
__pasm__("cmpl 0, -36(%ebp); je _crmci_return_null  // return NULL if class could not be initialized");
        cl.setDesc(classDesc);
        // endif
        
        // TODO #4: use pool guard
__pasm__("_crmci_instantiate:");
        // allocate memory for instance
        instInfo = this.allocate(tplSize);
        // TODO #4: use pool guard
__pasm__("cmpl 0, -32(%ebp); je _crmci_return_null  // return NULL on allocate error");

        // TODO #14: simplify call to naked _crh_instantiate
        __pasm__(<"
            movl -32(%ebp), %eax    // var <instInfo>
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            movl -20(%ebp), %edx    // var <class_desc>
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <name>)
        	movl %edi, -40(%ebp)    // store @Class (Type Object) in var <oinstance>
        	movl %esi, -44(%ebp)    // store @Class (Type <name>) in var <instance>
        ">);
        oinstance.setRt(this);
        return instance;
        
        // TODO #4: use pool guard
__pasm__("_crmci_return_null:");
        return oNil;
    }
    
    __naked__ <> _crh_instantiate() {
        __pasm__(<"
        _crh_instantiate:       // %eax: @object-meminfo %ebx: @_call_entry %edx: @Class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
            movl (%eax), %edi   // @object
            movl %edx, %esi
            addl _my_core_Runtime_coi_ch_tpl(%edx), %esi         // @instance tpl
            movl _my_core_Runtime_coi_ch_tpl_size(%edx), %ecx    // instance size
            .byte 0xf3; .byte 0xa4 #// rep movsb // copy template to object
            
            movl (%eax), %edi   // @object
            movl %edx, (%edi)   // store @class desc in instance 
            movl %eax, 4(%edi)  // store @meminfo in instance
            
            movl %edx, %eax     // @obj-class desc
            addl _my_core_Runtime_coi_ch_cts(%eax), %eax         // @obj-class vtabs entry
        _crhi_loop:
            movl _my_core_Runtime_coi_cts_ho(%eax), %esi
            movl _my_core_Runtime_coi_cts_vto(%eax), %ecx
            movl %ebx, (%edi, %esi)     // store @call-entry in handle
            movl %edi, 4(%edi, %esi)    // store @object in handle
            movl %ecx, 8(%edi, %esi)    // store vtab-offset in handle
            addl _my_core_Runtime_coi_cts_size, %eax
            cmpl 0, (%eax)
            jne _crhi_loop
            
            movl %edi, %esi
            addl _my_core_Runtime_coi_ch_tpl_obj_handle(%edx), %edi // @object (Type Object)
            addl _my_core_Runtime_coi_ch_tpl_cls_handle(%edx), %esi // @object (Type <class>)
            ret
        ">);
    }
    
    __naked__ <> _call_entry() {
        __pasm__(<"
        _cr_mo_call_entry := (_call_entry - _my_core_Runtime)
        _call_entry:
            pushl %ecx
            movl 12(%esp), %ebx // load object handle
            movl 4(%ebx), %ecx	// get object
            movl 0(%ecx), %eax  // get class-desc
            addl 8(%ebx), %eax  // get vtab
            addl 8(%esp), %eax	// get vtab-entry by adding method-offset number
            movl 0(%ecx), %ebx	// get class-desc
            addl 4(%eax), %ebx  // get method-vtabs-entry
            addl _my_core_Runtime_coi_cts_ho(%ebx), %ecx  // compute method-@this
            movl %ecx, 12(%esp) // store method-@this
            movl _my_core_Runtime_coi_cts_cdo(%ebx), %ebx // get method-class-desc
            movl %ebx, 8(%esp)  // store method-class-desc
            movl %ebx, %ecx
            addl _my_core_Runtime_coi_ch_mt(%ecx), %ecx   // get methods-tab
            addl 0(%eax), %ecx  // get method-offset-addr
            addl (%ecx), %ebx   // compute method-addr
            popl %ecx
            jmp %ebx            // goto method
        ">);
    }
    
}
