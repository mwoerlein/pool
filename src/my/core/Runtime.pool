/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
[pool]
bootstrap = bootstrap
bootstrap2 = my::core::Runtime:bootstrap(int, int)
*/
namespace my::core;


class Runtime extends Object {
    
    // constants
    // streams
    int out := 0;
    int err := 1;
    
    cstring newline := "\n";
    
    // TODO: remove with syscall
    // SysCall constants
    int SysCall_allocate := 1;
    int SysCall_free := 2;
    int SysCall_find_class := 3;
    int SysCall_print := 4;
    
    // TODO: remove with syscall
    // SysCall print kinds
    int spk_char := 0;
    int spk_int := 1;
    int spk_hex := 2;
    int spk_string := 3;
    
    // TODO: remove with syscall
    // SysCall print streams
    int sps_out := 0;
    int sps_err := 1;
    
    // TODO: remove with working ClassHeader "struct"
    int ch_inst_handle := 4;
    int ch_cts := 12;
    int ch_mt := 20;
    int ch_tpl := 24;
    int ch_tpl_size := 28;
    int ch_tpl_obj_handle := 32;
    int ch_tpl_cls_handle := 36;
    
    // TODO: remove with working ClassTab "struct"
    int cts_cdo := 0;
    int cts_vto := 8;
    int cts_ho := 12;
    int cts_size := 16;
    
    // variables
    // TODO: remove after real pool implementation exists
    int syscall_runtime;
    int syscall_entry;
    
    // methods
    global [Runtime] bootstrap(int syscall_runtime, int syscall_entry) {
        
        // create class "Class"
        // TODO: replace int with working ClassHeader "struct"
        int cdClass = 0;
        __pasm__(<"
            pushl 0; pushl %eax; pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": Class:CLASSNAME, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": cdClass});
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _bs_return_null // return NULL if class not found", {"%eax": cdClass});

        // TODO: replace int with working MemInfo "struct"
        int icClass = 0;
        __pasm__(<"
            pushl 0
            pushl _my_core_Runtime_coi_ch_tpl_size(%eax) // instance size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": cdClass, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": icClass});
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _bs_return_null // return NULL on allocate error", {"%eax": icClass});

        Class cClass = null;
        __pasm__(<"
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
        ">, {"%eax": icClass, "%edx": cdClass}, {"%esi": cClass});

        // create Runtime
        // TODO: replace int with working ClassHeader "struct"
        int cdRuntime = 0;
        __pasm__(<"
            pushl 0; pushl %eax; pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": Runtime:CLASSNAME, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": cdRuntime} );
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _bs_return_null // return NULL if class not found", {"%eax": cdRuntime});

        // TODO: replace int with working MemInfo "struct"
        int irt = 0;
        __pasm__(<"
            pushl 0
            pushl _my_core_Runtime_coi_ch_tpl_size(%eax) // instance size
            pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": cdRuntime, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": irt});
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _bs_return_null // return NULL on allocate error", {"%eax": irt});

        Runtime rt = null;
        __pasm__(<"
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
        ">, {"%eax": irt, "%edx": cdRuntime}, {"%esi": rt});
        
        // init class "Class"
        cClass.setRt(rt);
        cClass.setDesc(cdClass);
        
        // init Runtime
        rt.setRt(rt);
        rt.initSysCall(syscall_runtime, syscall_entry);
        
        // create and init class "Runtime"
        Class cRuntime = rt.createInstance(Class:CLASSNAME);
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _bs_return_null // return NULL if class could not be initialized", {"%eax": cRuntime});
        cRuntime.setDesc(cdRuntime);
         
        return rt;
        
        // TODO #4: use pool guard
__pasm__("_bs_return_null:");
        return null;
    }
    
    [] initSysCall(int syscall_runtime, int syscall_entry) {
        this.syscall_runtime = syscall_runtime;
        this.syscall_entry = syscall_entry;
    }
    
    // TODO: replace int with working ClassHeader "struct"
    // TODO: replace cstring with working String class
    [int] getClassDesc(cstring name) {
        int classDesc = 0;
        __pasm__(<"
            pushl 0; pushl %eax; pushl _my_core_Runtime_coi_SysCall_find_class
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": name, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": classDesc});
        return classDesc;
    }
    
    // TODO: replace int with working MemInfo "struct"
    [int] allocate(int size) {
        // TODO: replace int with working MemInfo "struct"
        int info = 0;
        __pasm__(<"
            pushl 0; pushl %eax; pushl _my_core_Runtime_coi_SysCall_allocate
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": size, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": info});
        return info;
    }
    
    // TODO: replace int with working MemInfo "struct"
    [] free(int info) {
        __pasm__(<"
            pushl %eax; pushl 0; pushl _my_core_Runtime_coi_SysCall_free
            pushl %esp; pushl %edi; call %esi
            addl 20, %esp
        ">, {"%eax": info, "%edi": syscall_runtime, "%esi": syscall_entry});
    }
    
    [] printChar(int c, int stream) {
        __pasm__(<"
            pushl %eax; pushl _my_core_Runtime_coi_spk_char; pushl %ebx; pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl %edi; call %esi
            addl 24, %esp
        ">, {"%eax": c, "%ebx": stream, "%edi": syscall_runtime, "%esi": syscall_entry});
    }
    
    [] printString(cstring s, int stream) {
        __pasm__(<"
            pushl %eax; pushl _my_core_Runtime_coi_spk_string; pushl %ebx; pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl %edi; call %esi
            addl 24, %esp
        ">, {"%eax": s, "%ebx": stream, "%edi": syscall_runtime, "%esi": syscall_entry});
    }
    
    [] printInt(int i, int stream) {
        __pasm__(<"
            pushl %eax; pushl _my_core_Runtime_coi_spk_int; pushl %ebx; pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl %edi; call %esi
            addl 24, %esp
        ">, {"%eax": i, "%ebx": stream, "%edi": syscall_runtime, "%esi": syscall_entry});
    }
    
    [] printHex(int i, int stream) {
        __pasm__(<"
            pushl %eax; pushl _my_core_Runtime_coi_spk_hex; pushl %ebx; pushl _my_core_Runtime_coi_SysCall_print
            pushl %esp; pushl %edi; call %esi
            addl 24, %esp
        ">, {"%eax": i, "%ebx": stream, "%edi": syscall_runtime, "%esi": syscall_entry});
    }
    
    // TODO #9: use generic method instead of __any__
    [] destroyInstance(__any__ obj) {
        int info = 0;
        __pasm__(<"
            movl 4(%eax), %eax  // @obj
            movl 4(%eax), %eax  // @obj meminfo
        ">, {"%eax": obj}, {"%eax": info});
        this.free(info);
        return;
    }
    
    // TODO #9: use generic method or special cast syntax instead __all__/__any__
    [__all__] cast(cstring name, __any__ obj) {
        // TODO: replace int with working class header "struct"
        int classDesc = this.getClassDesc(name);
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; jz _crma_return_null   // return NULL if class not exists", {"%eax": classDesc});

        __all__ ret = null;
        __pasm__(<"
            movl 4(%eax), %ebx  // @obj
            movl (%ebx), %eax   // @obj-class desc
            addl _my_core_Runtime_coi_ch_cts(%eax), %eax // @obj-class vtabs entry
        _crma_loop:
            cmpl (%eax), %ecx
            je _crma_found
            addl _my_core_Runtime_coi_cts_size, %eax
            cmpl 0, (%eax)
            je _crma_return_null
            jmp _crma_loop
        _crma_found:
            addl _my_core_Runtime_coi_cts_ho(%eax), %ebx
        ">, {"%eax": obj, "%ecx": classDesc}, {"%ebx": ret});
        return ret;
        
        // TODO #4: use pool guard
__pasm__("_crma_return_null:");
        return null;
    }
    
    [] createAndRunThread(cstring name) {
        __any__ instance = this.createInstance(name);
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _mcrmcart_return     // break if not instantiated", {"%eax": instance});
        Thread thread = this.cast(Thread:CLASSNAME, instance);
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _mcrmcart_cleanup   // destroy instance if not a thread", {"%eax": thread});
        thread.run();
        // TODO #4: use pool guard
__pasm__("_mcrmcart_cleanup:");
        this.destroyInstance(instance);
        // TODO #4: use pool guard
__pasm__("_mcrmcart_return:");
        return;
    }
    
    // TODO #9: use generic method or special new syntax instead __all__
    [__all__] createInstance(cstring name) {
        // TODO: replace int with working class header "struct"
        int classDesc = this.getClassDesc(name);
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _crmci_return_null   // return NULL if class not found", {"%eax": classDesc});
        
        // TODO: replace ints with working class header "struct"
        int instHandle = 0;
        int tplSize = 0;
        __pasm__(<"
            movl _my_core_Runtime_coi_ch_inst_handle(%eax), %ebx
            movl _my_core_Runtime_coi_ch_tpl_size(%eax), %eax
        ">, {"%eax": classDesc}, {"%eax": tplSize, "%ebx": instHandle});
        // if (!instHandle)
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; jnz _crmci_instantiate  // class already initialized", {"%eax": instHandle});
        
        Class cl = this.createInstance(Class:CLASSNAME);
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _crmci_return_null  // return NULL if class could not be initialized", {"%eax": cl});
        cl.setDesc(classDesc);
        // endif
        
        // TODO #4: use pool guard
__pasm__("_crmci_instantiate:");
        // allocate memory for instance
        // TODO: replace int with working MemInfo "struct"
        int instInfo = this.allocate(tplSize);
        // TODO #4: use pool guard
__pasm__("cmpl 0, %eax; je _crmci_return_null  // return NULL on allocate error", {"%eax": instInfo});

        Object oinstance = null;
        __all__ instance = null;
        __pasm__(<"
            movl 8(%ebp), %ebx      // @class-desc "Runtime"
            addl _cr_mo_call_entry, %ebx
            call _crh_instantiate   // %eax: @object-meminfo %ebx: @_call_entry %edx: @class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
        ">, {"%eax": instInfo, "%edx": classDesc}, {"%edi": oinstance, "%esi": instance});
        oinstance.setRt(this);
        return instance;
        
        // TODO #4: use pool guard
__pasm__("_crmci_return_null:");
        return null;
    }
    
    __naked__ [] _crh_instantiate() {
        __pasm__(<"
        _crh_instantiate:       // %eax: @object-meminfo %ebx: @_call_entry %edx: @Class-desc, return %edi: @object (Type Object) %esi: @object (Type <class>)
            movl (%eax), %edi   // @object
            movl %edx, %esi
            addl _my_core_Runtime_coi_ch_tpl(%edx), %esi         // @instance tpl
            movl _my_core_Runtime_coi_ch_tpl_size(%edx), %ecx    // instance size
            .byte 0xf3; .byte 0xa4 #// rep movsb // copy template to object
            
            movl (%eax), %edi   // @object
            movl %edx, (%edi)   // store @class desc in instance 
            movl %eax, 4(%edi)  // store @meminfo in instance
            
            movl %edx, %eax     // @obj-class desc
            addl _my_core_Runtime_coi_ch_cts(%eax), %eax         // @obj-class vtabs entry
        _crhi_loop:
            movl _my_core_Runtime_coi_cts_ho(%eax), %esi
            movl _my_core_Runtime_coi_cts_vto(%eax), %ecx
            movl %ebx, (%edi, %esi)     // store @call-entry in handle
            movl %edi, 4(%edi, %esi)    // store @object in handle
            movl %ecx, 8(%edi, %esi)    // store vtab-offset in handle
            addl _my_core_Runtime_coi_cts_size, %eax
            cmpl 0, (%eax)
            jne _crhi_loop
            
            movl %edi, %esi
            addl _my_core_Runtime_coi_ch_tpl_obj_handle(%edx), %edi // @object (Type Object)
            addl _my_core_Runtime_coi_ch_tpl_cls_handle(%edx), %esi // @object (Type <class>)
            ret
        ">);
    }
    
    __naked__ [] _call_entry() {
        __pasm__(<"
        _cr_mo_call_entry := (_call_entry - _my_core_Runtime)
        _call_entry:
            pushl %ecx
            movl 12(%esp), %ebx // load object handle
            movl 4(%ebx), %ecx	// get object
            movl 0(%ecx), %eax  // get class-desc
            addl 8(%ebx), %eax  // get vtab
            addl 8(%esp), %eax	// get vtab-entry by adding method-offset number
            movl 0(%ecx), %ebx	// get class-desc
            addl 4(%eax), %ebx  // get method-vtabs-entry
            addl _my_core_Runtime_coi_cts_ho(%ebx), %ecx  // compute method-@this
            movl %ecx, 12(%esp) // store method-@this
            movl _my_core_Runtime_coi_cts_cdo(%ebx), %ebx // get method-class-desc
            movl %ebx, 8(%esp)  // store method-class-desc
            movl %ebx, %ecx
            addl _my_core_Runtime_coi_ch_mt(%ecx), %ecx   // get methods-tab
            addl 0(%eax), %ecx  // get method-offset-addr
            addl (%ecx), %ebx   // compute method-addr
            popl %ecx
            jmp %ebx            // goto method
        ">);
    }
    
}
