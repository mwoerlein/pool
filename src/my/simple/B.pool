/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace my::simple;

use my::core::Object;
use my::core::OStream;
use my::core::Runtime;
use my::core::Thread as myThread;

class B extends myThread, my::simple::A {
    
    // methods
    [] run() {
        Runtime rt := this.rt();    // fixed variable
        this.init(7, 20);
        A a := rt.createInstance(A:CLASSNAME);
        a.init(5, 2);
        this.doIt(a);
        rt.destroyInstance(a);
        return;
    }
    
    [] doIt(A a) {
        Runtime rt := this.rt();    // fixed variable
        OStream out := rt.out();
        OStream err := rt.err();
        
        err.printChar('@');
        out.printString("OMG!! ");
        out.printInt(this.equals(this)).printChar(' ').printInt(this.equals(a));
        this.testAllocate(0x1234);
        err.printChar('@').printNewline();
        
        this.testLoop(4);
//        this.testLoop(13);
        this.test(this.getRow());
        a.test(a.getRow());
        return;
    }
    
    [] testLoop(int n) {
        Runtime rt := this.rt();    // fixed variable
        OStream out = rt.out();     // modifiable variable
        int i = n;
        while (i--) {
            int j = n;
            while (j--) {
                if (n>=10) {
                    if (i==j || i+j==n-1) {
                        out = rt.err();
                    } else {
                        out = rt.out();
                    }
                    if (i<10) {
                        out.printChar(' ');
                    }
                } else {
                    if (i<=j) {
                        out = rt.out();
                    } else {
                        out = rt.err();
                    }
                }
                out.printInt(i).printChar(' ').printInt(j);
                if (j) {
                    out.printChar(' ').printChar(' ');
                }
            }
            out.printNewline();
        }
    }
    
    [] testAllocate(int size) {
        Runtime rt := this.rt();    // fixed variable
        // TODO: replace int with working MemInfo "struct"
        int mem := rt.allocate(size);
        rt.out()
            .printChar(' ').printHex(mem)
            .printChar(' ').printHex(0xdead) //.printHex(mem.buffer)
            .printChar(' ').printHex(0xc0de) //.printHex(mem.size)
        ;
        rt.free(mem);
        return;
    }
    
    [int] getRow() {
        return 2*row;
    }
    
}
