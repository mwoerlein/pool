/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace my::simple;

use sys::runtime::Runtime;

class TestCommand extends linux::Command {

    // TODO #7: move to constructor with (implicit) parent calls
    [] configure() {
        this.rt().err().printCString("Hello pool!").print(this).printNewline();
    }

    [int] run() {
        // do fancy stuff
        Runtime rt = this.rt();
        
        rt.err().printCString("Byebye pool!").printNewline();
        return 0;
    }
    
    // methods
    global [int] __entry__(int argc, int argv) {
        // TODO: generate automatically via new __entry__ flag for method or via naming convention? 
        __pasm__(<"
_entry_class_desc   := _my_simple_TestCommand
_entry_global_func  := _491d8eb7_md___entry__
        ">);
        
        TestCommand command = linux::Runtime:buildRuntime().createInstance(TestCommand:CLASSNAME);
        return command.execute(argc, argv);
    }
}
