/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace my::simple;

use sys::runtime::Runtime;

class TestCommand extends linux::Command {

    [] __init() {
        this._initCommand();
    }
    
    [] __destruct() {
        this._destructCommand();
    }
    
    [] configure() {
        this.setName("pooltest")
            .setVersion("0.1.0")
            .setUsage(<"
Pool Test Command.

    Usage:
      pooltest [options] -l <val> [-l <val>]... <arg>...

    Options:
      -h --help                 Show this screen.
      --version                 Show version.
      -d --debug                Set debug.
      -v --verbose              Set verbose.
      --warning                 Set warning.
      --error                   Set error.
      -a <val>                  An optional value.
      -b <val> --blub <val>     Another optional value.
      -l <val> --list <val>     A required option list.
        ">);
        this.registerOptionAlias('h', "help")
            .registerOptionAlias('d', "debug")
            .registerOptionAlias('v', "verbose")
            .registerOptionAlias('b', "blub")
            .registerOptionAlias('l', "list")
            .registerOptionList("list");
        
        this.rt().err().printCString("Hello pool!").print(this).printNewline();
    }

    [int] run() {
        // do fancy stuff
        Runtime rt = this.rt();
        
        rt.out().printCString(name).printChar(' ').printCString(version).printNewline();
        rt.out().printCString(usage).printNewline();
        rt.err().printCString("Byebye pool!").printNewline();
        return 0;
    }
    
    // methods
    global [int] __entry__(int argc, int argv) {
        // TODO: generate automatically via new __entry__ flag for method or via naming convention? 
        __pasm__(<"
_entry_class_desc   := _my_simple_TestCommand
_entry_global_func  := _491d8eb7_md___entry__
        ">);
        
        TestCommand command = linux::Runtime:buildRuntime().createInstance(TestCommand:CLASSNAME);
        return command.execute(argc, argv);
    }
}
