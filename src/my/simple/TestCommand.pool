/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace my::simple;

use sys::core::Object;
use sys::core::OStream;
use sys::runtime::Runtime;

class TestCommand extends Object { //extends linux::CommandLine {

    // TODO #7: move to constructor with (implicit) parent calls
    [] initCommand() {}

    [int] run(int argc, int argv) {
        // this.parse(argc, argv);
        // do fancy stuff
        Runtime rt = this.rt();
        rt.err().printCString("Hello pool!").printNewline();
        
        while (argc--) {
            rt.out().printCString("# ").printCString(this.readArg(argv)).printNewline();
            argv += 4;
        }
        
        rt.err().printCString("Byebye pool!").printNewline();
        return 0;
    }
    
    [cstring] readArg(int argv) {
        cstring arg = "";
        __pasm__("movl (%eax), %eax;", {"%eax": argv}, {"%eax": arg});
        return arg;
    }
    
    // methods
    global [int] __entry__(int argc, int argv) {
        // TODO: generate automatically via new __entry__ flag for method or via naming convention? 
        __pasm__(<"
_entry_class_desc   := _my_simple_TestCommand
_entry_global_func  := _491d8eb7_md___entry__
        ">);
        
        TestCommand command = linux::Runtime:buildRuntime().createInstance(TestCommand:CLASSNAME);
        command.initCommand();
        return command.run(argc, argv);
    }
}
