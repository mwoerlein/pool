/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace my;

use my::core::Thread as myThread;
use my::core::Runtime;
use my::core::Object;

class B extends myThread, my::A {
    
    // methods
    <> run() {
        Runtime rt := this.rt();    // fixed variable
        this.init(7, 20);
        A a := rt.createInstance(A:CLASSNAME);
        a.init(5, 2);
        this.doIt(a);
        rt.destroyInstance(a);
        return;
    }
    
    <> doIt(A a) {
        int out := Runtime:out;    // fixed variable
        Runtime rt := this.rt();    // fixed variable
        rt.printChar('@', Runtime:err);
        rt.printString("OMG!! ", out);
        rt.printInt(this.equals(this), out);
        rt.printChar(' ', out);
        rt.printInt(this.equals(a), out);
        this.testAllocate(0x1234);
        rt.printChar('@', Runtime:err);
        rt.printChar('\n', out);
        this.test(this.getRow());
        a.test(a.getRow());
        return;
    }
    
    <> testAllocate(int size) {
        int out := Runtime:out;     // fixed variable
        Runtime rt := this.rt();    // fixed variable
        // TODO: replace int with working MemInfo "struct"
        int mem := rt.allocate(size);
        rt.printChar(' ', out);
        rt.printHex(mem, out);
        rt.printChar(' ', out);
        rt.printHex(0xdead, out);
//        rt.printHex(mem.buffer, out);
        rt.printChar(' ', out);
        rt.printHex(0xc0de, out);
//        rt.printHex(mem.size, out);
        rt.free(mem);
        return;
    }
    
    <int> getRow() {
        return 2*row;
    }
    
}
