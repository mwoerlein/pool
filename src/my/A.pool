/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace my;

use my::core::Object;
use my::core::Runtime;

class A extends Object {
    
    // constants
    // TODO #3: implicitly clone constants of my::core::Runtime if used
    // streams
    int out := 0;
    int err := 1;
    // TODO: remove after implicit string handling
    cstring test := " Test\n";
    
    // variables
    int column;
    int row;
    
    // methods
    // TODO: move to constructor
    <> init(int column, int row) {
/*
        this.column = column;   // assignment
        this.row = row;         // assignment
*/        
        __pasm__(<"
            movl 12(%ebp), %eax             // @this (Type A)
            movl _my_A_hvo_my_A(%eax), %ebx // inst vars offset (A)
            addl 4(%eax), %ebx              // @this.vars(A)
            
            movl 16(%ebp), %eax             // param row
            movl %eax, _my_A_i_row(%ebx)    // set this.row
            movl 20(%ebp), %eax             // param column
            movl %eax, _my_A_i_column(%ebx) // set this.column
        ">);
    }
    
    <int> getRow() {
/*
        return this.row;
*/
        __pasm__(<"
            movl 12(%ebp), %eax             // @this (Type A)
            movl _my_A_hvo_my_A(%eax), %ebx // inst vars offset (A)
            addl 4(%eax), %ebx              // @this.vars(A)
            
            movl _my_A_i_row(%ebx), %eax    // row
            movl %eax, 16(%ebp)             // return row
        ">);
    }
    
    <int, int> getRowAndColumn() {
/*
        return <this.row, this.column>;
*/
        __pasm__(<"
            movl 12(%ebp), %eax             // @this (Type A)
            movl _my_A_hvo_my_A(%eax), %ebx // inst vars offset (A)
            addl 4(%eax), %ebx              // @this.vars(A)
            
            movl _my_A_i_row(%ebx), %eax    // row
            movl %eax, 20(%ebp)             // return row
            movl _my_A_i_column(%ebx), %eax // column
            movl %eax, 16(%ebp)             // return column
        ">);
    }
    
    <> test(int row) {
/*
        // TODO use Runtime::out, if supported
        int _out := 0;              // fixed variable
        Runtime rt := this.rt();    // fixed variable
        
        Class c = this.getClass();  // modifiable variable
        c = c.getClass();           // assignment
        rt.printString(_out, c.getName());
        
        rt.printChar(_out, ' ');
        rt.printInt(_out, this.column);
        rt.printChar(_out, ' ');
        rt.printInt(_out, row);
        
        <int _row2, int _col2> := this.getRowAndColumn();   // fixed variables
        {
            <int _row, int _col> = this.getRowAndColumn();  // modifiable variables
            rt.printChar(_out, ' ');
            rt.printInt(_out, _row);
            rt.printChar(_out, ' ');
            rt.printInt(_out, _col);
            rt.printString(_out, " Test\n");
        }
*/
        __pasm__(<"
// TODO #3: inline method-indices in method-call-generation
//*/
        _my_core_Class_m_getName := 56
        _my_core_Runtime_m_getClassDesc := 48
        _my_core_Runtime_m_allocate := 56
        _my_core_Runtime_m_free := 64
        _my_core_Runtime_m_printChar := 72
        _my_core_Runtime_m_printString := 80
        _my_core_Runtime_m_printInt := 88
        _my_core_Runtime_m_printHex := 96
        _my_core_Runtime_m_destroyInstance := 104
        _my_core_Runtime_m_cast := 112
        _my_core_Runtime_m_createAndRunThread := 120
        _my_core_Runtime_m_createInstance := 128
//*/
            pushl %ecx
            pushl %edx
            
            movl 12(%ebp), %ecx // @this (Type A)
            
            subl 4, %esp    // return value of rt
            pushl %ecx; pushl _my_A_m_rt; call (%ecx)
        	addl 8, %esp
            popl %edx       // Runtime (Type Runtime)
            
            subl 4, %esp    // return value of getClass
            pushl %ecx; pushl _my_A_m_getClass; call (%ecx)
        	addl 8, %esp
            popl %eax       // Class instance ("A"|"B") (Type Class)
/*
            subl 4, %esp    // return value of getClass
            pushl %eax; pushl _my_core_Class_m_getClass; call (%eax)
        	addl 8, %esp
            popl %eax       // Class instance "Class" (Type Class)
*/
            subl 4, %esp    // return value of getName
            pushl %eax; pushl _my_core_Class_m_getName; call (%eax)
        	addl 8, %esp
            popl %eax       // name cstring ref
            
            pushl %eax; pushl _my_A_coi_out
            pushl %edx; pushl _my_core_Runtime_m_printString; call (%edx)
            addl 16, %esp
            
            pushl 0x20; pushl _my_A_coi_out // ' '
            pushl %edx; pushl _my_core_Runtime_m_printChar; call (%edx)
            addl 16, %esp
            
            movl _my_A_hvo_my_A(%ecx), %ebx     // inst vars offset (A)
            addl 4(%ecx), %ebx                  // @this.vars(A)
            push _my_A_i_column(%ebx); pushl _my_A_coi_out // column
            pushl %edx; pushl _my_core_Runtime_m_printInt; call (%edx)
            addl 16, %esp
            
            pushl 0x20; pushl _my_A_coi_out // ' '
            pushl %edx; pushl _my_core_Runtime_m_printChar; call (%edx)
            addl 16, %esp
            
            pushl 16(%ebp); pushl _my_A_coi_out // param row
            pushl %edx; pushl _my_core_Runtime_m_printInt; call (%edx)
            addl 16, %esp
            
            subl 8, %esp    // return values of getRowAndColumn
            pushl %ecx; pushl _my_A_m_getRowAndColumn; call (%ecx)
        	addl 8, %esp
            
            pushl 0x20; pushl _my_A_coi_out // ' '
            pushl %edx; pushl _my_core_Runtime_m_printChar; call (%edx)
            addl 16, %esp
            
            popl %eax       // column from getRowAndColumn
            pushl %eax; pushl _my_A_coi_out
            pushl %edx; pushl _my_core_Runtime_m_printInt; call (%edx)
            addl 16, %esp
            
            pushl 0x20; pushl _my_A_coi_out // ' '
            pushl %edx; pushl _my_core_Runtime_m_printChar; call (%edx)
            addl 16, %esp
            
            popl %eax       // row from getRowAndColumn
            pushl %eax; pushl _my_A_coi_out
            pushl %edx; pushl _my_core_Runtime_m_printInt; call (%edx)
            addl 16, %esp
            
            movl 8(%ebp), %eax      // @class-desc "A"
            addl _my_A_coso_test, %eax
            pushl %eax; pushl _my_A_coi_err
            pushl %edx; pushl _my_core_Runtime_m_printString; call (%edx)
            addl 16, %esp
            
            popl %edx
            popl %ecx
        ">);
    }
    
}
