/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace my;

use my::core::Object;
use my::core::Runtime;

class A extends Object {
    
    // constants
    int cafe := 0xcafe;
    
    // variables
    int column;
    int row;
    
    // methods
    // TODO #7: move to constructor
    [] init(int row, int column) {
        this.row = row;         // assignment
        this.column = column;   // assignment
        return;
    }
    
    [int] getRow() {
        return row;
    }
    
    [int, int] getRowAndColumn() {
        return [row, column];
    }
    
/*/
    A nullTest;
    [A] testNull(A a) {
        Runtime rt = null;
        Object o := null;
        A a ::= null;
        rt = null;
        nullTest = null;
        a.testNull(null);
        return null;
    }
//*/
/*/
    [] testScope() {
        int c = 0;
        int a = b;
        int b = a;
    }
//*/
/*/
    [int, int] testLogical() {
        int a = 1;
        int b = 1;
        int c = 0;
        
//        if (a > 0) {
//        if (a > 0 && b != 1) {
//        if (a && !b && c || a) {
        if (a && !(b>5) && c<a || a>=0) {
            this.rt().printString(Runtime:newline, Runtime:out);
        }
        if (!(a == b && c != a && c <= a && c<a && b>=a && b>c)) {
        } else {
            (a > c != b < c);
        }
        c = !(a || b);
        !(a || b);
        
        while (c && !(a || b)) {}
        return [c < a, b > c];
    }
//*/
/*/
    [] testArith() {
        A o = this;
        int a = 0;
        int b = -100;
        int c = a++ + --b;
        int d = -a - +b;
        int e = a*b+d/c%b;
        a = o.row;
        a = o.getRow();
        a = -c;
        a = +c;
        a = --c;
        a = ++c;
        a = c--;
        a = c++;
        a = b + c;
        a = b - c;
        a = b * c;
        a = b / c;
        a = b % c;
        a -= b += c *= d /= e %= a;
        a = b + (c = d = e);
    }
//*/
    [] test(int row) {
        int out := Runtime:out;             // fixed variable
        int err := my::core::Runtime:err;   // fixed variable
        Runtime rt := this.rt();            // fixed variable
        my::core::Class c = this.getClass();// modifiable variable
//        c = c.getClass();                   // assignment
//        rt.printString(c.CLASSNAME, out);   // static constant access "my::core::Class"
//        rt.printChar(' ', out);
        rt.printString(c.getName(), out);
        rt.printChar(' ', out);
        rt.printInt(this.column, out);
        rt.printChar(' ', out);
        rt.printInt(row, out);
        rt.printChar(' ', out);
        rt.printHex(cafe, err);
        rt.printChar(' ', out);
        [int _row2, int _col2] := this.getRowAndColumn();   // fixed variables
        {
            [int _row, int _col] = this.getRowAndColumn();  // modifiable variables
            rt.printInt(_row, out);
            rt.printChar(' ', out);
            rt.printInt(_col, out);
        }
        rt.printString(" compile test", err);
        rt.printString(Runtime:newline, Runtime:out);
        return;
    }
    
}
