/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux::fs;

use linux::SysCall;
use sys::core::String;
use sys::stream::SeekableIOStream;
use sys::stream::OStream;

class File extends SeekableIOStream {
    
    int MODE_READ   := 00002; // O_RDWR
    int MODE_WRITE  := 01102; // O_RDWR + O_CREAT + O_TRUNC
    int MODE_APPEND := 02102; // O_RDWR + O_CREAT + O_APPEND
/*        
    int O_ACCMODE  :=     0003;
    int O_RDONLY   :=       00;
    int O_WRONLY   :=       01;
    int O_RDWR     :=       02;
    int O_CREAT    :=     0100;
    int O_EXCL     :=     0200;
    int O_NOCTTY   :=     0400;
    int O_TRUNC    :=    01000;
    int O_APPEND   :=    02000;
*/    
    
    int fd;
    int offset;
    
    [int] _init(cstring filename, int mode, int offset) {
        this.offset = offset;
        fd = SysCall:open(filename, mode);
        if (fd < 0) {
            this.rt().err().printCString("failed to open file: ").printCString(filename).printNewline();
        }
        return fd;
    }
    
    [] __destruct() {
        if (fd >= 0) {
            SysCall:close(fd);
        }
    }
    
    [int] isEmpty() {
        int p = SysCall:seek(fd, 0, SysCall:SEEK_CUR);
        int len = SysCall:seek(fd, 0, SysCall:SEEK_END);
        SysCall:seek(fd, p, SysCall:SEEK_SET);
        return p == len;
    }
    
    [int] length() {
        int p = SysCall:seek(fd, 0, SysCall:SEEK_CUR);
        int len = SysCall:seek(fd, 0, SysCall:SEEK_END);
        SysCall:seek(fd, p, SysCall:SEEK_SET);
        return len - offset;
    }
    
    [int] pos() {
        return SysCall:seek(fd, 0, SysCall:SEEK_CUR) - offset;
    }
    
    [int] peekChar() {
        [int c, int eof] = SysCall:readChar(fd);
        SysCall:seek(fd, -1, SysCall:SEEK_CUR);
        return c;
    }
    
    [int] readChar() {
        [int c, int eof] = SysCall:readChar(fd);
        return c;
    }
    
    [OStream] printChar(int c) {
        SysCall:writeChar(fd, c);
        return this.ostream();
    }
    
    [] seek(int pos) {
        SysCall:seek(fd, pos + offset, SysCall:SEEK_SET);
    }
}
