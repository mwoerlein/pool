/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux::fs;

use pool::storage::Mimetype;
use pool::storage::PoolStorage;
use pool::storage::PropertiesMarshaller;
use sys::core::String;
use sys::core::utils::FullQualifiedNameIterator;
use sys::core::utils::PropertyContainer;
use sys::runtime::ClassDescriptor;
use sys::runtime::ClassDescriptorLoader;
use sys::store::StorageElement;
use sys::stream::OStream;

class Directory extends PoolStorage, ClassDescriptorLoader {

    String baseDir;
    PropertiesMarshaller pm;
    
    [] __init() {
        pm = this.createOwn(PropertiesMarshaller:CLASSNAME);
    }
    
    [Directory] setBaseDir(String dir) {
        baseDir = this.createOwn(String:CLASSNAME);
        baseDir.assignString(dir);
        return this;
    }
    
    //// ClassDescriptorLoader ////
    [ClassDescriptor] loadClassDesc(cstring name) {
        String fullQualifiedName = this.rt().createInstance(String:CLASSNAME);
        fullQualifiedName.assignCString(name);
        StorageElement e = this.getElement(fullQualifiedName, Mimetype:POOL_X86_CLASS);
        fullQualifiedName.destroy();
        
        ClassDescriptor ret = null;
        if (e) {
            // TODO: validate meta.mimetype and pool.class property?
            ret = this.buildClassDescFromIStream(e.getContent(), e.getContentSize());
            e.destroy();
        }
        return ret;
    }

    //// PoolStorage ////
    [StorageElement] getElement(String fullQualifiedName, int mimeType) {
        FileElement fe = this.rt().createInstance(FileElement:CLASSNAME);
        return fe.init(this.buildFilePath(fullQualifiedName, mimeType, false), pm).storageElement();
    }
    
    [OStream] writeElement(String fullQualifiedName, int mimeType, PropertyContainer properties) {
        String filepath = this.buildFilePath(fullQualifiedName, mimeType, true);
        int buf = 0;
        File f = this.rt().createInstance(File:CLASSNAME);
        int r = f._init(filepath.toCString(), File:MODE_WRITE, 0);
        filepath.destroy();
        if (r < 0) {
            f.destroy();
            return null;
        }
        if (properties) { pm.marshall(f.ostream(), properties); }
        return f.ostream();
    }
    
    [int] removeElement(String fullQualifiedName, int mimeType) {
        String filepath = this.buildFilePath(fullQualifiedName, mimeType, false);
        int ret = linux::SysCall:unlink(filepath.toCString());
        filepath.destroy();
        return ret;
    }
    
    //// Directory ////
    [String] buildFilePath(String fullQualifiedName, int mimetype, int createPath) {
        String path = this.rt().createInstance(String:CLASSNAME);
        path.assignString(baseDir);

        {
            FullQualifiedNameIterator parts = this.rt().createInstance(FullQualifiedNameIterator:CLASSNAME);
            parts.init(fullQualifiedName.toIStream());
            while (parts.hasNext()) {
                if (createPath) { linux::SysCall:mkdir(path.toCString()); }
                path.printChar('/').print(parts.next());
            }
            parts.destroy();
        }
        
        if (mimetype == Mimetype:POOL_SRC) { path.printCString(".pool"); }
        else if (mimetype == Mimetype:POOL_ASM) { path.printCString(".pasm"); }
        else if (mimetype == Mimetype:POOL_GRAMMAR) { path.printCString(".gram"); }
        else if (mimetype == Mimetype:POOL_X86_CLASS) { path.printCString(".p86"); }
        
        return path;
    }
}
