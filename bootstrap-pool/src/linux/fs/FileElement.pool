/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux::fs;

use pool::storage::PropertiesMarshaller;
use sys::core::String;
use sys::stream::BufferedIStreamWrapper;
use sys::stream::SeekableIOStream;
use sys::stream::IStream;
use sys::stream::OStream;
use sys::store::StorageElement;
use sys::memory::MemoryInfo;

class FileElement extends StorageElement {
    
    String filename;
    int offset;
    int lineOffset;
    int contentSize;
    
    [FileElement] init(String path, PropertiesMarshaller pm) {
        filename = this.own(path);
        offset = 0;
        lineOffset = 0;
        contentSize = 0;
        
        File file = this.rt().createInstance(File:CLASSNAME);
        
        if (file._init(filename.toCString(), File:MODE_READ, offset) >= 0) {
            if (pm && pm.unmarshall(file.istream(), this.propertyContainer())) {
                offset = file.pos();
                file.seek(0);
                int todo = offset;
                while (todo) {
                    if (file.readChar() == '\n') { lineOffset++; }
                    todo--;
                }
            } else {
                _properties.clear();
            }
            contentSize = file.length() - offset;
        }
        
        file.destroy();
        
        return this;
    }
    
    [IStream] getContent() {
        BufferedIStreamWrapper fileWrapper = this.rt().createInstance(BufferedIStreamWrapper:CLASSNAME);
        File file = fileWrapper.createOwn(File:CLASSNAME);
        
        if (file._init(filename.toCString(), File:MODE_READ, offset) < 0) {
            file.destroy();
            return null;
        }
        
        return fileWrapper.initIStream(file.iostream(), 0x1000);
    }
    
    [int] getContentSize() { return contentSize; }
    [int] getContentOffset() { return offset; }
    [int] getContentLineOffset() { return lineOffset; }
    
}
