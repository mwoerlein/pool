/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux;

use linux::fs::File;
use linux::fs::Directory;

use sys::core::String;
use sys::core::Thread;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMapEntry;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::utils::CommandLine;
use sys::core::utils::CommandLineParser;
use sys::core::utils::CommandLineParserTarget;

use sys::log::Logger;
use sys::log::LoggerAware;
use sys::memory::Address;
use sys::runtime::Runtime;
use sys::store::Store;
use sys::stream::IStream;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

class Command extends Thread, CommandLine {

    cstring name;
    cstring version;
    cstring usage;
    
    cstring _calledCommand;
    AnyList _unparsedArguments;
    
    // methods
    abstract [] configure();
    
    [] __init() { this._initCommand(); }
    [] _initCommand() {
        this._initCommandLine();
        _unparsedArguments = this.createOwn(AnyList:CLASSNAME);
    }
    
    [] __destruct() { this._destructCommand(); }
    [] _destructCommand() {
        this._destructCommandLine();
    }
    
    [int] execute(int argc, int argv) {
        this.configure();
        if (this._parseArgv(argc, argv)) {
            LoggerAware la = this.rt().cast(LoggerAware:CLASSNAME, this);
            if (la) {
                Logger logger = this.createOwn(Logger:CLASSNAME);
                if (this.hasOption("verbose")) { logger.setLevel(Logger:INFO); }
                if (this.hasOption("debug")) { logger.setLevel(Logger:DEBUG); }
                if (this.hasOption("trace")) { logger.setLevel(Logger:TRACE); }
                if (this.hasOption("warning")) { logger.setLevel(Logger:WARNING); }
                if (this.hasOption("error")) { logger.setLevel(Logger:ERROR); }
                if (this.hasOption("critical")) { logger.setLevel(Logger:CRITICAL); }
                la.setLogger(logger);                
            }
            int ret = this.run();
            if (la) { la.getLogger().flush(); }
            return ret;
        }
        return -1;
    }

    // protected
    [Command] setName(cstring name) {
        this.name = name;
        return this;
    }
    
    [Command] setVersion(cstring version) {
        this.version = version;
        return this;
    }
    
    [Command] setUsage(cstring usage) {
        this.usage = usage;
        // TODO: implement usage parsing (see http://docopt.org/)
        return this;
    }
    
    [IStream] openStdIn() {
        StdIn in = this.rt().createInstance(StdIn:CLASSNAME);
        return in.istream();
    }
    
    [SeekableIOStream] openFile(String filename, int mode) {
        return this.openCFile(filename.toCString(), mode);
    }
    
    [SeekableIOStream] openCFile(cstring filename, int mode) {
        File f = this.rt().createInstance(File:CLASSNAME);
        int r = f._init(filename, mode, 0);
        if (r < 0) {
            f.destroy();
            return null;
        }
        return f.iostream();
    }
    
    [Directory] openDirectory(String classpath) {
        Directory d = this.rt().createInstance(Directory:CLASSNAME);
        return d.setBaseDir(classpath);
    }
    
    [Store] openStoreFile(String filename) {
        Store s = this.rt().createOwn(Store:CLASSNAME);
        return s.setContent(this.openFile(this.getValueOption("store"), linux::fs::File:MODE_READ));
    }
    
    // debug
    [OStream] dumpCLToStream(OStream stream) {
        stream.printCString("called command: ").printCString(this._calledCommand).printNewline();
        stream.printCString("options:").printNewline();
        {
            AnyMapEntryIterator it = this._options.entries();
            while (it.hasNext()) {
                AnyMapEntry e = it.next();
                String key = e.getKey();
                String value = e.getValue();
                stream.printChar('-').printChar(' ').print(key);
                if (e.getValue()) {
                    stream.printChar(' ').printChar('=').printChar(' ').print(value);
                }
                stream.printNewline();
            }
            it.destroy();
        }
        {
            AnyMapEntryIterator it = this._listOptions.entries();
            while (it.hasNext()) {
                AnyMapEntry e = it.next();
                String key = e.getKey();
                AnyList list = e.getValue();
                stream.printChar('-').printChar(' ').print(key).printChar(' ').printChar('[');
                AnyIterator lit = list.iterator();
                while (lit.hasNext()) {
                    String value = lit.next();
                    stream.printChar(' ').print(value);
                }
                lit.destroy();
                stream.printChar(' ').printChar(']').printNewline();
            }
            it.destroy();
        }
        stream.printCString("arguments:").printNewline();
        {
            AnyIterator it = this._arguments.iterator();
            while (it.hasNext()) {
                String arg = it.next();
                stream.printChar('-').printChar(' ').print(arg).printNewline();
            }
            it.destroy();
        }
        return stream;
    }
    
    [int] _parseArgs(AnyList args, CommandLineParserTarget target) {
        CommandLineParser p = this.rt().createInstance(CommandLineParser:CLASSNAME);
        AnyIterator ai = args.iterator();
        int ret = p.parse(ai, target);
        ai.destroy();
        p.destroy();
        return ret;
    }
    
    // private
    [int] _parseArgv(int argc, int argv) {
        _calledCommand = Address:loadString(argv);
        
        // convert argv to List<String>
        AnyList args = this.rt().createInstance(AnyList:CLASSNAME);
        AnyList cur = args;
        while (--argc) {
            String arg = this.createOwnStringFromCString(Address:loadString(argv += 4));
            if (arg.cequals("--")) {
                cur = _unparsedArguments;
            } else {
                cur.add(arg);
            }
        }
        
        // parse argument list
        int ret = this._parseArgs(args, this.target());
        args.destroy();
        return ret;
    }
}
