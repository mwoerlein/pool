/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux;

use linux::fs::File;
use linux::fs::Directory;

use sys::core::String;
use sys::core::anycollection::AnyList;
use sys::memory::Address;
use sys::store::Store;
use sys::stream::IStream;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

class Command extends command::AbstractCommand {
    
    cstring _calledCommand;
    AnyList _unparsedArguments;
    
    [] __init() { this._initCommand(); }
    [] _initCommand() {
        this._initAbstractCommand();
        _unparsedArguments = this.createOwn(AnyList:CLASSNAME);
    }
    
    [] __destruct() { this._destructCommand(); }
    [] _destructCommand() {
        this._destructAbstractCommand();
    }
    
    [int] execute(int argc, int argv) {
        this.configure();
        if (!this._parseArgv(argc, argv)) { return -1; }
        return this._runCommand();
    }
    
    [IStream] openStdIn() {
        StdIn in = this.rt().createInstance(StdIn:CLASSNAME);
        return in.istream();
    }
    
    [SeekableIOStream] openFile(String filename, int mode) {
        return this.openCFile(filename.toCString(), mode);
    }
    
    [SeekableIOStream] openCFile(cstring filename, int mode) {
        File f = this.rt().createInstance(File:CLASSNAME);
        int r = f._init(filename, mode, 0);
        if (r < 0) {
            f.destroy();
            return null;
        }
        return f.iostream();
    }
    
    [LinuxScreen] initScreen() {
        LinuxScreen ls = this.createOwn(LinuxScreen:CLASSNAME);
        return ls.init();
    }
    
    [Directory] openDirectory(String classpath) {
        Directory d = this.rt().createInstance(Directory:CLASSNAME);
        return d.setBaseDir(classpath);
    }
    
    [Store] openStoreFile(String filename) {
        Store s = this.rt().createOwn(Store:CLASSNAME);
        return s.setContent(this.openFile(this.getValueOption("store"), linux::fs::File:MODE_READ));
    }
    
    // private
    [int] _parseArgv(int argc, int argv) {
        _calledCommand = Address:loadString(argv);
        
        // convert argv to List<String>
        AnyList args = this.rt().createInstance(AnyList:CLASSNAME);
        AnyList cur = args;
        while (--argc) {
            String arg = this.createOwnStringFromCString(Address:loadString(argv += 4));
            if (arg.cequals("--")) {
                cur = _unparsedArguments;
            } else {
                cur.add(arg);
            }
        }
        
        // parse argument list
        int ret = this._parseArgs(args);
        args.destroy();
        return ret;
    }
}
