/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux;

use sys::memory::Allocator;
use sys::memory::PageAllocator;
use sys::memory::PagedMemoryManager;
use sys::runtime::Runtime as SysRuntime;
use sys::runtime::StaticResolvedClassStorage;
use sys::runtime::DynamicClassStorage;
use sys::stream::OStream;

class Runtime extends sys::runtime::RuntimeBuilder {
    
    // methods
    global [SysRuntime] buildRuntime() {
        return Runtime:_bootstrap(Runtime:CLASSNAME, 0x1000, null);
    }
    
    [SysRuntime] _buildRuntime(__any__ context) {
        SysRuntime bsRt := this.rt();
        LinuxOStream bsLOut := this.rt().createInstance(LinuxOStream:CLASSNAME);
        bsLOut.setForeground(LinuxOStream:BRIGHT_WHITE);
        OStream debug := bsLOut.initOStream(1);
        bsRt.setOut(debug);
        bsRt.setErr(debug);
        Allocator bsAllocator := bsRt.getAllocator();
        
        PageAllocator bsPA := bsRt.createInstanceAs(LinuxPageAllocator:CLASSNAME, PageAllocator:CLASSNAME);
        PagedMemoryManager bsPMM := bsRt.createInstance(PagedMemoryManager:CLASSNAME);
        bsPMM.initFromPageAllocator(bsPA, 10);
        
        bsRt.setAllocator(bsPMM.allocator());
        SysRuntime rt = bsRt.createInstance(SysRuntime:CLASSNAME);
        bsRt.setAllocator(bsAllocator);
        rt.setRt(rt);
        rt.setClassStorage(bsRt.getClassStorage());
        rt.setAllocator(bsPMM.allocator());
        
        DynamicClassStorage dcs = rt.createInstance(DynamicClassStorage:CLASSNAME);
        bsRt.getClassStorage().transferClasses(dcs, null);
        rt.setClassStorage(dcs.classStorage());
        dcs.rebuildClasses();
        
        PageAllocator pa := rt.createInstanceAs(LinuxPageAllocator:CLASSNAME, PageAllocator:CLASSNAME);
        PagedMemoryManager pmm := rt.createInstance(PagedMemoryManager:CLASSNAME);
        pmm.initFromPagedMemoryManager(pa, bsPMM);
        rt.setAllocator(pmm.allocator());

        LinuxOStream ls1 = rt.createInstance(LinuxOStream:CLASSNAME);
        rt.setOut(ls1.initOStream(1));
        LinuxOStream ls2 = rt.createInstance(LinuxOStream:CLASSNAME);
        ls2.setForeground(LinuxOStream:BRIGHT_RED);
        rt.setErr(ls2.initOStream(2));
        
        bsLOut.destroy();
        bsPA.destroy();
        bsPMM.destroy();
        
        return rt;
    }
    
}
