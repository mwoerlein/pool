/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace linux;

use sys::memory::PageAllocator;

class SysCall {
    
    int FD_STDIN  := 0;  /* file descriptor of stdin */
    int FD_STDOUT := 1;  /* file descriptor of stdout */
    int FD_STDERR := 2;  /* file descriptor of stderr */
    
    int SEEK_SET := 0;   /* set file offset to offset */
    int SEEK_CUR := 1;   /* set file offset to current plus offset */
    int SEEK_END := 2;   /* set file offset to EOF plus offset */

    global [int, int] readChar(int fd) {
        int ret = 0;
        int read = 0;
        __pasm__(<"
            subl 4, %esp
            movl %esp, %ecx; int 0x80; xor %ecx, %ecx; movb (%esp), %cl
            addl 4, %esp
        ">, {"%eax": 3, "%ebx": fd, "%edx": 1}, {"%eax": read, "%ecx": ret});
        return [ret, (read == 0)];
    }
    
    global [int, int] readMany(int fd, int buffer, int size) {
        int read = 0;
        __pasm__(
            "int 0x80",
            {"%eax": 3, "%ebx": fd, "%ecx": buffer, "%edx": size},
            {"%eax": read}
        );
        return [read, (read < size)];
    }
    
    global [] writeChar(int fd, int c) {
        __pasm__(<"
            subl 4, %esp
            movb %cl, (%esp); movl %esp, %ecx; int 0x80
            addl 4, %esp
        ">, {"%eax": 4, "%ebx": fd, "%ecx": c, "%edx": 1}, {"%eax": null});
    }
    
    global [int] open(cstring filename, int mode) {
        int fd = 0;
        __pasm__(
            "int 0x80",
            {"%eax": 5, "%ebx": filename, "%ecx": mode, "%edx": 0666},
            {"%eax": fd}
        );
        return fd;
    }
    
    global [] close(int fd) {
        __pasm__("int 0x80", {"%eax": 6, "%ebx": fd}, {"%eax": null});
    }
    
    global [int] unlink(cstring path) {
        int ret = 0;
        __pasm__("int 0x80", {"%eax": 10, "%ebx": path}, {"%eax": ret});
        return ret == 0;
    }
    
    global [int] seek(int fd, int offset, int whence) {
        int _offset = 0;
        __pasm__(
            "int 0x80",
            {"%eax": 19, "%ebx": fd, "%ecx": offset, "%edx": whence}, // lseek
            {"%eax": _offset}
        );
        return _offset;
    }
    
    global [int] getPid() {
        int _pid = 0;
        __pasm__("int 0x80", {"%eax": 20}, {"%eax": _pid});
        return _pid;
    }
    
    global [int] mkdir(cstring path) {
        int ret = 0;
        __pasm__("int 0x80", {"%eax": 39, "%ebx": path, "%ecx": 0777}, {"%eax": ret});
        return ret == 0;
    }
    
    global [int] rmdir(cstring path) {
        int ret = 0;
        __pasm__("int 0x80", {"%eax": 40, "%ebx": path}, {"%eax": ret});
        return ret == 0;
    }
    
    global [int, int] pageAlloc(int pages) {
        int size = pages * PageAllocator:PAGESIZE;
        int start = 0;
        __pasm__(<"
            pushl 0     // offset
            pushl -1    // fd
            pushl 34    // flags
            pushl 3     // prot
            pushl %ebx  // len
            pushl 0     // addr
            movl %esp, %ebx
            int 0x80 
            addl 24, %esp
        ">, {"%eax": 90, "%ebx": size}, {"%eax": start});
        return [start, size];
    }
    
    global [int, int] getTimeOfDay() {
        int ret = 0;
        int sec = 0;
        int usec = 0;
        __pasm__(<"
            subl 8, %esp
            movl %esp, %ebx
            int 0x80
            popl %ecx
            popl %edx
        ">,
        {"%eax": 78, "%ecx": 0}, // gettimeofday
        {"%eax": ret, "%ecx": sec, "%edx": usec}
        );
        if (ret == 0) { return [sec, usec];}
        return [-1, -1];
    }
    
    global [] nanoSleep(int sec, int nano) {
        int timespec = 0;
        int ret = 0;
        __pasm__(<"
            pushl 0
            pushl %ebx
            pushl %eax
            movl %esp, %eax
        ">, {"%eax": sec, "%ebx": nano}, {"%eax":timespec});
        do {
            __pasm__("int 0x80", {"%eax": 162, "%ebx": timespec, "%ecx": timespec}, {"%eax": ret});// nanosleep
        } while (ret != 0);
        // free timespec
        __pasm__("addl 12, %esp");
    }
}
