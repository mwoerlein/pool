/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace command;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyListIterator;
use sys::core::anycollection::AnyMap;
use sys::core::anycollection::AnyMapEntry;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::stream::OStream;

class CommandLine extends CommandLineParserTarget, sys::core::utils::Owner {

    AnyList _arguments;     // LinkedList<String>
    AnyMap _options;        // HashMap<String, String>
    AnyMap _optionAliases;  // HashMap<String, String>
    AnyMap _listOptions;    // HashMap<String, LinkedList<String>>
    
    [] __init() { this._initCommandLine(); }
    [] _initCommandLine() {
        // _initCommandLineParserTarget();
        // _initOwner();
        _arguments = this.createOwn(AnyList:CLASSNAME);
        _options = this.createOwn(AnyMap:CLASSNAME);
        _optionAliases = this.createOwn(AnyMap:CLASSNAME);
        _listOptions = this.createOwn(AnyMap:CLASSNAME);
    }
    
    [] __destruct() { this._destructCommandLine(); }
    [] _destructCommandLine() {
        // _destructOwner();
        // _destructCommandLineParserTarget();
    }

    // TODO: implement usage parsing (see http://docopt.org/)
    [CommandLine] registerOptionAlias(int alias, cstring option) {
        _optionAliases.set(
            this.createOwnStringFromChar(alias),
            this.createOwnStringFromCString(option)
        );
        return this;
    }
    
    // TODO: implement usage parsing (see http://docopt.org/)
    [CommandLine] registerOptionList(cstring option) {
        _listOptions.set(
            this.createOwnStringFromCString(option),
            this.rt().createInstance(AnyList:CLASSNAME)
        );
        return this;
    }
    
    [int] hasOption(cstring option) {
        if (this.hasListOption(option)) { return true; }
        String optionName = this._getOptionNameFromCString(option);
        int ret = this._options.has(optionName);
        optionName.destroy();
        return ret;
    }
    
    [int] hasValueOption(cstring option) {
        if (this.getValueOption(option)) { return true; }
        return false;
    }
    
    [String] getValueOption(cstring option) {
        String optionName = this._getOptionNameFromCString(option);
        String ret = this._options.get(optionName);
        optionName.destroy();
        return ret;
    }
    
    [int] hasListOption(cstring option) {
        return this.getListOptionSize(option) > 0;
    }
    
    [int] getListOptionSize(cstring option) {
        int ret = 0;
        String optionName = this._getOptionNameFromCString(option);
        if (this._listOptions.has(optionName)) {
            AnyList list = this._listOptions.get(optionName);
            ret = list.size();
        }
        optionName.destroy();
        return ret;
    }
    
    [AnyIterator] getListOption(cstring option) {
        AnyIterator ret = null;
        String optionName = this._getOptionNameFromCString(option);
        if (this._listOptions.has(optionName)) {
            AnyList list = this._listOptions.get(optionName);
            ret = list.iterator();
        } else {
            ret = this.rt().createInstanceAs(AnyListIterator:CLASSNAME, AnyIterator:CLASSNAME);
        }
        optionName.destroy();
        return ret;
    }
    
    [int] getArgumentsSize() { return this._arguments.size(); }
    [AnyIterator] getArguments() { return this._arguments.iterator(); }
    [String] getArgument() { return this._arguments.first(); }
    
    [int] pushCLArgument(String arg) {
        String argument = this.createOwnString(arg);
        this._arguments.add(argument);
        return true;
    }
    
    [int] pushCLOption(String opt) {
        String optionName = this._getOwnOptionName(opt);
        if (this._listOptions.has(optionName)) {
            this.rt().err().printCString("list option without value to push").printNewline();
            return false;
        }
        this._options.set(optionName, null);
        return true;
    }
    
    [int] pushCLValueOption(String opt, String val) {
        String optionName = this._getOwnOptionName(opt);
        String value = this.createOwnString(val);
        if (this._listOptions.has(optionName)) {
            AnyList listOption = this._listOptions.get(optionName);
            listOption.add(value);
        } else {
            this._options.set(optionName, value);
        }
        return true;
    }
    
    [String] _getOwnOptionName(String option) {
        if (this._optionAliases.has(option)) {
            return this._optionAliases.get(option);
        }
        return this.createOwnString(option);
    }
    
    [String] _getOptionNameFromCString(cstring option) {
        String optionName = this.createStringFromCString(option);
        if (this._optionAliases.has(optionName)) {
            String alias = this._optionAliases.get(optionName);
            optionName.destroy();
            optionName = this.createString(alias);
        }
        return optionName;
    }
    
    // debug
    [OStream] __dumpCLToStream(OStream stream) {
        stream.printCString("options:").printNewline();
        {
            AnyMapEntryIterator it = this._options.entries();
            while (it.hasNext()) {
                AnyMapEntry e = it.next();
                String key = e.getKey();
                String value = e.getValue();
                stream.printChar('-').printChar(' ').print(key);
                if (e.getValue()) {
                    stream.printChar(' ').printChar('=').printChar(' ').print(value);
                }
                stream.printNewline();
            }
            it.destroy();
        }
        {
            AnyMapEntryIterator it = this._listOptions.entries();
            while (it.hasNext()) {
                AnyMapEntry e = it.next();
                String key = e.getKey();
                AnyList list = e.getValue();
                stream.printChar('-').printChar(' ').print(key).printChar(' ').printChar('[');
                AnyIterator lit = list.iterator();
                while (lit.hasNext()) {
                    String value = lit.next();
                    stream.printChar(' ').print(value);
                }
                lit.destroy();
                stream.printChar(' ').printChar(']').printNewline();
            }
            it.destroy();
        }
        stream.printCString("arguments:").printNewline();
        {
            AnyIterator it = this._arguments.iterator();
            while (it.hasNext()) {
                String arg = it.next();
                stream.printChar('-').printChar(' ').print(arg).printNewline();
            }
            it.destroy();
        }
        return stream;
    }
    
    // TODO: remove with implicit cast
    [CommandLine] commandLine() { return this; }
}
