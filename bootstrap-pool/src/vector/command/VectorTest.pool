/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace vector::command;

use sys::core::String;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

use vector::graphics::Graphic;
use vector::graphics::Builder;
use vector::graphics::builder::Pentagram;
use vector::graphics::builder::PoolLogo;
use vector::graphics::builder::Rangnar;
use vector::svg::Writer;

class VectorTest extends linux::Command {

    [] configure() {
        this.setName("vectortest")
            .setVersion("0.1.0")
            .setUsage(<"
Test for some vector features.

    Usage:
      vectortest [options] -o <file> <builder>

    Options:
      -h --help                     Show this screen.
      --version                     Show version.
      -o <file> --output <file>     Place the output into <file>.
      -d --debug                    Generate debug scaffolding
">);
        this.registerOptionAlias('h', "help")
            .registerOptionAlias('o', "output")
            .registerOptionAlias('d', "debug")
        ;
    }

    [int] run() {
        OStream out = this.rt().out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        if (this.hasOption("version")) {
            out.printCString(name).printChar(' ').printCString(version).printNewline();
            return 0;
        }
        if (!this.hasValueOption("output") || this.getArgumentsSize() != 1) {
            out.printCString(usage).printNewline();
            return -1;
        }
        
        Builder builder = this.getBuilder(this.getArgument());
        if (builder) {
            if (this.hasOption("debug")) { builder.withDebug(); }
            
            Writer svgWriter = this.createOwn(Writer:CLASSNAME);
            SeekableIOStream outfile = this.openFile(this.getValueOption("output"), linux::fs::File:MODE_WRITE);
            Graphic g = builder.buildGraphic(); 
            svgWriter.svgToStream(outfile.ostream(), g);
            g.destroy();
            outfile.destroy();
        }
        return 0;
    }
    
    [Builder] getBuilder(String builderType) {
        if (builderType.cequals("pool")) {
            PoolLogo b = this.createOwn(PoolLogo:CLASSNAME);
            return b.colored().builder();
        }
        if (builderType.cequals("pool-icon")) {
            PoolLogo b = this.createOwn(PoolLogo:CLASSNAME);
            return b.colored().asIcon().builder();
        }
        if (builderType.cequals("pool-light")) {
            PoolLogo b = this.createOwn(PoolLogo:CLASSNAME);
            return b.monoLight().asIcon().builder();
        }
        if (builderType.cequals("pool-dark")) {
            PoolLogo b = this.createOwn(PoolLogo:CLASSNAME);
            return b.monoDark().asIcon().builder();
        }
        
        if (builderType.cequals("pentagram")) {
            Pentagram b = this.createOwn(Pentagram:CLASSNAME);
            return b.builder();
        }
        if (builderType.cequals("pentagram-curved")) {
            Pentagram b = this.createOwn(Pentagram:CLASSNAME);
            return b.curved().builder();
        }
        
        if (builderType.cequals("rangnar")) {
            Rangnar b = this.createOwn(Rangnar:CLASSNAME);
            return b.builder();
        }
        if (builderType.cequals("rangnar-tyr")) {
            Rangnar b = this.createOwn(Rangnar:CLASSNAME);
            return b.withScales().builder();
        }
        if (builderType.cequals("rangnar-gond-mystra")) {
            Rangnar b = this.createOwn(Rangnar:CLASSNAME);
            return b.withGond().withMystra().builder();
        }
        if (builderType.cequals("rangnar-gond-mystra-lathandar")) {
            Rangnar b = this.createOwn(Rangnar:CLASSNAME);
            return b.withGond().withMystra().withLathandar().builder();
        }
        if (builderType.cequals("rangnar-full")) {
            Rangnar b = this.createOwn(Rangnar:CLASSNAME);
            return b.withGond().withMystra().withLathandar().withScales().builder();
        }
        
        return null;
    }
        
}
