/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace vector::graphics::builder;

use sys::core::Flt;
use sys::core::String;

use vector::graphics::Graphic;
use vector::graphics::path::Path;
use vector::graphics::shape::PathShape;

class PoolLogo extends vector::graphics::Builder {

    int outlineWidth;
    int ringRadius;
    int ringWidth;
    int ringShadowScale1;
    int ringShadowScale2;
    int cornerRadius;
    int cornerShadowScale;
    int highlightWidth;
    
    String outlineColor;
    String ringColor;
    String ringShadowColor;
    String ringBackgroundColor;
    String cornerColor;
    String cornerShadowColor;
    String highlightColor;
    
    // Corner Coordinates
    int cx;
    int cy;
    int csx;
    int csy;
    int cor;
    int cir;
    int csr;
    int coa;
    int cia;
    int csa;
    
    // Ring Coordinates
    int rx; 
    int ry;
    int rsx; 
    int rsy;
     
    int r1r; // inner 
    int r2r; // inner + outlineWidth
    int r3r; // inner + 2.5*outlineWidth = inner shadow
    int r4r; // outer - outlineWidth
    int r5r; // outer
    int r6r; // outer + outlineWidth = highlight outer
    int rsr;
    
    int r1a1;
    int r1a2;
    int r2a1;
    int r2a2;
    int r3a1;
    int r3a2;
    int r4a1;
    int r4a2;
    int r5a1;
    int r5a2;
    int r5a3;
    int r5a4;
    int r5a5;
    int r6a1;
    int r6a2;
    
    int r4as1;
    int r4as2;
    
    int rsa1;
    int rsa2;
    int rsa3;
    int rsa4;
    int rsa5;
    
    [] __init() { this._initPoolLogo(); }
    [] _initPoolLogo() {
        this._initSimpleBuilder(400);
        
        outlineWidth = Flt:fromInt(10);
        ringRadius = Flt:fromInt(250);
        ringWidth = Flt:fromInt(115);
        ringShadowScale1 = 0x3fc00000; // 1.5
        ringShadowScale2 = 0x3dae147b; // 0.085
        cornerRadius = Flt:fromInt(100);
        cornerShadowScale = Flt:fromInt(20);
        highlightWidth = Flt:fromInt(60);
        
    }
    
    [PoolLogo] asIcon() {
        if (Flt:compare(viewWidth, Flt:fromInt(16)) > 0) {
            int scale := Flt:div(Flt:fromInt(14), ringRadius);
            shiftX = shiftY = viewWidth = viewHeight = Flt:fromInt(16);
            
            outlineWidth = Flt:mul(outlineWidth, scale);
            ringRadius = Flt:mul(ringRadius, scale);
            ringWidth = Flt:mul(ringWidth, scale);
            cornerRadius = Flt:mul(cornerRadius, scale);
            highlightWidth = Flt:mul(highlightWidth, scale);
        }
        return this;
    }
    
    [PoolLogo] colored() {
        outlineColor = this.createStringFromCString("#6d4120");
        ringColor = this.createStringFromCString("#fc9b4c");
        ringShadowColor = this.createStringFromCString("#f78537");
        ringBackgroundColor = this.createStringFromCString("#fcd4e1");
        cornerColor = this.createStringFromCString("#fcd4ee");
        cornerShadowColor = this.createStringFromCString("#f9c5e9");
        highlightColor = this.createStringFromCString("#ffffff");
        return this;
    }
    
    [PoolLogo] monoLight() {
        outlineColor = highlightColor = null;
        ringColor = ringShadowColor = ringBackgroundColor = null;
        cornerColor = cornerShadowColor = null;
        
        outlineColor = ringColor = this.createStringFromCString("#6c707e");
        return this;
    }
    
    [PoolLogo] monoDark() {
        outlineColor = highlightColor = null;
        ringColor = ringShadowColor = ringBackgroundColor = null;
        cornerColor = cornerShadowColor = null;
        
        outlineColor = ringColor = this.createStringFromCString("#ced0d6");
        return this;
    }
    
    [Graphic] buildGraphic() {
        this._initializeCoordinates();
        
        Graphic logo := this._newGraphic();
        
        Path corner := this._addNewFilledPath(logo, cornerColor);
        Path cornerShadow := this._addNewFilledPath(logo, cornerShadowColor);
        Path ringBackground := this._addNewFilledPath(logo, ringBackgroundColor);
        Path ring := this._addNewFilledPath(logo, ringColor);
        Path ringShadow := this._addNewFilledPath(logo, ringShadowColor);
        Path highlight := this._addNewFilledPath(logo, highlightColor);
        Path outline := this._addNewFilledPath(logo, outlineColor);
        
        this._generatePaths(outline, corner, cornerShadow, highlight, ring, ringShadow, ringBackground);
        
        return logo;
    }
    
    [] _generatePaths(Path outline, Path corner, Path cornerShadow,
            Path highlight, Path ring, Path ringShadow, Path ringBackground) {
        int f0 := Flt:fromInt(0);
        int f45 := Flt:fromInt(45);
        int f90 := Flt:fromInt(90);
        int f135 := Flt:fromInt(135);
        int f180 := Flt:fromInt(180);
        int f225 := Flt:fromInt(225);
        int f270 := Flt:fromInt(270);
        int f315 := Flt:fromInt(315);
    
        int r1a2s := Flt:sub(f45, r1a2);
        int r2a2s := Flt:sub(f45, r2a2);
        int r3a2s := Flt:sub(f45, r3a2);
        int r4a2s := Flt:sub(f45, r4a2);
        int r5a4s := Flt:sub(f45, r5a4);

        // build outer shape
        outline
            .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:sub(f0, r5a4s), Flt:add(f0, r5a4s), false)
            .arcFltTo(Flt:add(shiftX, cx), Flt:add(shiftY, cy), cor, Flt:sub(f45, coa), Flt:add(f45, coa), true)
            .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:sub(f90, r5a4s), Flt:add(f90, r5a4s), true)
            .arcFltTo(Flt:add(shiftX, cx), Flt:sub(shiftY, cy), cor, Flt:sub(f135, coa), Flt:add(f135, coa), true)
            .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:sub(f180, r5a4s), Flt:add(f180, r5a4s), true)
            .arcFltTo(Flt:sub(shiftX, cx), Flt:sub(shiftY, cy), cor, Flt:sub(f225, coa), Flt:add(f225, coa), true)
            .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:sub(f270, r5a4s), Flt:add(f270, r5a4s), true)
            .arcFltTo(Flt:sub(shiftX, cx), Flt:add(shiftY, cy), cor, Flt:sub(f315, coa), Flt:add(f315, coa), true)
            .close();
        
        // cut central ring
        outline
            .circleFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r1r, false)
            .close();
        ringBackground
            .circleFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r1r, false)
            .close();
        
        int curX = cx;
        int curY = cy;
        int curSX = csx;
        int curSY = csy;
        int alpha = 0;
        while (alpha < 360) {
            int curA = Flt:fromInt(alpha + 45);
            int curB = Flt:fromInt(alpha);
            // build corner
            if (cornerColor && cornerColor.equals(outlineColor)) { /* skip corner */  }
            else {
                outline
                    .arcFltTo(Flt:add(shiftX, curX), Flt:add(shiftY, curY), cir, Flt:sub(curA, cia), Flt:add(curA, cia), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:add(curA, r5a4), Flt:add(curA, r5a2), true)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r6r, Flt:add(curA, r6a2), Flt:sub(curA, r6a2), true)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:sub(curA, r5a2), Flt:sub(curA, r5a4), true)
                    .close();
                corner
                    .arcFltTo(Flt:add(shiftX, curX), Flt:add(shiftY, curY), cir, Flt:sub(curA, cia), Flt:add(curA, cia), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:add(curA, r5a4), Flt:add(curA, r5a2), true)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r6r, Flt:add(curA, r6a2), Flt:sub(curA, r6a2), true)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:sub(curA, r5a2), Flt:sub(curA, r5a4), true)
                    .close();
                cornerShadow
                    .arcFltTo(Flt:add(shiftX, curSX), Flt:add(shiftY, curSY), csr, Flt:sub(curA, csa), Flt:add(curA, csa), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:add(curA, r5a3), Flt:add(curA, r5a2), true)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r6r, Flt:add(curA, r6a2), Flt:sub(curA, r6a2), true)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:sub(curA, r5a2), Flt:sub(curA, r5a3), true)
                    .close();
            }
            
            // build highlight 
            if (highlightColor && highlightColor.equals(outlineColor)) { /* skip highlight */ }
            else {
                outline
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:add(curA, r5a1), Flt:sub(curA, r5a1), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r2r, Flt:sub(curA, r2a1), Flt:add(curA, r2a1), true)
                    .close();
                highlight
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r, Flt:add(curA, r5a1), Flt:sub(curA, r5a1), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r2r, Flt:sub(curA, r2a1), Flt:add(curA, r2a1), true)
                    .close();
            }
            
            // build ring
            if (ringColor && ringColor.equals(outlineColor)) { /* skip ring */ }
            else {
                outline
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r4r, Flt:add(curB, r4a2s), Flt:sub(curB, r4a2s), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r2r, Flt:sub(curB, r2a2s), Flt:add(curB, r2a2s), true)
                    .close();
                ring
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r4r, Flt:add(curB, r4a2s), Flt:sub(curB, r4a2s), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r2r, Flt:sub(curB, r2a2s), Flt:add(curB, r2a2s), true)
                    .close();
                ringShadow
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r3r, Flt:add(curB, r3a2s), Flt:sub(curB, r3a2s), false)
                    .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r2r, Flt:sub(curB, r2a2s), Flt:add(curB, r2a2s), true)
                    .close();
            }
            
            int tmp = curY; curY = Flt:neg(curX); curX = tmp;
            int tmpS = curSY; curSY = Flt:neg(curSX); curSX = tmpS;
            alpha += 90;
        }
        
        // add global shadow to ring
        if (ringColor && ringColor.equals(outlineColor)) { /* skip ring */ }
        else {
            ringShadow
                .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r4r, r4as1, Flt:sub(f45, r4a2), false)
                .arcFltTo(Flt:add(shiftX, rsx), Flt:add(shiftY, rsy), rsr, rsa2, rsa1, true)
                .close();
            ringShadow
                .arcFltTo(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r4r, Flt:add(f45, r4a2), Flt:min(r4as2, Flt:sub(f135, r4a2)), false)
                .arcFltTo(Flt:add(shiftX, rsx), Flt:add(shiftY, rsy), rsr, Flt:min(rsa4, rsa5), rsa3, true)
                .close();
        }
    }
    
    [] _addScaffolding(Graphic logo) {
        String bodyColor := scaffoldingColor1;
        String shadowColor := scaffoldingColor2;
    
        // ring
        logo.addFltCircle(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r1r).getStrokeStyle().setColor(bodyColor);
        logo.addFltCircle(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r2r).getStrokeStyle().setColor(bodyColor);
        logo.addFltCircle(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r3r).getStrokeStyle().setColor(shadowColor);
        logo.addFltCircle(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r4r).getStrokeStyle().setColor(bodyColor);
        logo.addFltCircle(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r5r).getStrokeStyle().setColor(bodyColor);
        logo.addFltCircle(Flt:add(shiftX, rx), Flt:add(shiftY, ry), r6r).getStrokeStyle().setColor(bodyColor);
        logo.addFltLine(
            Flt:add(shiftX, r5r), Flt:add(shiftY, r5r),
            Flt:sub(shiftX, r5r), Flt:sub(shiftY, r5r)
        ).getStrokeStyle().setColor(bodyColor);
        logo.addFltLine(
            Flt:add(shiftX, r5r), Flt:sub(shiftY, r5r),
            Flt:sub(shiftX, r5r), Flt:add(shiftY, r5r)
        ).getStrokeStyle().setColor(bodyColor);
        
        // ring shadow
        logo.addFltCircle(Flt:add(shiftX, rsx), Flt:add(shiftY, rsy), rsr).getStrokeStyle().setColor(shadowColor);
        logo.addFltLine(
            Flt:add(shiftX, rx), Flt:add(shiftY, ry),
            Flt:add(shiftX, rsx), Flt:add(shiftY, rsy)
        ).getStrokeStyle().setColor(shadowColor);
        /*
        logo.addFltLine(
            Flt:add(shiftX, Flt:add(rsx, rsr)), Flt:add(shiftY, Flt:add(rsy, rsr)),
            Flt:add(shiftX, Flt:sub(rsx, rsr)), Flt:add(shiftY, Flt:sub(rsy, rsr))
        ).getStrokeStyle().setColor(shadowColor);
        logo.addFltLine(
            Flt:add(shiftX, Flt:add(rsx, rsr)), Flt:add(shiftY, Flt:sub(rsy, rsr)),
            Flt:add(shiftX, Flt:sub(rsx, rsr)), Flt:add(shiftY, Flt:add(rsy, rsr))
        ).getStrokeStyle().setColor(shadowColor);
        //*/
        
        // corner
        int _cx := Flt:add(shiftX, cx);
        int _cy := Flt:add(shiftY, cy);
        logo.addFltCircle(_cx, _cy, cor).getStrokeStyle().setColor(bodyColor);
        logo.addFltCircle(_cx, _cy, cir).getStrokeStyle().setColor(bodyColor);
        logo.addFltLine(
            Flt:add(_cx, cor), Flt:sub(_cy, cor),
            Flt:sub(_cx, cor), Flt:add(_cy, cor)
        ).getStrokeStyle().setColor(bodyColor);
        
        // corner shadow
        int _csx := Flt:add(shiftX, csx);
        int _csy := Flt:add(shiftY, csy);
        logo.addFltCircle(_csx, _csy, csr).getStrokeStyle().setColor(shadowColor);
        logo.addFltLine(
            Flt:add(_csx, csr), Flt:sub(_csy, csr),
            Flt:sub(_csx, csr), Flt:add(_csy, csr)
        ).getStrokeStyle().setColor(shadowColor);
        
        // highlight
        int hd1 = Flt:mul(highlightWidth, Flt:SQRT_TWO_POS);
        int hd2 = Flt:mul(Flt:sub(highlightWidth, outlineWidth), Flt:SQRT_TWO_POS);
        logo.addFltLine(
            Flt:add(shiftX, r5r), Flt:add(shiftY, Flt:sub(r5r, hd1)),
            Flt:add(shiftX, Flt:sub(hd1, r5r)), Flt:sub(shiftY, r5r)
        ).getStrokeStyle().setColor(bodyColor);
        logo.addFltLine(
            Flt:add(shiftX, r5r), Flt:add(shiftY, Flt:sub(r5r, hd2)),
            Flt:add(shiftX, Flt:sub(hd2, r5r)), Flt:sub(shiftY, r5r)
        ).getStrokeStyle().setColor(bodyColor);
        logo.addFltLine(
            Flt:add(shiftX, Flt:sub(r5r, hd1)), Flt:add(shiftY, r5r),
            Flt:sub(shiftX, r5r), Flt:add(shiftY, Flt:sub(hd1, r5r))
        ).getStrokeStyle().setColor(bodyColor);
        logo.addFltLine(
            Flt:add(shiftX, Flt:sub(r5r, hd2)), Flt:add(shiftY, r5r),
            Flt:sub(shiftX, r5r), Flt:add(shiftY, Flt:sub(hd2, r5r))
        ).getStrokeStyle().setColor(bodyColor);
        
    }
    
    [] _initializeCoordinates() {
        rx = ry = Flt:ZERO_POS;
        
        rsy = Flt:neg(Flt:mul(ringShadowScale2, Flt:add(ringRadius, ringWidth)));
        rsx = Flt:mul(Flt:add(Flt:ONE_POS, ringShadowScale1), rsy);
        cx = cy = Flt:sub(ringRadius, cornerRadius);
        csx = csy = Flt:sub(ringRadius, Flt:mul(Flt:add(Flt:ONE_POS, Flt:div(cornerShadowScale, Flt:fromInt(100))), cornerRadius));
         
        r1r = Flt:sub(ringRadius, ringWidth);
        r2r = Flt:add(r1r, outlineWidth);
        r3r = Flt:add(r2r, Flt:mul(ringShadowScale1, outlineWidth));
        r4r = Flt:sub(ringRadius, outlineWidth);
        r5r = ringRadius;
        r6r = Flt:add(ringRadius, outlineWidth);
        rsr = Flt:mul(Flt:add(Flt:ONE_POS, Flt:mul(ringShadowScale1, ringShadowScale2)), ringRadius);
        
        cor = cornerRadius;
        cir = Flt:sub(cornerRadius, outlineWidth);
        csr = Flt:mul(Flt:sub(Flt:ONE_POS, Flt:div(Flt:div(Flt:fromInt(100), cornerShadowScale),Flt:fromInt(100))), cornerRadius);
        
        int hli = Flt:sub(highlightWidth, outlineWidth);
        int hlo = highlightWidth;
        int f45 = Flt:fromInt(45);
        int f90 = Flt:fromInt(90);
        int f180 = Flt:fromInt(180);
        
        r1a1 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r1r, Flt:neg(r1r), hli, r1r, hli, false));
        r2a1 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r2r, Flt:neg(r2r), hli, r2r, hli, false));
        r3a1 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r3r, Flt:neg(r3r), hli, r3r, hli, false));
        r4a1 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r4r, Flt:neg(r4r), hli, r4r, hli, false));
        r5a1 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r5r, Flt:neg(r5r), hli, r5r, hli, false));
        r6a1 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r6r, Flt:neg(r6r), hli, r6r, hli, false));
        
        r1a2 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r1r, Flt:neg(r1r), hlo, r1r, hlo, false));
        r2a2 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r2r, Flt:neg(r2r), hlo, r2r, hlo, false));
        r3a2 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r3r, Flt:neg(r3r), hlo, r3r, hlo, false));
        r4a2 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r4r, Flt:neg(r4r), hlo, r4r, hlo, false));
        r5a2 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r5r, Flt:neg(r5r), hlo, r5r, hlo, false));
        r6a2 = Flt:sub(f90, this.__interAngleCircleLine(rx, ry, r6r, Flt:neg(r6r), hlo, r6r, hlo, false));
        
        int rsBase = Flt:radToDeg(Flt:arctan2(Flt:sub(rx, rsx), Flt:sub(ry, rsy)));
        int r4as = Flt:sub(f180, this.__interAngleCircleCircle(rx, ry, r4r, rsx, rsy, rsr));
        r4as1 = Flt:sub(rsBase, r4as);
        r4as2 = Flt:add(rsBase, r4as);
        r5a3 = this.__interAngleCircleCircle(rx, ry, r5r, csx, csy, csr);
        r5a4 = this.__interAngleCircleCircle(rx, ry, r5r, cx, cy, cir);
        r5a5 = this.__interAngleCircleCircle(rx, ry, r5r, cx, cy, cor);
        
        int rsa = this.__interAngleCircleCircle(rsx, rsy, rsr, rx, ry, r4r);
        int hlo2 = Flt:mul(hlo, Flt:SQRT_TWO_POS);
        rsa1 = Flt:sub(rsBase, rsa);
        rsa2 = this.__interAngleCircleLine(rsx, rsy, rsr, Flt:sub(r5r, hlo2), r5r, Flt:neg(r5r), Flt:sub(hlo2, r5r), false);
        rsa3 = this.__interAngleCircleLine(rsx, rsy, rsr, r5r, Flt:sub(r5r, hlo2), Flt:sub(hlo2, r5r), Flt:neg(r5r), false);
        rsa4 = this.__interAngleCircleLine(rsx, rsy, rsr, r5r, Flt:sub(hlo2, r5r), Flt:sub(hlo2, r5r), r5r, false);
        rsa5 = Flt:add(rsBase, rsa);
        
        cia = Flt:sub(f180, this.__interAngleCircleCircle(cx, cy, cir, rx, ry, r5r));
        coa = Flt:sub(f180, this.__interAngleCircleCircle(cx, cy, cor, rx, ry, r5r));
        csa = Flt:sub(f180, this.__interAngleCircleCircle(csx, csy, csr, rx, ry, r5r));
    }
    
}
