/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace vector::graphics::shape;

use sys::core::Flt;
use sys::core::Float;
use vector::graphics::path::Path;

class Ring extends AbstractShape {
    
    Float x;
    Float y;
    Float outer;
    Float inner;
    
    [Ring] _initFltCircle(int x, int y, int radius) {
        this.x = this.createOwnFloatFromFlt(x);
        this.y = this.createOwnFloatFromFlt(y);
        this.outer = this.createOwnFloatFromFlt(radius);
        this.inner = null;
        // assert outer > 0.0
        return this;
    }
    
    [Ring] _initFltRing(int x, int y, int inner, int outer) {
        this.x = this.createOwnFloatFromFlt(x);
        this.y = this.createOwnFloatFromFlt(y);
        this.outer = this.createOwnFloatFromFlt(outer);
        this.inner = this.createOwnFloatFromFlt(inner);
        // assert outer > inner >= 0.0
        return this;
    }
    
    [Ring] _initCCircle(cstring x, cstring y, cstring radius) {
        this.x = this.createOwnFloatFromCString(x);
        this.y = this.createOwnFloatFromCString(y);
        this.outer = this.createOwnFloatFromCString(radius);
        this.inner = null;
        // assert outer > 0.0
        return this;
    }
    
    [Ring] _initCRing(cstring x, cstring y, cstring outer, cstring inner) {
        this.x = this.createOwnFloatFromCString(x);
        this.y = this.createOwnFloatFromCString(y);
        this.outer = this.createOwnFloatFromCString(outer);
        this.inner = this.createOwnFloatFromCString(inner);
        // assert outer > inner >= 0.0
        return this;
    }
    
    [Float] getX() { return x; }
    [Float] getY() { return y; }
    [Float] getRadius() { return outer; }
    [Float] getOuterRadius() { return outer; }
    [Float] getInnerRadius() { return inner; }
    
    [int] hasInnerRadius() { return inner && (inner.compareFlt(Flt:ZERO_POS) > 0); }
    
    [Path] getPath() {
        Path p = this.createOwn(Path:CLASSNAME);
        p.circleFltTo(x.getFlt(), y.getFlt(), outer.getFlt(), false).close();
        if (this.hasInnerRadius()) {
            p.circleFltTo(x.getFlt(), y.getFlt(), inner.getFlt(), false).close();
        }
        return p;
    }

}
