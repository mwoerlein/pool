/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace vector::graphics;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;

use vector::graphics::path::Path;
use vector::graphics::shape::AskewArc;
use vector::graphics::shape::Ring;
use vector::graphics::shape::PathShape;
use vector::graphics::shape::Rectangle;

class Graphic extends sys::core::Object {

    AnyList _elements;  // List<GraphicElement>
    Rectangle _viewport;
    
    [] __init() { this._initGraphic(); }
    [] _initGraphic() {
        _elements = this.createOwn(AnyList:CLASSNAME);
        _viewport = this.createOwn(Rectangle:CLASSNAME);
        _viewport._initCRectangle("0", "0", "1000", "1000");
    }
    
    [Graphic] setCViewport(cstring x1, cstring y1, cstring x2, cstring y2) {
        _viewport.getX().fromCString(x1);
        _viewport.getY().fromCString(y1);
        _viewport.getWidth().fromCString(x2).subFloat(_viewport.getX());
        _viewport.getHeight().fromCString(y2).subFloat(_viewport.getY());
    }
    [Graphic] setFltViewport(int x1, int y1, int x2, int y2) {
        _viewport.getX().assignFlt(x1);
        _viewport.getY().assignFlt(y1);
        _viewport.getWidth().assignFlt(x2).subFloat(_viewport.getX());
        _viewport.getHeight().assignFlt(y2).subFloat(_viewport.getY());
    }
    [Rectangle] getViewport() { return _viewport; }
    
    [AnyIterator] elements() {
        return _elements.iterator();
    }
    
    [PathShape] addFltLine(int x1, int y1, int x2, int y2) {
        PathShape p = this.createOwn(PathShape:CLASSNAME);
        Path path = p.createOwn(Path:CLASSNAME);
        path.moveFltTo(x1, y1).lineFltTo(x2, y2);
        p._initPathShape(path);
        _elements.add(p.element());
        return p;
    }
    
    [Ring] addFltCircle(int x, int y, int radius) {
        Ring r = this.createOwn(Ring:CLASSNAME);
        r._initFltCircle(x, y, radius);
        _elements.add(r.element());
        return r;
    }

    [Ring] addCCircle(cstring x, cstring y, cstring radius) {
        Ring r = this.createOwn(Ring:CLASSNAME);
        r._initCCircle(x, y, radius);
        _elements.add(r.element());
        return r;
    }
    
    [Ring] addCRing(cstring x, cstring y, cstring outer, cstring inner) {
        Ring r = this.createOwn(Ring:CLASSNAME);
        r._initCRing(x, y, outer, inner);
        _elements.add(r.element());
        return r;
    }
    
    [AskewArc] addCRingArc(cstring x, cstring y, cstring outer, cstring inner, cstring alpha, cstring angle) {
        AskewArc r = this.createOwn(AskewArc:CLASSNAME);
        r._initCRingArc(x, y, outer, inner, alpha, angle);
        _elements.add(r.element());
        return r;
    }
    
    [AskewArc] addCAskewArc(
        cstring xo, cstring yo, cstring ro, cstring alo, cstring ano,
        cstring xi, cstring yi, cstring ri, cstring ali, cstring ani
    ) {
        AskewArc r = this.createOwn(AskewArc:CLASSNAME);
        r._initCAskewArc(
            xo, yo, ro, alo, ano,
            xi, yi, ri, ali, ani
        );
        _elements.add(r.element());
        return r;
    }
    
    [Rectangle] addCSquare(cstring x, cstring y, cstring width) {
        Rectangle r = this.createOwn(Rectangle:CLASSNAME);
        r._initCRectangle(x, y, width, width);
        _elements.add(r.element());
        return r;
    }
    
    [Rectangle] addCRectangle(cstring x, cstring y, cstring width, cstring height) {
        Rectangle r = this.createOwn(Rectangle:CLASSNAME);
        r._initCRectangle(x, y, width, height);
        _elements.add(r.element());
        return r;
    }
    
    [PathShape] addPath(Path path) {
        PathShape p = this.createOwn(PathShape:CLASSNAME);
        p._initPathShape(path);
        _elements.add(p.element());
        return p;
    }
    
    [Path] newPath() { return this.createOwn(Path:CLASSNAME); }

}
