/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace vector::svg;

use sys::core::anycollection::AnyIterator;
use sys::core::Float;
use sys::core::String;
use sys::stream::OStream;

use vector::graphics::Graphic;
use vector::graphics::GraphicElement;
use vector::graphics::path::Path;
use vector::graphics::path::PathElement;
use vector::graphics::shape::AbstractShape;
use vector::graphics::shape::Circle;
use vector::graphics::shape::Rectangle;
use vector::graphics::style::FillStyle;
use vector::graphics::style::StrokeStyle;

use xml::Element;

class Writer extends sys::core::utils::Owner {
    
    [OStream] svgToStream(OStream stream, Graphic graphic) {
        Element xml = this.toXml(graphic);
        xml.printToStream(stream);
        //xml.prettyToStream(stream, 0);
        xml.destroy();
        return stream;
    }
    
    [Element] toXml(Graphic graphic/*, $width = 10., $height = 10., $keepRatio = true*/) {
        Rectangle viewport = graphic.getViewport();
        
        String viewBox = this.rt().createInstance(String:CLASSNAME);
        viewBox.print(viewport.getX()).printChar(' ').print(viewport.getY())
            .printChar(' ').print(viewport.getWidth()).printChar(' ').print(viewport.getHeight());
        
        Element xml = this.newSvg()
            .addCAttributeCString("width", "15cm")
            .addCAttributeCString("height", "15cm")
            .addCAttribute("viewBox", viewBox);
        viewBox.destroy();
            
         // 2. * viewport->getY() + viewport->getHeight();
        int yBase = Float:addFlts(
            Float:addFlts(viewport.getY().getFlt(), viewport.getY().getFlt()),
            viewport.getHeight().getFlt()
        );
        {
            Circle c = null;
            Rectangle r = null;
            AbstractShape s = null;
            AnyIterator it := graphic.elements();
            while (it.hasNext()) {
                GraphicElement e = it.next();
                if (!e.isVisible()) { /* skip invisible elements */ }
                else if (c = e.castTo(Circle:CLASSNAME)) { this.addCircleElement(xml, c, yBase); }
                else if (r = e.castTo(Rectangle:CLASSNAME)) { this.addRectElement(xml, r, yBase); }
                else if (s = e.castTo(AbstractShape:CLASSNAME)) { this.addShapeElement(xml, s, yBase); }
                else { /* skip unsupported elements */ }
            }
            it.destroy();
        }
        return xml;
    }
    
    [Element] newSvg() {
        Element xml = this.rt().createInstance(Element:CLASSNAME);
        xml.setCName("svg")
            .addCAttributeCString("version", "1.1")
            .addCAttributeCString("xmlns", "http://www.w3.org/2000/svg")
            .addCAttributeCString("xmlns:xlink", "http://www.w3.org/1999/xlink");
        return xml;
    }
    
    [Element] addCircleElement(Element xml, Circle c, int yBase) {
        Element child = xml.newChild().setCName("circle")
            .addCAttribute("cx", c.getX())
            .addCAttributeFlt("cy", Float:subFlts(yBase, c.getY().getFlt()))
            .addCAttribute("r", c.getRadius());
        return this.applyShapeStyle(child, c.shape());
    }
    
    [Element] addRectElement(Element xml, Rectangle r, int yBase) {
        Element child = xml.newChild().setCName("rect")
            .addCAttribute("x", r.getX())
            .addCAttributeFlt("y", Float:subFlts(Float:subFlts(yBase, r.getY().getFlt()), r.getHeight().getFlt()))
            .addCAttribute("width", r.getWidth())
            .addCAttribute("height", r.getHeight());
        return this.applyShapeStyle(child, r.shape());
    }
    
    [Element] addShapeElement(Element xml, AbstractShape s, int yBase) {
        Element child = this.addPathElement(xml, s.getPath(), yBase);
        return this.applyShapeStyle(child, s.shape());
    }
    
    [Element] addPathElement(Element xml, Path p, int yBase) {
        String d = this.rt().createInstance(String:CLASSNAME);
        {
            AnyIterator it := p.elements();
            while (it.hasNext()) {
                PathElement e = it.next();
                if (e.isMoveTo()) {
                    d.printChar('M')
                        .printChar(' ').print(e.getX()).printChar(',').printFlt(Float:subFlts(yBase, e.getY().getFlt()));
                } else if (e.isLineTo()) {
                    d.printChar('L')
                        .printChar(' ').print(e.getX()).printChar(',').printFlt(Float:subFlts(yBase, e.getY().getFlt())); 
                } else if (e.isCurveTo()) {
                    d.printChar('C')
                        .printChar(' ').print(e.getCX1()).printChar(',').printFlt(Float:subFlts(yBase, e.getCY1().getFlt()))
                        .printChar(' ').print(e.getCX2()).printChar(',').printFlt(Float:subFlts(yBase, e.getCY2().getFlt()))
                        .printChar(' ').print(e.getX()).printChar(',').printFlt(Float:subFlts(yBase, e.getY().getFlt()));
                } else if (e.isClose()) { d.printChar('Z'); }
                else { /* unknown element */ }
                d.printChar(' ');
            }
            it.destroy();
        }
        Element child = xml.newChild().setCName("path").addCAttribute("d", d);
        d.destroy();
        return child;
    }
    
    [Element] applyShapeStyle(Element e, AbstractShape s) {
        this.addFillStyle(e, s.getFillStyle());
        this.addStrokeStyle(e, s.getStrokeStyle());
        if (s.getOpacity().compareFlt(Float:ONE_POS) < 0) {
            e.addCAttribute("opacity", s.getOpacity());
        }
        return e;
    }
    
    [] addFillStyle(Element e, FillStyle s) {
        if (s.isVisible()) {
            e.addCAttribute("fill", s.getColor());
            e.addCAttribute("fill-opacity", s.getOpacity());
            e.addCAttributeCString("fill-rule", "evenodd");
        } else {
            e.addCAttributeCString("fill", "none");
        }
    }
    
    [] addStrokeStyle(Element e, StrokeStyle s) {
        if (s.isVisible()) {
            e.addCAttribute("stroke", s.getColor());
            e.addCAttribute("stroke-opacity", s.getOpacity());
            e.addCAttribute("stroke-width", s.getWidth());
        } else {
            e.addCAttributeCString("stroke", "none");
        }
    }

}
