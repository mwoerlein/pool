/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::storage;

use sys::core::String;
use sys::core::anycollection::AnyMap;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::utils::PropertyContainer;
use sys::stream::IStream;
use sys::stream::OStream;

class PropertiesMarshaller extends sys::core::Object {

    String block;
    String name;
    String value;
    
    [] __init() {
        block = this.createOwn(String:CLASSNAME);
        name = this.createOwn(String:CLASSNAME);
        value = this.createOwn(String:CLASSNAME);
    }
    
    [int] marshall(OStream out, PropertyContainer container) {
        int c = 0;
        AnyMap groups = this.rt().createInstance(AnyMap:CLASSNAME);
        
        // group properties
        {
            AnyMapEntryIterator it = container.properties();
            while (it.hasNext()) {
                [String key, __any__ value] = it.nextPair();
                {
                    block.clear(); name.clear();
                    IStream in = key.toIStream();
                    while ((c = in.readChar()) && (c != '.')) { block.printChar(c); }
                    while (c = in.readChar()) { name.printChar(c); }
                    in.destroy();
                }
                AnyMap group = groups.get(block);
                if (!group) {
                    String groupsBlock = groups.createOwn(String:CLASSNAME);
                    groupsBlock.assignString(block);
                    groups.set(groupsBlock, group = groups.createOwn(AnyMap:CLASSNAME));
                }
                String groupName = group.createOwn(String:CLASSNAME);
                groupName.assignString(name);
                group.set(groupName, value);
            }
            it.destroy();
        }
        
        // marshall grouped properties
        out.printCString("/*");
        {
            AnyMapEntryIterator git = groups.entries();
            while (git.hasNext()) {
                [String block, AnyMap map] = git.nextPair();
                out.printChar('[').print(block).printChar(']').printNewline();
                {
                    AnyMapEntryIterator it = map.entries();
                    while (it.hasNext()) {
                        [String name, __any__ value] = it.nextPair();
                        out.print(name).printChar(' ').printChar('=').printChar(' ').print(value).printNewline();
                    }
                    it.destroy();
                }
            }
            git.destroy();
        }
        out.printCString("*/").printNewline();
        
        groups.destroy();
        return true;
    }
    
    [int] unmarshall(IStream in, PropertyContainer container) {
        int state = 0;
        int c = 0;
        block.clear(); name.clear(); value.clear();
        
        while (c = in.peekChar()) {
            if (state == 0) {
                if (c != '/') { return false; }
                in.readChar(); c = in.peekChar();
                if (c != '*') { return false; }
                in.readChar(); c = in.peekChar();
                if (c != '[') { return false; }
                in.readChar();
                state = 1;
            } else if (state == 1) {
                if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || (c == '_')) { block.printChar(c); in.readChar(); state = 2; }
                else { return false; }
            } else if (state == 2) {
                if (c == ']') {
                    name.assignString(block);
                    name.printChar('.');
                    value.clear();
                    in.readChar();
                    while ((c = in.peekChar()) && ((c == '\r') || (c == '\n') || (c == '\t') || (c == ' '))) {
                        in.readChar();
                    }
                    state = 3;
                } else if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9')) || (c == '_') || (c == '.')) { block.printChar(c); in.readChar(); }
                else { return false; }
            } else if (state == 3) {
                if (c == '*') {
                    in.readChar(); c = in.peekChar();
                    if (c != '/') { return false; }
                    in.readChar();
                    while ((c = in.peekChar()) && ((c == '\r') || (c == '\n') || (c == '\t') || (c == ' '))) {
                        in.readChar();
                    }
                    return true;
                } else if (c == '[') { in.readChar(); block.clear(); state = 1; }
                else if ((c == ' ') || (c == '\t')) { in.readChar(); }
                else if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || (c == '_')) { name.printChar(c); in.readChar(); state = 4; }
                else { return false; }
            } else if (state == 4) {
                if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9')) || (c == '_') || (c == '.')){ name.printChar(c); in.readChar(); }
                else { state = 5; }
            } else if (state == 5) {
                if ((c == ' ') || (c == '\t')) { in.readChar(); }
                else if (c == '=') { in.readChar(); state = 6; }
                else { return false; }
            } else if (state == 6) {
                if ((c == ' ') || (c == '\t')) { in.readChar(); }
                else if ((c == '\n') || (c == '\r')) { return false; }
                else { value.printChar(c); in.readChar(); state = 7; }
            } else if (state == 7) {
                if ((c == '\n') || (c == '\r')) {
                    container.setStringProperty(name, container.createOwnString(value));
                    name.assignString(block);
                    name.printChar('.');
                    value.clear();
                    while ((c = in.peekChar()) && ((c == '\r') || (c == '\n') || (c == '\t') || (c == ' '))) {
                        in.readChar();
                    }
                    state = 3;
                } else { value.printChar(c); in.readChar(); }
            }
        }
        // unterminated properties
        return false;
    }
   
}
