/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::languageserver;

use pool::languageserver::message::Message;
use pool::languageserver::message::MessageFactory;

use json::parser::Parser as JsonParser;
use json::value::JsonValue;

use sys::core::String;
use sys::memory::MemoryIOStream;
use sys::stream::IStream;
use sys::stream::OStream;

class MessageBus extends sys::core::Object {

    IStream in;
    OStream out;
    OStream debug;
    JsonParser jp;
    MessageFactory mf;

    [] _initMessageBus(MessageFactory mf, IStream in, OStream out, OStream debug) {
        this.in = in;
        this.out = out;
        this.debug = debug;
        this.jp = this.createOwn(JsonParser:CLASSNAME);
        this.mf = mf;
    }
    
    [int] isClientGone() { return in.isDone(); }
    
    // TODO: change to poll and queue (raw/parsed?) message(s) - if available - and return size of queue
    [int] hasMessages() {
        if (!in.isAvailable() || in.isDone()) { return false; }
        return true;
    }
    
    // TODO: change to pull (and parse) raw message from queue
    [Message, JsonValue] getMessage() {
        int contentLength = this._readAndParseHeader();
        if (!contentLength) { return [null, null]; }
        JsonValue raw = null;
        Message message = null;
        
        MemoryIOStream content = this._readContent(contentLength);
        content.rewind();
        raw = jp.parse(content.istream());
        
        content.rewind();
        content.printToStream(debug.printCString("parse content '")).printCString("' to ").print(raw).printNewline();
        if (raw) {
            message = mf.fromJsonObject(raw.asObjectValue()); 
            raw.jsonToStream(debug.printCString("parse json '")).printCString("' to ").print(message).printNewline();
        }
        
        return [message, raw];
    }
    
    [] sendRawMessage(JsonValue message) {
        String tmp = this.rt().createInstance(String:CLASSNAME);
        message.jsonToStream(tmp.ostream());
        out.printCString("Content-Length: ").printInt(tmp.length()).printChar('\r').printChar('\n')
            .printChar('\r').printChar('\n')
            .print(tmp);
        tmp.destroy();
    }
    
    [] sendMessage(Message message) {
        String tmp = this.rt().createInstance(String:CLASSNAME);
        message.jsonToStream(tmp.ostream());
        out.printCString("Content-Length: ").printInt(tmp.length()).printChar('\r').printChar('\n')
            .printChar('\r').printChar('\n')
            .print(tmp);
        tmp.destroy();
    }
    
    [int] _readAndParseHeader() {
        debug.printCString("parse header").printNewline();
        int contentLength = -1;
        
        int state = 1;
        int c = 0;
        String header = this.rt().createInstance(String:CLASSNAME);
        String value = this.rt().createInstance(String:CLASSNAME);
        
        while (state > 0 && c = in.peekChar()) {
            if (state == 1) {
                if (c == '\r') {
                    in.readChar(); c = in.peekChar();
                    if (c != '\n') {
                        debug.printCString("invalid eol").printNewline();
                        state = -1;
                    } else { in.readChar(); state = 0; }
                } else if (c == ':') {
                    debug.printCString("unexpected header start '").printChar(c).printChar('\'').printNewline();
                    state = -1;
                } else {
                    header.clear(); value.clear();
                    header.printChar(c); in.readChar(); state = 2;
                }
            } else if (state == 2) {
                if (c == '\n' || c == '\r') { state = -1; }
                else if (c == ':') {
                    in.readChar();
                    while ((c = in.peekChar()) && (c == ' ')) {
                        in.readChar();
                    }
                    state = 3;
                }
                else { header.printChar(c); in.readChar(); state = 2; }
            } else if (state == 3) {
                if (c == '\r') {
                    in.readChar(); c = in.peekChar();
                    if (c != '\n') {
                        debug.printCString("invalid eol").printNewline();
                        state = -1;
                    } else {
                        in.readChar();
                        debug.printCString("got header: '").print(header).printCString("' with value '").print(value).printChar('\'').printNewline();
                        if (header.cequals("Content-Length")) {
                            contentLength = value.toInt();
                            if (contentLength > 0) {
                                debug.printCString("parse content length: ").printInt(contentLength).printNewline();
                                state = 1;
                            }
                        } else if (header.cequals("Content-Type")) {
                            if (value.cequals("application/vscode-jsonrpc; charset=utf-8")) {
                                state = 1;
                            }
                        }
                        if (state != 1) {
                            debug.printCString("unexpected header").printNewline();                        
                            state = -1;
                        }
                    }
                }
                else { value.printChar(c); in.readChar(); state = 3; }
            }
        }
        
        header.destroy();
        value.destroy();
        
        if (state != 0 || contentLength <= 0) {
            debug.printCString("invalid header block").printNewline();
            return 0;
        }
        return contentLength;
    }
    
    [MemoryIOStream] _readContent(int contentLength) {
        debug.printCString("read content (").printInt(contentLength).printCString(" bytes)").printNewline();
        
        MemoryIOStream content = this.rt().createInstance(MemoryIOStream:CLASSNAME);
        content._init(contentLength);
        in.printNToStream(contentLength, content.ostream());
        return content;
    }
}
