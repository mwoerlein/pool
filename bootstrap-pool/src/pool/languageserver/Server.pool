/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::languageserver;

use pool::languageserver::message::Message;
use pool::languageserver::message::MessageFactory;
use pool::languageserver::message::Response;
use pool::languageserver::message::UnknownMessage;
use pool::languageserver::message::lifecycle::ExitNotification;
use pool::languageserver::message::lifecycle::InitializedNotification;
use pool::languageserver::message::lifecycle::InitializeRequest;
use pool::languageserver::message::lifecycle::InitializeResponse;
use pool::languageserver::message::lifecycle::RegisterCapabilityRequest;
use pool::languageserver::message::lifecycle::RegisterCapabilityResponse;
use pool::languageserver::message::lifecycle::ShutdownRequest;
use pool::languageserver::message::lifecycle::ShutdownResponse;
use pool::languageserver::message::textdocument::DidOpenNotification;
use pool::languageserver::message::textdocument::DidCloseNotification;
use pool::languageserver::message::textdocument::PublishDiagnosticsNotification;
use pool::languageserver::message::window::ShowMessageNotification;

use pool::languageserver::storage::UriAccessStorageWrapper;

use pool::storage::ClassPathStorage;
use pool::storage::PoolStorage;
use sys::store::StorageElement;

use json::value::JsonValue;

use sys::core::String;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyIterator;
use sys::stream::OStream;

class Server extends sys::core::Task {

    MessageBus mb;
    MessageFactory mf;
    OStream debug;
    
    AnyList sourceStorages;
    ClassPathStorage classpath;
    UriAccessStorageWrapper fallbackStorage;

    [] _initServer(MessageBus mb, MessageFactory mf, OStream debug) {
        this.mb = mb;
        this.mf = mf;
        this.debug = debug;
        this.sourceStorages = this.createOwn(AnyList:CLASSNAME);
        this.classpath = this.createOwn(ClassPathStorage:CLASSNAME);
    }
    
    [Server] addSourceStorage(String uri, PoolStorage storage) {
        UriAccessStorageWrapper uasw = this.createOwn(UriAccessStorageWrapper:CLASSNAME);
        sourceStorages.add(uasw.init(uri, storage));
        classpath.add(storage);
        return this;
    }
    
    [Server] setFallbackStorage(String uri, PoolStorage storage) {
        fallbackStorage = this.createOwn(UriAccessStorageWrapper:CLASSNAME);
        fallbackStorage.init(uri, storage);
        return this;
    }
    
    [int] run() {
        int state = -1;
        if (!this.awaitInitialization()) {
            debug.printCString("Initialization failed!").printNewline();
            return -1;
        }
        {
            String id = this.createOwn(String:CLASSNAME);
            id.printInt(4711);
            RegisterCapabilityRequest req3 = mf.createRegisterCapabilityRequest(id);
            mb.sendRequest(req3.request());
        }
        Message message = mb.getMessage();
        state = 0;
        do {
            // TODO: determine and queue jobs from messages/notifications
            while (message) {
                if (message.isClass(DidOpenNotification:CLASSNAME)) {
                    DidOpenNotification not = message.castTo(DidOpenNotification:CLASSNAME);
                    StorageElement sourceElem = null;
                    {
                        AnyIterator it = sourceStorages.iterator();
                        while (!sourceElem && it.hasNext()) {
                            UriAccessStorageWrapper uasw = it.next();
                            sourceElem = uasw.getElementByUri(not.getUri());
                        }
                        it.destroy();
                    }
                    StorageElement fallbackElem = null;
                    if (fallbackStorage) {
                        fallbackElem = fallbackStorage.getElementByUri(not.getUri());
                    }
                    if (sourceElem) {
                        debug.printCString("found URI in sources: ").print(not.getUri())
                        .printCString(" size: ").printInt(sourceElem.getContentSize())
                        .printCString(" offset: ").printInt(sourceElem.getContentOffset())
                        .printCString(" lineOffset: ").printInt(sourceElem.getContentLineOffset())
                        .printNewline();
                    } else if (fallbackElem) {
                        debug.printCString("found URI in fallback: ").print(not.getUri())
                        .printCString(" size: ").printInt(fallbackElem.getContentSize())
                        .printCString(" offset: ").printInt(fallbackElem.getContentOffset())
                        .printCString(" lineOffset: ").printInt(fallbackElem.getContentLineOffset())
                        .printNewline();
                    } else {
                        debug.printCString("show message").printNewline();
                        ShowMessageNotification showMessage = mf.createShowMessageNotification();
                        showMessage.warn().printCString("URI not found: ").print(not.getUri());
                        mb.sendNotification(showMessage.notification());
                        showMessage.destroy();
                    }
                    // TODO: generate real diagnostic for element                    
                    debug.printCString("publish diagnostic").printNewline();
                    PublishDiagnosticsNotification diagnosticNotice = mf.createPublishDiagnosticsNotification()
                        .setUri(not.getUri())
                        .setVersion(not.getVersion());
                    mb.sendNotification(diagnosticNotice.notification());
                    diagnosticNotice.destroy();
                    if (fallbackElem) { fallbackElem.destroy(); }
                    if (sourceElem) { sourceElem.destroy(); }
                } else if (message.isClass(DidCloseNotification:CLASSNAME)) {
                    DidCloseNotification not = message.castTo(DidCloseNotification:CLASSNAME);
                    
                    debug.printCString("show message").printNewline();
                    ShowMessageNotification showMessage = mf.createShowMessageNotification();
                    showMessage.info().printCString("close URI: ").print(not.getUri());
                    mb.sendNotification(showMessage.notification());
                    showMessage.destroy();
                } else if (message.isClass(ShutdownRequest:CLASSNAME)) {
                    ShutdownRequest req = message.castTo(ShutdownRequest:CLASSNAME);
                    state = 3;
                    debug.printCString("acknowledge shutdown").printNewline();
                    ShutdownResponse resp = mf.createShutdownResponse(req);
                    mb.sendResponse(resp.response());
                    resp.destroy();
                } else if (message.isClass(RegisterCapabilityResponse:CLASSNAME)) {
                    debug.printCString("capability registered").printNewline();
                } else if (message.isClass(ExitNotification:CLASSNAME)) {
                    state = 5;
                    debug.printCString("exiting ...");
                } else if (message.isClass(UnknownMessage:CLASSNAME)) {
                    UnknownMessage mes = message.castTo(UnknownMessage:CLASSNAME);
                    debug.printCString("mirror raw message").printNewline();
                    mb.sendRawMessage(mes.getRaw());
                } else {
                    debug.printCString("mirror message").printNewline();
                    mb.sendMessage(message);
                }
                message.destroy();
                
                message = mb.getMessage();
            }
            
            if (mb.isClientGone()) {
                // TODO: queue shutdown job?
                debug.printCString("client gone => exit").printNewline();
                return 0;
            }
            // TODO: do queued job, if available, instead of waiting
            if (state != 5) {
                debug.printCString("Waiting for message...").printNewline();
                message = mb.awaitMessage(60, 0);
            }
        } while (state != 5);
        
        debug.printCString(" now").printNewline();
        return 0;
    }
    
    [int] awaitInitialization() {
        // TODO: detect and handle initialize correctly
        {
            debug.printCString("Waiting for initialize request...").printNewline();
            Message message := mb.awaitMessage(10, 0);
            
            if (message && message.isClass(InitializeRequest:CLASSNAME)) {
                debug.printCString("send initialize response").printNewline();
                // send initialize response
                InitializeRequest initializeRequest := message.castTo(InitializeRequest:CLASSNAME);
                initializeRequest.jsonToStream(debug).printNewline(); 
                InitializeResponse initializeResponse = mf.createInitializeResponse(initializeRequest);
                mb.sendResponse(initializeResponse.response());
                initializeResponse.destroy();
            } else {
                debug.printCString("send init error...").printNewline();
                // send error
                Response errorResponse = mf.createErrorResponse(message, -32600);
                errorResponse.errorMessage().printCString("expecting initialize as first message");
                mb.sendResponse(errorResponse);
                errorResponse.destroy();
            }
            
            if (message) { message.destroy(); }
        }
        
        {
            debug.printCString("Waiting for initialized notification...").printNewline();
            Message message := mb.awaitMessage(10, 0);
            
            if (message && message.isClass(InitializedNotification:CLASSNAME)) {
                debug.printCString("finalize initialization").printNewline();
                // finalize initialization
            } else {
                debug.printCString("send init error...").printNewline();
                // send error
                Response errorResponse = mf.createErrorResponse(message, -32600);
                errorResponse.errorMessage().printCString("expecting initialized as next message");
                mb.sendResponse(errorResponse);
                errorResponse.destroy();
            }
            
            if (message) { message.destroy(); }
        }

        return true;
    }
}
