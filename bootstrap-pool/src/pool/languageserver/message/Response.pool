/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::languageserver::message;

use json::value::ObjectValue;
use json::value::StringValue;
use sys::core::String;
use sys::stream::OStream;

class Response extends Message {

    Request req;
    int errorCode;
    StringValue errorMessage;
    
    [Response] setRequest(Request req) { this.req = req; return this; }
    [Request] getRequest() { return req; }
    [String] getRequestId() {
        if (req) { return req.getRequestId(); }
        return null;
    }
    
    [Response] initErrorFromJson(ObjectValue error) {
        this.errorCode = error.cgetInt("code");
        this.errorMessage = error.cgetStringValue("message");
        // TODO: handle additional "data"
        return this;
    }
    
    [int] isError() { return !!errorMessage; }
    
    [Response] setErrorCode(int code) { this.errorCode = code; return this; }
    
    [OStream] errorMessage() {
        if (!errorMessage) { errorMessage = this.createOwn(StringValue:CLASSNAME); }
        return errorMessage.ostream();
    }

    [Response] initResultFromJson(ObjectValue result) { return this; }
    [OStream] resultJsonToStream(OStream stream) {
        return stream.printCString("null");
    }
    
    [OStream] jsonToStream(OStream stream) {
        stream.printCString("{\"jsonrpc\":\"2.0\"");
        if (req) { req.idJsonToStream(stream.printCString(",\"id\":")); }
        else { stream.printCString(",\"id\":\"unknown\""); }
        if (errorMessage) {
            stream.printCString(",\"error\":{\"code\":").printInt(errorCode);
            errorMessage.jsonToStream(stream.printCString(",\"message\":"));
            stream.printChar('}');
        } else {
            resultJsonToStream(stream.printCString(",\"result\":"));
        }
        return stream.printChar('}');
    }
    
    // TODO: remove with implicit cast
    [Response] response() { return this; }
    [Response] asResponse() { return this; }

}
