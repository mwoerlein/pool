/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::command;

use command::AbstractCommand;
use pool::compiler::parser::Parser;

use sys::core::String;
use sys::core::Task;
use sys::core::anycollection::AnyIterator;

use sys::stream::IStream;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

use sys::runtime::ClassDescriptor;
use sys::runtime::ClassDescriptorLoader;
use sys::runtime::DynamicClassStorage;
use sys::runtime::Class;
use sys::runtime::Runtime;

class PoolRuntime extends linux::Command {

    Parser parser;

    [] __init() {
        this._initCommand();
        parser = this.createOwn(Parser:CLASSNAME);
    }
    
    [] configure() {
        this.setName("poolb")
            .setVersion("0.1.0")
            .setUsage(<"
Pool Bootstrap Runtime.

    Usage:
      poolb [options] (-c <dir> | -s <file>) [(-c <dir> | -s <file>)]... <fqn> [-- <classArg>...]

    Options:
      -h --help                     Show this screen.
      --version                     Show version.
      -c <dir> --classpath <dir>    Search for classes in all of these directories.
      -s <file> --store <file>      Search for classes in the given store.
">);
// TODO: poolb [options] (-c <dir> | -s <file>) [(-c <dir> | -s <file>)]... --class <fqn> [<arg>]...
// or:   poolb [options] (-c <dir> | -s <file>) [(-c <dir> | -s <file>)]... <fqn> [--] [<arg>]...
        this.registerOptionAlias('h', "help")
            .registerOptionAlias('c', "classpath").registerOptionList("classpath")
            .registerOptionAlias('s', "store").registerOptionList("store")
        ;
    }

    [int] run() {
        OStream out = this.rt().out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        if (this.hasOption("version")) {
            out.printCString(name).printChar(' ').printCString(version).printNewline();
            return 0;
        }
        if (this.getArgumentsSize() != 1 || !(this.hasOption("classpath") || this.hasOption("store"))) {
            out.printCString(usage).printNewline();
            return -1;
        }
        
        // TODO: setup dynamic runtime
/*/
        Runtime rt = this.rt();
        DynamicClassStorage dcs = rt.cast(DynamicClassStorage:CLASSNAME, rt.getClassStorage());
        {
            AnyIterator it = this.getListOption("classpath");
            while (it.hasNext()) { dcs.addLoader(this.openDirectory(it.next()).classDescriptorLoader()); }
            it.destroy();
        }
        {
            AnyIterator it = this.getListOption("store");
            while (it.hasNext()) { dcs.addLoader(this.openStoreFile(it.next()).classDescriptorLoader()); }
            it.destroy();
        }

/*/
        Runtime parent = this.rt();
        Runtime rt = parent.createInstance(Runtime:CLASSNAME);
        rt.setAllocator(parent.getAllocator());
        rt.setOut(parent.out());
        rt.setErr(parent.err());
        
        DynamicClassStorage dcs = parent.createInstance(DynamicClassStorage:CLASSNAME);
        {
            AnyIterator it = this.getListOption("classpath");
            while (it.hasNext()) { dcs.addLoader(this.openDirectory(it.next()).classDescriptorLoader()); }
            it.destroy();
        }
        {
            AnyIterator it = this.getListOption("store");
            while (it.hasNext()) { dcs.addLoader(this.openStoreFile(it.next()).classDescriptorLoader()); }
            it.destroy();
        }
        rt.setClassStorage(dcs.classStorage());
        
        Class classClass = rt._createClassClass();
        rt.refreshInstance(rt);
        rt.refreshInstance(rt.out());
        rt.refreshInstance(rt.err());
        rt.refreshInstance(rt.getAllocator());
        rt.refreshInstance(rt.getClassStorage());
//*/
        
        AnyIterator argIt = this.getArguments();
        String classname = argIt.next();
        argIt.destroy();
        
        Task t = rt.createInstanceAs(classname.toCString(), Task:CLASSNAME);
        if (!t) { return -1; }
        
        AbstractCommand c = rt.cast(AbstractCommand:CLASSNAME, t);
        if (c) { return c.executeCommand(_unparsedArguments); }
        return t.run();
    }
}
