/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::command;

use pool::compiler::Compiler;
use pool::storage::Mimetype;

use sys::core::anycollection::AnyIterator;
use sys::stream::OStream;

class PoolCompiler extends sys::log::LoggerAware, linux::Command {
    
    [] configure() {
        this.setName("poolbc")
            .setVersion(Compiler:VERSION)
            .setUsage(<"
Pool Bootstrap Compiler.

    Usage:
      poolbc [options] -o <dir> [-p <dir>] -c <dir> [-c <dir>]... <fqn>...

    Options:
      -h --help                     Show this screen.
      --version                     Show version.
      --trace                       Maximize verbosity.
      -d --debug                    More increased verbosity.
      -v --verbose                  Increase verbosity.
      --warning                     Display warnings and errors, only.
      --error                       Display errors, only.
      --critical                    Display critical errors, only.
      -o <dir> --output <dir>       Place the (pasm) outputs into <dir>.
      -c <dir> --classpath <dir>    Search for classes in all of these directories.
      -p <dir> --prettyprint <dir>  Dump classes into <dir>.
      -r --recursive                Generate output for all required classes.
      -S --asm                      Compile only and generate assemble output. (default)
      -B --binary                   Compile and assemble to generate binary outputs with class module information.
">);
        this.registerOptionAlias('h', "help")
            .registerOptionAlias('d', "debug")
            .registerOptionAlias('v', "verbose")
            .registerOptionAlias('o', "output")
            .registerOptionAlias('p', "prettyprint")
            .registerOptionAlias('c', "classpath").registerOptionList("classpath")
            .registerOptionAlias('r', "recursive")
            .registerOptionAlias('S', "asm")
            .registerOptionAlias('B', "binary")
        ;
    }

    [int] run() {
        OStream out = this.rt().out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        if (this.hasOption("version")) {
            out.printCString(name).printChar(' ').printCString(version).printNewline();
            return 0;
        }
        if (!this.hasValueOption("output") || this.getArgumentsSize() < 1 || this.getListOptionSize("classpath") < 1) {
            out.printCString(usage).printNewline();
            return -1;
        }
        if (this.hasOption("asm") && this.hasOption("binary")) {
            this.rt().err().printCString("Only one of the following options are allowed: -S/--asm, -B/--binary").printNewline();
            out.printCString(usage).printNewline();
            return -1;
        }
        
        // setup compiler
        Compiler compiler = this.createOwn(Compiler:CLASSNAME);
        compiler.initLogger(this.getLogger());
        {
            AnyIterator it = this.getListOption("classpath");
            while (it.hasNext()) { compiler.addClassPath(this.openDirectory(it.next()).poolStorage()); }
            it.destroy();
        }
        compiler.setOutput(this.openDirectory(this.getValueOption("output")).poolStorage());
        if (this.hasOption("prettyprint")) {
            compiler.setPrettyOutput(this.openDirectory(this.getValueOption("prettyprint")).poolStorage());
        }
        if (this.hasOption("binary")) {
            compiler.setOutputMimetype(Mimetype:POOL_X86_CLASS);
        } else {
            compiler.setOutputMimetype(Mimetype:POOL_ASM);
        }
        
        // prepare units
        {
            AnyIterator it = this.getArguments();
            while (!compiler.hasErrors() && it.hasNext()) { compiler.prepare(it.next()); }
            while (it.hasNext()) { compiler.skip(it.next()); }
            it.destroy();
        }
        if (compiler.hasErrors()) { return -1; }

        // compile units
        if (this.hasOption("recursive")) { compiler.compileAll(); } else { compiler.compilePrepared(); }
        if (compiler.hasErrors()) { return -1; }
        
        return 0;
    }
    
    // methods
    __entry__ [int] entry(int argc, int argv) {
        PoolCompiler poolbc = linux::Runtime:buildRuntime().createInstance(PoolCompiler:CLASSNAME);
        return poolbc.execute(argc, argv);
    }
}
