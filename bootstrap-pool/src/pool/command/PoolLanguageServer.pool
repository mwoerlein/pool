/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::command;

use sys::core::String;
use sys::stream::IStream;
use sys::stream::OStream;

class PoolLanguageServer extends linux::Command {

    [] __init() {
        this._initCommand();
    }
    
    [] configure() {
        this.setName("pls")
            .setVersion("0.1.0")
            .setUsage(<"
Pool Language Server.

    Usage:
      pls

    Options:
      -h --help                     Show this screen.
      --version                     Show version.
">);
        this.registerOptionAlias('h', "help")
        ;
    }

    [int] run() {
        OStream out = this.rt().out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        if (this.hasOption("version")) {
            out.printCString(name).printChar(' ').printCString(version).printNewline();
            return 0;
        }
        if (this.getArgumentsSize() != 0) {
            out.printCString(usage).printNewline();
            return -1;
        }
        OStream debug = this.initDebug();
        IStream input = this.openStdIn();
        String message = this.readMessage(input, debug);
        debug.print(message).printNewline();
        if (message) { message.destroy(); }
        
        String initializeResponse = this.rt().createInstance(String:CLASSNAME);
        initializeResponse.printCString("{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"result\":{\"capabilities\":{\"hoverProvider\":false,\"declarationProvider\":false,\"definitionProvider\":false,\"typeDefinitionProvider\":false},\"serverInfo\":{\"name\":\"PoolLanguageServer\",\"version\":\"0.1\"}}}");
        this.sendResponse(out, initializeResponse);
        initializeResponse.destroy();
        
        while (!input.isDone()) {
            String message = this.readMessage(input, debug);
            debug.print(message).printNewline();
            if (message) {
                this.sendResponse(out, message);
                message.destroy();
            }
        }
        debug.printCString("exit").printNewline();
        return 0;
    }
    
    [OStream] initDebug() {
        linux::LinuxOStream ls = this.createOwn(linux::LinuxOStream:CLASSNAME);
        return ls.initOStream(linux::SysCall:FD_STDERR);
    }
    
    [String] readMessage(IStream in, OStream debug) {
        while (!in.isAvailable()) {
            debug.printCString("Waiting for message...").printNewline();
            this.rt().sleep(1,0);
        }
        
        int contentLength = -1;

        int state = 1;
        int c = 0;
        String header = this.rt().createInstance(String:CLASSNAME);
        String value = this.rt().createInstance(String:CLASSNAME);
        
        while (state > 0 && c = in.peekChar()) {
            if (state == 1) {
                if (c == '\r') {
                    in.readChar(); c = in.peekChar();
                    if (c != '\n') {
                        debug.printCString("invalid eol").printNewline();
                        state = -1;
                    } else { in.readChar(); state = 0; }
                } else if (c == ':') {
                    debug.printCString("unexpected header start '").printChar(c).printChar('\'').printNewline();
                    state = -1;
                } else {
                    header.clear(); value.clear();
                    header.printChar(c); in.readChar(); state = 2;
                }
            } else if (state == 2) {
                if (c == '\n' || c == '\r') { state = -1; }
                else if (c == ':') {
                    in.readChar();
                    while ((c = in.peekChar()) && (c == ' ')) {
                        in.readChar();
                    }
                    state = 3;
                }
                else { header.printChar(c); in.readChar(); state = 2; }
            } else if (state == 3) {
                if (c == '\r') {
                    in.readChar(); c = in.peekChar();
                    if (c != '\n') {
                        debug.printCString("invalid eol").printNewline();
                        state = -1;
                    } else {
                        in.readChar();
                        debug.printCString("got header: '").print(header).printCString("' with value '").print(value).printChar('\'').printNewline();
                        if (header.cequals("Content-Length")) {
                            contentLength = value.toInt();
                            if (contentLength > 0) {
                                debug.printCString("parse content length: ").printInt(contentLength).printNewline();
                                state = 1;
                            }
                        } else if (header.cequals("Content-Type")) {
                            if (value.cequals("application/vscode-jsonrpc; charset=utf-8")) {
                                state = 1;
                            }
                        }
                        if (state != 1) {
                            debug.printCString("unexpected header").printNewline();                        
                            state = -1;
                        }
                    }
                }
                else { value.printChar(c); in.readChar(); state = 3; }
            }
        }
        
        header.destroy();
        value.destroy();
        
        if (state == 0 && contentLength > 0) {
            debug.printCString("read message (").printInt(contentLength).printCString(" bytes)").printNewline();
            String message = this.rt().createInstance(String:CLASSNAME);
            while (contentLength > 0 && c = in.readChar()) {
                message.printChar(c);
                contentLength--;
            }
            return message;
        }
        
        return null;
    }
    
    [] sendResponse(OStream out, String response) {
        out.printCString("Content-Length: ").printInt(response.length()).printChar('\r').printChar('\n')
            .printChar('\r').printChar('\n')
            .print(response);
    }
}
