/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::command;

use pool::languageserver::MessageBus;
use pool::languageserver::Server;
use pool::languageserver::message::MessageFactory;
use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::stream::OStream;

class PoolLanguageServer extends linux::Command {

    [] __init() {
        this._initCommand();
    }
    
    [] configure() {
        this.setName("pls")
            .setVersion("0.1.0")
            .setUsage(<"
Pool Language Server.

    Usage:
      pls [-s <uri>]...

    Options:
      -h --help                     Show this screen.
      --version                     Show version.
      -s <uri> --sourceUri <uri>    Search for files in all of these locations.
">);
        this.registerOptionAlias('h', "help")
            .registerOptionAlias('s', "sourceUri").registerOptionList("sourceUri")
        ;
    }

    [int] run() {
        OStream out = this.rt().out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        if (this.hasOption("version")) {
            out.printCString(name).printChar(' ').printCString(version).printNewline();
            return 0;
        }
        if (this.getArgumentsSize() != 0) {
            out.printCString(usage).printNewline();
            return -1;
        }
        Server s = this._createServer();
        int error = false; 
        {
            AnyIterator it = this.getListOption("sourceUri");
            while (it.hasNext()) {
                String uri = it.next();
                if (uri.startsWithCString("file:///")) {
                    s.addSourceStorage(uri, this.openDirectory(uri.subString(7, 0)).poolStorage());
                } else {
                    this.rt().err().printCString("Unsupported source uri: ").print(uri).printNewline();
                    error = true;
                }
            }
            it.destroy();
        }
        if (error) {
            s.destroy();
            return -1;
        }
        
        String fallbackUri = this.createOwn(String:CLASSNAME);
        fallbackUri.assignCString("file://");
        return s.setFallbackStorage(fallbackUri, this.openDirectory(fallbackUri.subString(-1, 0)).poolStorage()).run();
    }
    
    [Server] _createServer() {
        linux::LinuxOStream ls = this.createOwn(linux::LinuxOStream:CLASSNAME);
        OStream debug := ls.initOStream(linux::SysCall:FD_STDERR);
        MessageFactory mf := this.createOwn(MessageFactory:CLASSNAME);
        MessageBus mb := this.createOwn(MessageBus:CLASSNAME);
        mb._initMessageBus(mf, this.openStdIn(), this.rt().out(), debug);
        Server s = this.createOwn(Server:CLASSNAME);
        s._initServer(mb, mf, debug);
        return s;
    }
}
