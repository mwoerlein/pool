/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::command;

use pool::asm::InstructionList;
use pool::asm::Parser;
use pool::asm::CompilationUnit;
use pool::asm::i386::Compiler;
use pool::storage::PropertiesMarshaller;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::utils::PropertyContainer;
use sys::stream::IStream;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

class Pbasm extends linux::Command {

    int ERRNO_OK        := 0;
    int ERRNO_IO        := 1;
    int ERRNO_PARSE     := 2;
    int ERRNO_PREPARE   := 3;
    int ERRNO_COMPILE   := 4;
    int ERRNO_FINALIZE  := 5;
    
    Parser parser;
    Compiler compiler;
    CompilationUnit unit;
    PropertyContainer classProperties;
    int status;

    [] __init() {
        this._initCommand();
        parser = this.createOwn(Parser:CLASSNAME);
        compiler = this.createOwn(Compiler:CLASSNAME);
        unit = this.createOwn(CompilationUnit:CLASSNAME);
        status = ERRNO_OK;
    }
    
    [] configure() {
        this.setName("pbasm")
            .setVersion("0.3.0")
            .setUsage(<"
Pool Bootstrap Assembler.

    Usage:
      pasm [options] -o <file> <file>...

    Options:
      -h --help                 Show this screen.
      --version                 Show version.
      -o <file> --output <file> Place the output into <file>.
      -b --binary               Generate plain binary without module informations.
      -c --class                Generate class module informations.
      -t <org>                  Locates code in the output file at the absolute address given by org.
">);
        this.registerOptionAlias('h', "help")
            .registerOptionAlias('o', "output")
            .registerOptionAlias('b', "binary")
            .registerOptionAlias('c', "class")
        ;
    }

    [int] run() {
        OStream out = this.rt().out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        if (this.hasOption("version")) {
            out.printCString(name).printChar(' ').printCString(version).printNewline();
            return 0;
        }
        if (!this.hasValueOption("output") || this.getArgumentsSize() < 1) {
            out.printCString(usage).printNewline();
            return -1;
        }
        
        int startAddress = 0;
        if (this.hasValueOption("t")) {
            startAddress = this.getValueOption("t").toInt();
        }
        if (this.hasOption("class")) {
            this.classProperties = this.createOwn(PropertyContainer:CLASSNAME);
        }
        
        OStream err = this.rt().err();
        SeekableIOStream outfile = this.openFile(this.getValueOption("output"), linux::fs::File:MODE_WRITE);
        if (!outfile) { status = ERRNO_IO; }
        if (status == ERRNO_OK) {
            this.parse();
            if (unit.flushErrors(err)) { status = ERRNO_PARSE; }
        }
        if (status == ERRNO_OK) {
            compiler.prepare(unit);
            if (unit.flushErrors(err)) { status = ERRNO_PREPARE; }
        }
        if (status == ERRNO_OK) {
            compiler.compile(unit);
            if (unit.flushErrors(err)) { status = ERRNO_COMPILE; }
        }
        if (status == ERRNO_OK) {
            compiler.finalize(unit, startAddress);
            if (unit.flushErrors(err)) { status = ERRNO_FINALIZE; }
        }
        if (status == ERRNO_OK) { this.writeOutput(outfile.ostream()); }
        
        outfile.destroy();
        return status;
    }
    
    [] parse() {
        PropertiesMarshaller pm = null;
        AnyIterator argIt = this.getArguments();
        while (argIt.hasNext()) {
            String name = argIt.next();
            if (name.compareCString("-") == 0) {
                IStream in = this.openStdIn();
                if (classProperties && !pm) {
                    pm = this.createOwn(PropertiesMarshaller:CLASSNAME);
                    pm.unmarshall(in, classProperties);
                }
                parser.parse(in, name, unit);
                in.destroy();
            } else {
                SeekableIOStream f = this.openFile(name, linux::fs::File:MODE_READ);
                if (!f) { status = ERRNO_IO; }
                if (status == ERRNO_OK) {
                    IStream in = f.istream();
                    if (classProperties && !pm) {
                        pm = this.createOwn(PropertiesMarshaller:CLASSNAME);
                        pm.unmarshall(in, classProperties);
                    }
                    parser.parse(in, name, unit);
                    in.destroy();
                }
            }
        }
        argIt.destroy();
    }
    
    [] writeOutput(OStream out) {
        // generate module infos
        if (!this.hasOption("binary")) {
            unit.printHeadersToStream(out, version, classProperties);
        }
        unit.rawToStream(out);
    }
    
    // methods
    __entry__ [int] entry(int argc, int argv) {
        Pbasm pbasm = linux::Runtime:buildRuntime().createInstance(Pbasm:CLASSNAME);
        return pbasm.execute(argc, argv);
    }
}
