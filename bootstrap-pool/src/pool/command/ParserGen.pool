/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::command;

use pool::generator::parser::grammar::Parser as GrammarParser;
use pool::generator::parser::grammar::Grammar;
use pool::storage::PoolStorage;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::stream::IStream;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

class ParserGen extends linux::Command {

    GrammarParser parser;
    
    [] __init() {
        this._initCommand();
        this.parser = this.createOwn(GrammarParser:CLASSNAME);
    }
    
    [] configure() {
        this.setName("parsergen")
            .setVersion("0.1.0")
            .setUsage(<"
Parser Generator.

    Usage:
      parsergen -c <dir> <file>...

    Options:
      -h --help                     Show this screen.
      --version                     Show version.
      -c <dir> --classpath <dir>    TBD
      TODO
">);
        this.registerOptionAlias('h', "help")
            .registerOptionAlias('c', "classpath")
        ;
    }

    [int] run() {
        OStream out = this.rt().out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        if (this.hasOption("version")) {
            out.printCString(name).printChar(' ').printCString(version).printNewline();
            return 0;
        }
        if (!this.hasValueOption("classpath") || this.getArgumentsSize() < 1) {
            out.printCString(usage).printNewline();
            return -1;
        }
        
        PoolStorage storage = this.openDirectory(this.getValueOption("classpath")).poolStorage();
        {
            AnyIterator argIt = this.getArguments();
            while (argIt.hasNext()) {
                String name = argIt.next();
                if (name.compareCString("-") == 0) {
                    IStream in = this.openStdIn();
                    out.printCString("refresh from stdin").printNewline();
                    this.parseAndGenerate(in, name, storage.poolStorage());
                    in.destroy();
                } else {
                    SeekableIOStream f = this.openFile(name, linux::fs::File:MODE_READ);
                    if (f) {
                        out.printCString("generate classes from ").print(name).printNewline();
                        this.parseAndGenerate(f.istream(), name, storage.poolStorage());
                        f.destroy();
                    }
                }
            }
            argIt.destroy();
        }
        storage.destroy();
        return 0;
    }
    
    [] parseAndGenerate(IStream input, String name, PoolStorage storage) {
        Grammar gram = parser.parse(input, name, name);
    
        if (gram) {
            pool::generator::regex::Tokenizer:generateFromGrammar(gram, storage);
            pool::generator::parser::Parser:generateFromGrammar(gram, storage);
            gram.destroy();
        }
    }
}
