/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::token;

class Token extends pool::generator::tokenizer::Token {

    int OTHER := 0;
    int IDENTIFIER := 1;
    int REGISTER := 2;
    int CHAR := 3;
    int STRING := 4;
    int NUMBER := 5;
    int NEWLINE := 6;
    int SPACER := 7;
    int COMMENT := 8;
    int MLCOMMENT := 9;
    int OPERATOR := 10;
    int ASSIGN := 11;
    int OBRACKET := 12;
    int CBRACKET := 13;
    int COLON := 14;
    int SEMICOLON := 15;
    int COMMA := 16;

    [] debugType(sys::stream::OStream stream) {
        if (type == Token:EOI) { stream.printCString("EOI"); }
        else if (type == Token:OTHER) { stream.printCString("OTHER"); }
        else if (type == Token:IDENTIFIER) { stream.printCString("IDENTIFIER"); }
        else if (type == Token:REGISTER) { stream.printCString("REGISTER"); }
        else if (type == Token:CHAR) { stream.printCString("CHAR"); }
        else if (type == Token:STRING) { stream.printCString("STRING"); }
        else if (type == Token:NUMBER) { stream.printCString("NUMBER"); }
        else if (type == Token:NEWLINE) { stream.printCString("NEWLINE"); }
        else if (type == Token:SPACER) { stream.printCString("SPACER"); }
        else if (type == Token:COMMENT) { stream.printCString("COMMENT"); }
        else if (type == Token:MLCOMMENT) { stream.printCString("MLCOMMENT"); }
        else if (type == Token:OPERATOR) { stream.printCString("OPERATOR"); }
        else if (type == Token:ASSIGN) { stream.printCString("ASSIGN"); }
        else if (type == Token:OBRACKET) { stream.printCString("OBRACKET"); }
        else if (type == Token:CBRACKET) { stream.printCString("CBRACKET"); }
        else if (type == Token:COLON) { stream.printCString("COLON"); }
        else if (type == Token:SEMICOLON) { stream.printCString("SEMICOLON"); }
        else if (type == Token:COMMA) { stream.printCString("COMMA"); }
    }
}
