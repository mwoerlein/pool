/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::ast;

use pool::asm::ast::operand::OperandNode;

use sys::core::Object;
use sys::core::String;
use sys::stream::OStream;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyIterator;

class NodeList extends Node {
    
    AnyList nodes;

    [] __init() { this._initNodeList(); }
    [] _initNodeList() {
        nodes = this.rt().createInstance(AnyList:CLASSNAME);
        this._initNode(); 
    }

    [] __destruct() { this._destructNodeList(); }
    [] _destructNodeList() {
        nodes.destroyAll();
        this._destructNode(); 
    }
    
    [LabelNode] addLabel(String l) {
        LabelNode label = this.rt().createInstance(LabelNode:CLASSNAME);
        label.setLabel(l);
        nodes.add(label.node());
        return label;
    }
    
    [LabelNode] addCLabel(cstring l) {
        LabelNode label = this.rt().createInstance(LabelNode:CLASSNAME);
        label.setCLabel(l);
        nodes.add(label.node());
        return label;
    }
    
    [CodeNode] addCode(int mode) {
        CodeNode code = this.rt().createInstance(CodeNode:CLASSNAME);
        code.setMode(mode);
        nodes.add(code.node());
        return code;
    }
    
    [EmptyNode] addEmptyLine() {
        EmptyNode line = this.rt().createInstance(EmptyNode:CLASSNAME);
        nodes.add(line.node());
        return line;
    }
    
    [CommentNode] addComment(String c) {
        CommentNode comment = this.rt().createInstance(CommentNode:CLASSNAME);
        comment.setComment(c);
        nodes.add(comment.node());
        return comment;
    }
    
    [CommentNode] addCComment(cstring c) {
        CommentNode comment = this.rt().createInstance(CommentNode:CLASSNAME);
        comment.setCComment(c);
        nodes.add(comment.node());
        return comment;
    }

    [CommentNode] addMultilineComment(String c) {
        CommentNode comment = this.rt().createInstance(CommentNode:CLASSNAME);
        comment.setComment(c).setMultiline(1);
        nodes.add(comment.node());
        return comment;
    }
    
    [CommentNode] addCMultilineComment(cstring c) {
        CommentNode comment = this.rt().createInstance(CommentNode:CLASSNAME);
        comment.setCComment(c).setMultiline(1);
        nodes.add(comment.node());
        return comment;
    }
    
    [InstructionNode] addCInstruction0(cstring operation) {
        InstructionNode inst = this.rt().createInstance(InstructionNode:CLASSNAME);
        inst.setCOperation(operation);
        nodes.add(inst.node());
        return inst;
    }
    
    [InstructionNode] addCInstruction1(cstring operation, OperandNode o1) {
        InstructionNode inst = this.rt().createInstance(InstructionNode:CLASSNAME);
        inst.setCOperation(operation)
            .setOperand1(o1);
        nodes.add(inst.node());
        return inst;
    }
    
    [InstructionNode] addCInstruction2(cstring operation, OperandNode o1, OperandNode o2) {
        InstructionNode inst = this.rt().createInstance(InstructionNode:CLASSNAME);
        inst.setCOperation(operation)
            .setOperand1(o1)
            .setOperand2(o2);
        nodes.add(inst.node());
        return inst;
    }
    
    [InstructionNode] addCInstruction3(cstring operation, OperandNode o1, OperandNode o2, OperandNode o3) {
        InstructionNode inst = this.rt().createInstance(InstructionNode:CLASSNAME);
        inst.setCOperation(operation)
            .setOperand1(o1)
            .setOperand2(o2)
            .setOperand3(o3);
        nodes.add(inst.node());
        return inst;
    }
    
    [DefinitionNode] addDefinition(String id, OperandNode v) {
        DefinitionNode def = this.rt().createInstance(DefinitionNode:CLASSNAME);
        def.initDefinition(id, v);
        nodes.add(def.node());
        return def;
    }
    
    [DefinitionNode] addCDefinition(cstring id, OperandNode v) {
        DefinitionNode def = this.rt().createInstance(DefinitionNode:CLASSNAME);
        def.initCDefinition(id, v);
        nodes.add(def.node());
        return def;
    }

    [OStream] printToStream(OStream stream) {
        AnyIterator it = nodes.iterator();
        while (it.hasNext()) {
            stream.print(it.next());
        }
        it.destroy();
        return stream;
    }
}
