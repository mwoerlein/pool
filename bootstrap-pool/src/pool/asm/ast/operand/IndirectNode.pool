/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::ast::operand;

use pool::asm::ast::OperandNode;
use sys::core::String;
use sys::stream::OStream;

class IndirectNode extends OperandNode {

    RegisterNode base;
    RegisterNode index;
    OperandNode displacement;
    int scale;

    [] __init() { this._initIndirectNode(); }
    [] _initIndirectNode() {
        scale = 1;
        this._initOperandNode();
    }

    [] __destruct() { this._destructIndirectNode(); }
    [] _destructIndirectNode() {
        if (base) { base.destroy(); }
        if (index) { index.destroy(); }
        if (displacement) { displacement.destroy(); }
        this._destructOperandNode(); 
    }
    
    [IndirectNode] setBase(RegisterNode r) {
        this.base = r;
        return this;
    }
    
    [IndirectNode] setIndex(RegisterNode r) {
        this.index = r;
        return this;
    }
    
    [IndirectNode] setDisplacement(OperandNode v) {
        this.displacement = v;
        return this;
    }
    
    [IndirectNode] setScale(int s) {
        this.scale = s;
        return this;
    }
    
    [OStream] printToStream(OStream stream) {
        if (displacement && !base && !index) {
            // memory indirect
            return stream.printChar('(').print(displacement).printChar(')');
        }
        
        // register indirect
        if (displacement) { stream.print(displacement); }
        stream.printChar('(');
        if (base) { stream.print(base); }
        if (index) {
            stream.printChar(',').print(index);
            if (scale > 1) {
                stream.printChar(',').printInt(scale);
            }
        }
        return stream.printChar(')');
    }

}
