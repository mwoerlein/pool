%namespace  "pool::asm"
%classname  "Parser"
%extends    "BaseParser"
%tokenizer  "Tokenizer"
%ignores SPACER COMMENT MLCOMMENT

--- TOKENS ---
IDENTIFIER  := /[\._a-zA-Z][_a-zA-Z0-9]*/
REGISTER    := /%[a-zA-Z][_a-zA-Z0-9]*/
CHAR        := /'([^\\\n\r']|\\[^\n\r\t])*'/
STRING      := /"([^\\\n\r"]|\\[^\n\r\t])*"/
NUMBER      := /\-?(0[0-7]*|[1-9][0-9]*|0[bB][01]+|0[xX][0-9a-fA-F]+)/
EOL         := /(;|[\n\r]+)/
SPACER      := /[ \t]+/
COMMENT     := /(\/\/|#)[^\n\r]*/
MLCOMMENT   := /\/\*([^\*]*\*+)([^\/\*][^\*]*\*+)*\//
OPERATOR    := /(\+|\-|\*|\/|%|<<|>>|\.)/

--- RULES ---
compilation_unit:                                                   { $$ = unit.getNodeList(); }
compilation_unit: compilation_unit label                            { $$ = this.pushToList($1, $2); }
compilation_unit: compilation_unit definition                       { $$ = this.pushToList($1, $2); }
compilation_unit: compilation_unit instruction                      { $$ = this.pushToList($1, $2); }
compilation_unit: compilation_unit EOL
label           : IDENTIFIER ':'                                    { $$ = this.createLabel($1).node(); }
instruction     : IDENTIFIER EOL                                    { $$ = this.createInstruction($1).node(); }
instruction     : IDENTIFIER operand EOL                            { $$ = this.createInstruction($1).setOperand1($2).node(); }
instruction     : IDENTIFIER operand ',' operand EOL                { $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).node(); }
instruction     : IDENTIFIER operand ',' operand ',' operand EOL    { $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).setOperand3($6).node(); }
definition      : IDENTIFIER ':=' operand EOL                       { $$ = this.createDefinition($1, $3).node(); }
operand         : IDENTIFIER                                        { $$ = this.createIdentifier($1).operand(); }
operand         : REGISTER                                          { $$ = this.createRegister($1).operand(); }
operand         : NUMBER                                            { $$ = this.createNumber($1).operand(); }
operand         : CHAR                                              { $$ = this.createChar($1).operand(); }
operand         : STRING                                            { $$ = this.createString($1).operand(); }
operand         : indirect
operand         : formula
indirect        : '(' operand ')'                                   { $$ = this.createIndirect().setBase($2).operand(); }
indirect        : '(' operand ',' operand ')'                       { $$ = this.createIndirect().setBase($2).setIndex($4).operand(); }
indirect        : '(' operand ',' operand ',' NUMBER ')'            { $$ = this.createIndirect().setBase($2).setIndex($4).setScale(this.toInt($6)).operand(); }
indirect        : '(' ',' operand ')'                               { $$ = this.createIndirect().setIndex($3).operand(); }
indirect        : '(' ',' operand ',' NUMBER ')'                    { $$ = this.createIndirect().setIndex($3).setScale(this.toInt($5)).operand(); }
indirect        : operand '(' operand ')'                           { $$ = this.createIndirect().setDisplacement($1).setBase($3).operand(); }
indirect        : operand '(' operand ',' operand ')'               { $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).operand(); }
indirect        : operand '(' operand ',' operand ',' NUMBER ')'    { $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).setScale(this.toInt($7)).operand(); }
indirect        : operand '(' ',' operand ')'                       { $$ = this.createIndirect().setDisplacement($1).setIndex($4).operand(); }
indirect        : operand '(' ',' operand ',' NUMBER ')'            { $$ = this.createIndirect().setDisplacement($1).setIndex($4).setScale(this.toInt($6)).operand(); }
formula         : '(' operand OPERATOR operand ')'                  { $$ = this.createFormula($2, $3, $4).operand(); }
