%namespace  "pool::asm"
%classname  "Parser"
%extends    "BaseParser"
%tokenizer  "Tokenizer"
%ignores SPACER
%ignores COMMENT
%ignores MLCOMMENT

IDENTIFIER  := /[\._a-zA-Z][_a-zA-Z0-9]*/
REGISTER    := /%[a-zA-Z][_a-zA-Z0-9]*/
CHAR        := /'([^\\\n\r']|\\[^\n\r\t])*'/
STRING      := /"([^\\\n\r"]|\\[^\n\r\t])*"/
NUMBER      := /\-?(0[0-7]*|[1-9][0-9]*|0[bB][01]+|0[xX][0-9a-fA-F]+)/
NEWLINE     := /[\n\r]+/
SPACER      := /[ \t]+/
COMMENT     := /(\/\/|#)[^\n\r]*/
MLCOMMENT   := /\/\*([^\*]*\*+)([^\/\*][^\*]*\*+)*\//
OPERATOR    := /(\+|\-|\*|\/|%|<<|>>|\.)/
ASSIGN      := /:=/
COLON       := /:/
OBRACKET    := /\(/
CBRACKET    := /\)/
SEMICOLON   := /;/
COMMA       := /,/

compilation_unit:                                                              { $$ = unit.getNodeList(); }
compilation_unit: compilation_unit label                                       { $$ = this.pushToList($1, $2); }
compilation_unit: compilation_unit definition                                  { $$ = this.pushToList($1, $2); }
compilation_unit: compilation_unit instruction                                 { $$ = this.pushToList($1, $2); }
compilation_unit: compilation_unit eol
label           : IDENTIFIER COLON                                             { $$ = this.createLabel($1).node(); }
instruction     : IDENTIFIER eol                                               { $$ = this.createInstruction($1).node(); }
instruction     : IDENTIFIER operand eol                                       { $$ = this.createInstruction($1).setOperand1($2).node(); }
instruction     : IDENTIFIER operand COMMA operand eol                         { $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).node(); }
instruction     : IDENTIFIER operand COMMA operand COMMA operand eol           { $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).setOperand3($6).node(); }
definition      : IDENTIFIER ASSIGN operand eol                                { $$ = this.createDefinition($1, $3).node(); }
eol             : SEMICOLON
eol             : NEWLINE
operand         : IDENTIFIER                                                   { $$ = this.createIdentifier($1).operand(); }
operand         : REGISTER                                                     { $$ = this.createRegister($1).operand(); }
operand         : NUMBER                                                       { $$ = this.createNumber($1).operand(); }
operand         : CHAR                                                         { $$ = this.createChar($1).operand(); }
operand         : STRING                                                       { $$ = this.createString($1).operand(); }
operand         : indirect
operand         : formula
indirect        : OBRACKET operand CBRACKET                                    { $$ = this.createIndirect().setBase($2).operand(); }
indirect        : OBRACKET operand COMMA operand CBRACKET                      { $$ = this.createIndirect().setBase($2).setIndex($4).operand(); }
indirect        : OBRACKET operand COMMA operand COMMA NUMBER CBRACKET         { $$ = this.createIndirect().setBase($2).setIndex($4).setScale(this.toInt($6)).operand(); }
indirect        : OBRACKET COMMA operand CBRACKET                              { $$ = this.createIndirect().setIndex($3).operand(); }
indirect        : OBRACKET COMMA operand COMMA NUMBER CBRACKET                 { $$ = this.createIndirect().setIndex($3).setScale(this.toInt($5)).operand(); }
indirect        : operand OBRACKET operand CBRACKET                            { $$ = this.createIndirect().setDisplacement($1).setBase($3).operand(); }
indirect        : operand OBRACKET operand COMMA operand CBRACKET              { $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).operand(); }
indirect        : operand OBRACKET operand COMMA operand COMMA NUMBER CBRACKET { $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).setScale(this.toInt($7)).operand(); }
indirect        : operand OBRACKET COMMA operand CBRACKET                      { $$ = this.createIndirect().setDisplacement($1).setIndex($4).operand(); }
indirect        : operand OBRACKET COMMA operand COMMA NUMBER CBRACKET         { $$ = this.createIndirect().setDisplacement($1).setIndex($4).setScale(this.toInt($6)).operand(); }
formula         : OBRACKET operand OPERATOR operand CBRACKET                   { $$ = this.createFormula($2, $3, $4).operand(); }
