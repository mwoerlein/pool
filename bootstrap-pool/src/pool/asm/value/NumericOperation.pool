/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::value;

use pool::asm::CompilationUnit;
use pool::asm::Value;

use pool::asm::ast::operand::FormulaNode;

use sys::core::utils::Bitset;

class NumericOperation extends NumericValue {

    int ADD := 1;
    int SUB := 2;
    int MUL := 3;
    int DIV := 4;
    int MOD := 5;
    int SHR := 6;
    int SHL := 7;
    
    FormulaNode node;
    Value o1;
    Value o2;
    int operation;
    
    [NumericOperation] init(FormulaNode node, Value o1, int operation, Value o2) {
        this.node = node;
        this.o1 = o1;
        this.o2 = o2;
        this.operation = operation;
    }

    [int] validate(CompilationUnit unit) {
        int valid = true;
        if (operation < NumericOperation:ADD || operation > NumericOperation:SHL) {
            valid = false;
            unit.newError().printCString("invalid operation in ").print(node);
        }
        if (!o1.asNumeric()) {
            valid = false;
            unit.newError().printCString("invalid first argument in ").print(node);
        }
        if (!o2.asNumeric()) {
            valid = false;
            unit.newError().printCString("invalid second argument in ").print(node);
        }
        return valid;
    }
    
    [Value] compile(CompilationUnit unit) {
        o1 = o1.compile(unit);
        o2 = o2.compile(unit);
        
        if (this.validate(unit) && this.isConstant()) {
            return unit._buildNumberValue(this.getValue()).compile(unit);
        }
        return this.value();
    }
    
    [int] isConstant() { return o1.isConstant() && o2.isConstant(); }
    [int] getValue() {
        NumericValue n1 = o1.asNumeric();
        NumericValue n2 = o2.asNumeric();
        if (n1 && n2) {
            if (operation == NumericOperation:ADD) { return n1.getValue() + n2.getValue(); }
            if (operation == NumericOperation:SUB) { return n1.getValue() - n2.getValue(); }
            if (operation == NumericOperation:MUL) { return n1.getValue() * n2.getValue(); }
            if (operation == NumericOperation:DIV) { return n1.getValue() / n2.getValue(); }
            if (operation == NumericOperation:MOD) { return n1.getValue() % n2.getValue(); }
            if (operation == NumericOperation:SHR) { return Bitset:rshift(n1.getValue(), n2.getValue()); }
            if (operation == NumericOperation:SHL) { return Bitset:lshift(n1.getValue(), n2.getValue()); }
        }
        return 0;
    }
}
