/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
generator = parsergen
[source]
mimetype = text/x-pool-grammar
name = ./src/pool/asm/Parser.gram
*/
namespace pool::asm;

use pool::generator::parser::ParseStack;

class Parser extends BaseParser {

    int NT_COMPILATION_UNIT := 0;
    int NT_LABEL := 1;
    int NT_INSTRUCTION := 2;
    int NT_DEFINITION := 3;
    int NT_OPERAND := 4;
    int NT_INDIRECT := 5;
    int NT_FORMULA := 6;

    [int, int] __getRule(int rule) {
        if (rule == 0) { return [Parser:NT_COMPILATION_UNIT, 0]; }
        else if (rule == 1) { return [Parser:NT_COMPILATION_UNIT, 2]; }
        else if (rule == 2) { return [Parser:NT_COMPILATION_UNIT, 2]; }
        else if (rule == 3) { return [Parser:NT_COMPILATION_UNIT, 2]; }
        else if (rule == 4) { return [Parser:NT_COMPILATION_UNIT, 2]; }
        else if (rule == 5) { return [Parser:NT_LABEL, 2]; }
        else if (rule == 6) { return [Parser:NT_INSTRUCTION, 2]; }
        else if (rule == 7) { return [Parser:NT_INSTRUCTION, 3]; }
        else if (rule == 8) { return [Parser:NT_INSTRUCTION, 5]; }
        else if (rule == 9) { return [Parser:NT_INSTRUCTION, 7]; }
        else if (rule == 10) { return [Parser:NT_DEFINITION, 4]; }
        else if (rule == 11) { return [Parser:NT_OPERAND, 1]; }
        else if (rule == 12) { return [Parser:NT_OPERAND, 1]; }
        else if (rule == 13) { return [Parser:NT_OPERAND, 1]; }
        else if (rule == 14) { return [Parser:NT_OPERAND, 1]; }
        else if (rule == 15) { return [Parser:NT_OPERAND, 1]; }
        else if (rule == 16) { return [Parser:NT_OPERAND, 1]; }
        else if (rule == 17) { return [Parser:NT_OPERAND, 1]; }
        else if (rule == 18) { return [Parser:NT_INDIRECT, 3]; }
        else if (rule == 19) { return [Parser:NT_INDIRECT, 5]; }
        else if (rule == 20) { return [Parser:NT_INDIRECT, 7]; }
        else if (rule == 21) { return [Parser:NT_INDIRECT, 4]; }
        else if (rule == 22) { return [Parser:NT_INDIRECT, 6]; }
        else if (rule == 23) { return [Parser:NT_INDIRECT, 4]; }
        else if (rule == 24) { return [Parser:NT_INDIRECT, 6]; }
        else if (rule == 25) { return [Parser:NT_INDIRECT, 8]; }
        else if (rule == 26) { return [Parser:NT_INDIRECT, 5]; }
        else if (rule == 27) { return [Parser:NT_INDIRECT, 7]; }
        else if (rule == 28) { return [Parser:NT_FORMULA, 5]; }
        return [Parser:ERROR, 0];
    }

    [__any__] __executeRule(int rule, ParseStack s) {
        __any__ result = null;
        if (rule == 0) { result = unit.getNodeList(); }
        else if (rule == 1) { result = this.pushToList(s.at(1), s.at(0)); }
        else if (rule == 2) { result = this.pushToList(s.at(1), s.at(0)); }
        else if (rule == 3) { result = this.pushToList(s.at(1), s.at(0)); }
        else if (rule == 4) { result = s.at(1); }
        else if (rule == 5) { result = this.createLabel(s.at(1)).node(); }
        else if (rule == 6) { result = this.createInstruction(s.at(1)).node(); }
        else if (rule == 7) { result = this.createInstruction(s.at(2)).setOperand1(s.at(1)).node(); }
        else if (rule == 8) { result = this.createInstruction(s.at(4)).setOperand1(s.at(3)).setOperand2(s.at(1)).node(); }
        else if (rule == 9) { result = this.createInstruction(s.at(6)).setOperand1(s.at(5)).setOperand2(s.at(3)).setOperand3(s.at(1)).node(); }
        else if (rule == 10) { result = this.createDefinition(s.at(3), s.at(1)).node(); }
        else if (rule == 11) { result = this.createIdentifier(s.at(0)).operand(); }
        else if (rule == 12) { result = this.createRegister(s.at(0)).operand(); }
        else if (rule == 13) { result = this.createNumber(s.at(0)).operand(); }
        else if (rule == 14) { result = this.createChar(s.at(0)).operand(); }
        else if (rule == 15) { result = this.createString(s.at(0)).operand(); }
        else if (rule == 16) { result = s.at(0); }
        else if (rule == 17) { result = s.at(0); }
        else if (rule == 18) { result = this.createIndirect().setBase(s.at(1)).operand(); }
        else if (rule == 19) { result = this.createIndirect().setBase(s.at(3)).setIndex(s.at(1)).operand(); }
        else if (rule == 20) { result = this.createIndirect().setBase(s.at(5)).setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }
        else if (rule == 21) { result = this.createIndirect().setIndex(s.at(1)).operand(); }
        else if (rule == 22) { result = this.createIndirect().setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }
        else if (rule == 23) { result = this.createIndirect().setDisplacement(s.at(3)).setBase(s.at(1)).operand(); }
        else if (rule == 24) { result = this.createIndirect().setDisplacement(s.at(5)).setBase(s.at(3)).setIndex(s.at(1)).operand(); }
        else if (rule == 25) { result = this.createIndirect().setDisplacement(s.at(7)).setBase(s.at(5)).setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }
        else if (rule == 26) { result = this.createIndirect().setDisplacement(s.at(4)).setIndex(s.at(1)).operand(); }
        else if (rule == 27) { result = this.createIndirect().setDisplacement(s.at(6)).setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }
        else if (rule == 28) { result = this.createFormula(s.at(3), s.at(2), s.at(1)).operand(); }

        return result;
    }

    [int] __goto(int state, int symbol) {
        if (state == 0) {
            if (symbol == Parser:NT_COMPILATION_UNIT) { return 1; }
        } else if (state == 1) {
            if (symbol == Parser:NT_LABEL) { return 4; }
            else if (symbol == Parser:NT_DEFINITION) { return 5; }
            else if (symbol == Parser:NT_INSTRUCTION) { return 6; }
        } else if (state == 2) {
            if (symbol == Parser:NT_OPERAND) { return 16; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 13) {
            if (symbol == Parser:NT_OPERAND) { return 19; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 15) {
            if (symbol == Parser:NT_OPERAND) { return 21; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 20) {
            if (symbol == Parser:NT_OPERAND) { return 26; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 23) {
            if (symbol == Parser:NT_OPERAND) { return 31; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 24) {
            if (symbol == Parser:NT_OPERAND) { return 32; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 27) {
            if (symbol == Parser:NT_OPERAND) { return 35; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 29) {
            if (symbol == Parser:NT_OPERAND) { return 36; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 30) {
            if (symbol == Parser:NT_OPERAND) { return 37; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 39) {
            if (symbol == Parser:NT_OPERAND) { return 48; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        } else if (state == 41) {
            if (symbol == Parser:NT_OPERAND) { return 49; }
            else if (symbol == Parser:NT_INDIRECT) { return 17; }
            else if (symbol == Parser:NT_FORMULA) { return 18; }
        }

        return Parser:ERROR;
    }

    [int, int] __action(int state, int symbol) {
        if ((symbol == Tokenizer:T_SPACER) || (symbol == Tokenizer:T_COMMENT) || (symbol == Tokenizer:T_MLCOMMENT)) { return [Parser:IGNORE, 0]; }
        if (state == 0) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 0]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 0]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 0]; }
        } else if (state == 1) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:ACCEPT, 0]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 2]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:SHIFT, 3]; }
        } else if (state == 2) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:SHIFT, 12]; }
            else if (symbol == Tokenizer:T_ASSIGN) { return [Parser:SHIFT, 13]; }
            else if (symbol == Tokenizer:T_COLON) { return [Parser:SHIFT, 14]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 3) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 4]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 4]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 4]; }
        } else if (state == 4) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 1]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 1]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 1]; }
        } else if (state == 5) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 2]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 2]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 2]; }
        } else if (state == 6) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 3]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 3]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 3]; }
        } else if (state == 7) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 11]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 11]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 11]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 11]; }
        } else if (state == 8) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 12]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 12]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 12]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 12]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 12]; }
        } else if (state == 9) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 14]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 14]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 14]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 14]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 14]; }
        } else if (state == 10) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 15]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 15]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 15]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 15]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 15]; }
        } else if (state == 11) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 13]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 13]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 13]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 13]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 13]; }
        } else if (state == 12) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 6]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 6]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 6]; }
        } else if (state == 13) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 14) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 5]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 5]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 5]; }
        } else if (state == 15) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 20]; }
        } else if (state == 16) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:SHIFT, 22]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 24]; }
        } else if (state == 17) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 16]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 16]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 16]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 16]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 16]; }
        } else if (state == 18) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 17]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 17]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 17]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 17]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 17]; }
        } else if (state == 19) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:SHIFT, 25]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
        } else if (state == 20) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 21) {
            if (symbol == Tokenizer:T_OPERATOR) { return [Parser:SHIFT, 27]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 28]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 29]; }
        } else if (state == 22) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 7]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 7]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 7]; }
        } else if (state == 23) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 30]; }
        } else if (state == 24) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 25) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 10]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 10]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 10]; }
        } else if (state == 26) {
            if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 33]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 34]; }
        } else if (state == 27) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 28) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 18]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 18]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 18]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 18]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 18]; }
        } else if (state == 29) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 30) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 31) {
            if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 38]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 39]; }
        } else if (state == 32) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:SHIFT, 40]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 41]; }
        } else if (state == 33) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 21]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 21]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 21]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 21]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 21]; }
        } else if (state == 34) {
            if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 42]; }
        } else if (state == 35) {
            if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 43]; }
        } else if (state == 36) {
            if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 44]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 45]; }
        } else if (state == 37) {
            if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 46]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 47]; }
        } else if (state == 38) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 23]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 23]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 23]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 23]; }
        } else if (state == 39) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 40) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 8]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 8]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 8]; }
        } else if (state == 41) {
            if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_REGISTER) { return [Parser:SHIFT, 8]; }
            else if (symbol == Tokenizer:T_CHAR) { return [Parser:SHIFT, 9]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 10]; }
            else if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 11]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 42) {
            if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 50]; }
        } else if (state == 43) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 28]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 28]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 28]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 28]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 28]; }
        } else if (state == 44) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 19]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 19]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 19]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 19]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 19]; }
        } else if (state == 45) {
            if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 51]; }
        } else if (state == 46) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 26]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 26]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 26]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 26]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 26]; }
        } else if (state == 47) {
            if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 52]; }
        } else if (state == 48) {
            if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 53]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:SHIFT, 54]; }
        } else if (state == 49) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:SHIFT, 55]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:SHIFT, 23]; }
        } else if (state == 50) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 22]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 22]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 22]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 22]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 22]; }
        } else if (state == 51) {
            if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 56]; }
        } else if (state == 52) {
            if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 57]; }
        } else if (state == 53) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 24]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 24]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 24]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 24]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 24]; }
        } else if (state == 54) {
            if (symbol == Tokenizer:T_NUMBER) { return [Parser:SHIFT, 58]; }
        } else if (state == 55) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 9]; }
            else if (symbol == Tokenizer:T_IDENTIFIER) { return [Parser:REDUCE, 9]; }
            else if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 9]; }
        } else if (state == 56) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 20]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 20]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 20]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 20]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 20]; }
        } else if (state == 57) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 27]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 27]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 27]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 27]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 27]; }
        } else if (state == 58) {
            if (symbol == Tokenizer:T_CBRACKET) { return [Parser:SHIFT, 59]; }
        } else if (state == 59) {
            if (symbol == Tokenizer:T_EOL) { return [Parser:REDUCE, 25]; }
            else if (symbol == Tokenizer:T_COMMA) { return [Parser:REDUCE, 25]; }
            else if (symbol == Tokenizer:T_OBRACKET) { return [Parser:REDUCE, 25]; }
            else if (symbol == Tokenizer:T_CBRACKET) { return [Parser:REDUCE, 25]; }
            else if (symbol == Tokenizer:T_OPERATOR) { return [Parser:REDUCE, 25]; }
        }

        return [Parser:ERROR, 0];
    }

}
