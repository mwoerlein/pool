/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386::instruction;

use pool::asm::ast::operand::NumberNode;

use sys::stream::OStream;

class Inline extends pool::asm::i386::Instruction {

    int skipValidation;
    
    [Inline] setSkipValidation(int skip) {
        skipValidation = skip;
    }

    [int] compileInstruction() {
        if (node.getPrefix()) { this.newError().printCString("Unexpected prefix: ").print(node.getPrefix()); }
        if (!o1) { this.newError().printCString("Missing operand in '").print(node).printChar('\''); }
        if (o2) { this.newError().printCString("Unexpected operand: ").print(node.getOperand2()); }
        if (o3) { this.newError().printCString("Unexpected operand: ").print(node.getOperand3()); }
        if (!operandSize) { this.newError().printCString("Missing operand size in '").print(node).printChar('\''); }
        
        if (!o1.asNumeric()) { this.newError().printCString("Invalid operand: ").print(node.getOperand1()); }
        
        // TODO: validate operand value size, if not skipped
        
        return this.approximateSize();
    }
    
    [int] approximateSize() {
        return operandSize / 8;
    }
    
    [OStream] rawToStream(OStream stream) {
        return this.rawValueToStream(stream, o1.asNumeric().getValue(), operandSize);
    }
}
