/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386::instruction;

use pool::asm::value::NumericValue;

use sys::stream::OStream;

class Inline extends OneOperand {

    int skipValidation;
    
    [Inline] setSkipValidation(int skip) {
        skipValidation = skip;
        return this;
    }

    [int] compileOperands() {
        if (!operandSize) { this.newError().printCString("Missing operand size in '").print(node).printChar('\''); }
        
        NumericValue num1 = o1.asNumeric();
        if (num1) {
            if (num1.isConstant()) {
                int value = num1.getValue();
                if (this.getUnsignedBitWidth(value) > operandSize) {
                    this.newError().printCString("value '").printInt(value).printCString("' does not match ").printInt(operandSize).printCString(" bit operand size: ").print(node);
                }
            } else if (!skipValidation && (addr > operandSize)) {
                this.newError().printCString("address size ").printInt(addr).printCString(" bit does not match ").printInt(operandSize).printCString(" bit operand size: ").print(node);
            }
        } else { this.newError().printCString("Invalid operand: ").print(node.getOperand1()); }
        
        return immSize = this.approximateSize();
    }
    
    [int] approximateSize() {
        return operandSize / 8;
    }
    
    [OStream] rawToStream(OStream stream) {
        return this.rawValueToStream(stream, o1.asNumeric().getValue(), operandSize);
    }
}
