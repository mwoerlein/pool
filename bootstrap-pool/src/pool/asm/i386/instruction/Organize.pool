/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386::instruction;

use pool::asm::value::NumericValue;

use sys::core::utils::Bitset;
use sys::stream::OStream;

class Organize extends OneOperand {

    int align;
    
    [Organize] setAlign(int align) {
        this.align = align;
        return this;
    }

    [] prepareInstruction() {
        if (operandSize) { this.newError().printCString("Unexpected operand size in '").print(node).printChar('\''); }
        
        NumericValue num1 = o1.asNumeric();
        if (num1 && num1.isConstant()) {
            int value = num1.getValue();
            if (align) {
                if (!Bitset:isPowerOfTwo(value)) {
                    this.newError().printCString("Invalid alignment: ").printInt(value).printCString(" is not a power of 2");
                }
            } else {
                if (value < pos) {
                    this.newError().printCString("Invalid organize: ").printInt(value).printCString(" is lower than current position ").printInt(pos);
                }
            }
        } else { this.newError().printCString("Invalid operand: ").print(node.getOperand1()); }
    }
    
    [int] approximateSize() {
        // recompute immSize for prepare *and* compute relative to current position 
        int value = o1.asNumeric().getValue();
        if (align) {
            int offset = pos % value;
            immSize = value - offset;
            if (!offset) { immSize = 0; }
        } else {
            immSize = value - pos;
        }
        return immSize;
    }
    
    [OStream] rawToStream(OStream stream) {
        int c = 0x0;
        if (align) { c = 0x90; }
        int i = 0;
        while (i++ < immSize) { stream.printChar(c); }
        return stream;
    }
}
