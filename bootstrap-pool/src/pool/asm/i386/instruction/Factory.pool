/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386::instruction;

use pool::asm::Instruction;
use sys::core::String;

class Factory extends sys::core::Object {

    [Instruction] buildInstruction(String op) {
        if (!op) { return this._buildNothing(); }
        
        if (op.cequals("int"))      { return this._buildInterrupt(); }
        if (op.cequals("jmp"))      { return this._buildJump(false); }
        if (op.cequals("call"))     { return this._buildJump(true); }
        
        if (op.cequals("mov"))      { return this._buildMove( 0); }
        if (op.cequals("movb"))     { return this._buildMove( 8); }
        if (op.cequals("movw"))     { return this._buildMove(16); }
        if (op.cequals("movl"))     { return this._buildMove(32); }
        if (op.cequals("pop"))      { return this._buildPop ( 0); }
        if (op.cequals("popb"))     { return this._buildPop ( 8); }
        if (op.cequals("popw"))     { return this._buildPop (16); }
        if (op.cequals("popl"))     { return this._buildPop (32); }
        if (op.cequals("push"))     { return this._buildPush( 0); }
        if (op.cequals("pushb"))    { return this._buildPush( 8); }
        if (op.cequals("pushw"))    { return this._buildPush(16); }
        if (op.cequals("pushl"))    { return this._buildPush(32); }
        
        if (op.cequals(".ascii"))   { return this._buildAscii(false); }
        if (op.cequals(".asciz"))   { return this._buildAscii(true); }
        
        if (op.cequals(".byte"))    { return this._buildInline( 8, false); }
        if (op.cequals(".bytet"))   { return this._buildInline( 8, true); }
        if (op.cequals(".word"))    { return this._buildInline(16, false); }
        if (op.cequals(".wordt"))   { return this._buildInline(16, true); }
        if (op.cequals(".long"))    { return this._buildInline(32, false); }
        
        if (op.cequals(".align"))   { return this._buildOrganize(true); }
        if (op.cequals(".org"))     { return this._buildOrganize(false); }
                                            
        if (op.cequals("pusha"))    { return this._buildNoOperand(0x60, 0x00, 0x00,  0); }
        if (op.cequals("pushaw"))   { return this._buildNoOperand(0x60, 0x00, 0x00, 16); }
        if (op.cequals("pushad"))   { return this._buildNoOperand(0x60, 0x00, 0x00, 32); }
        if (op.cequals("pushal"))   { return this._buildNoOperand(0x60, 0x00, 0x00, 32); }
        if (op.cequals("popa"))     { return this._buildNoOperand(0x61, 0x00, 0x00,  0); }
        if (op.cequals("popaw"))    { return this._buildNoOperand(0x61, 0x00, 0x00, 16); }
        if (op.cequals("popad"))    { return this._buildNoOperand(0x61, 0x00, 0x00, 32); }
        if (op.cequals("popal"))    { return this._buildNoOperand(0x61, 0x00, 0x00, 32); }
        if (op.cequals("pushf"))    { return this._buildNoOperand(0x9C, 0x00, 0x00,  0); }
        if (op.cequals("pushfw"))   { return this._buildNoOperand(0x9C, 0x00, 0x00, 16); }
        if (op.cequals("pushfd"))   { return this._buildNoOperand(0x9C, 0x00, 0x00, 32); }
        if (op.cequals("pushfl"))   { return this._buildNoOperand(0x9C, 0x00, 0x00, 32); }
        if (op.cequals("popf"))     { return this._buildNoOperand(0x9D, 0x00, 0x00,  0); }
        if (op.cequals("popfw"))    { return this._buildNoOperand(0x9D, 0x00, 0x00, 16); }
        if (op.cequals("popfd"))    { return this._buildNoOperand(0x9D, 0x00, 0x00, 32); }
        if (op.cequals("popfl"))    { return this._buildNoOperand(0x9D, 0x00, 0x00, 32); }
        if (op.cequals("lodsb"))    { return this._buildNoOperand(0xAC, 0x00, 0x00,  8); }
        if (op.cequals("lodsw"))    { return this._buildNoOperand(0xAD, 0x00, 0x00, 16); }
        if (op.cequals("lodsd"))    { return this._buildNoOperand(0xAD, 0x00, 0x00, 32); }
        if (op.cequals("lodsl"))    { return this._buildNoOperand(0xAD, 0x00, 0x00, 32); }
        if (op.cequals("clc"))      { return this._buildNoOperand(0xF8, 0x00, 0x00,  0); }
        if (op.cequals("cld"))      { return this._buildNoOperand(0xFC, 0x00, 0x00,  0); }
        if (op.cequals("cli"))      { return this._buildNoOperand(0xFA, 0x00, 0x00,  0); }
        if (op.cequals("clts"))     { return this._buildNoOperand(0x0F, 0x06, 0x00,  0); }
        if (op.cequals("stc"))      { return this._buildNoOperand(0xF9, 0x00, 0x00,  0); }
        if (op.cequals("std"))      { return this._buildNoOperand(0xFD, 0x00, 0x00,  0); }
        if (op.cequals("sti"))      { return this._buildNoOperand(0xFB, 0x00, 0x00,  0); }
        if (op.cequals("hlt"))      { return this._buildNoOperand(0xF4, 0x00, 0x00,  0); }
        if (op.cequals("nop"))      { return this._buildNoOperand(0x90, 0x00, 0x00,  0); }
        if (op.cequals("int0"))     { return this._buildNoOperand(0xCE, 0x00, 0x00,  0); }
        if (op.cequals("int1"))     { return this._buildNoOperand(0xF1, 0x00, 0x00,  0); }
        if (op.cequals("int3"))     { return this._buildNoOperand(0xCC, 0x00, 0x00,  0); }
        if (op.cequals("leave"))    { return this._buildNoOperand(0xC9, 0x00, 0x00,  0); }
        if (op.cequals("ret"))      { return this._buildNoOperand(0xC3, 0x00, 0x00,  0); }
        if (op.cequals("iret"))     { return this._buildNoOperand(0xCF, 0x00, 0x00,  0); }
        
        return null;
    }
    
    [Instruction] _buildAscii(int zeroTerminated) {
        Ascii i = this.rt().createInstance(Ascii:CLASSNAME);
        i.setZeroTerminated(zeroTerminated);
        return i.instruction();
    } 
    
    [Instruction] _buildInline(int size, int skip) {
        Inline i = this.rt().createInstance(Inline:CLASSNAME);
        i.setOperandSize(size);
        i.setSkipValidation(skip);
        return i.instruction();
    } 
    
    [Instruction] _buildInterrupt() {
        Interrupt i = this.rt().createInstance(Interrupt:CLASSNAME);
        return i.instruction();
    } 
    
    [Instruction] _buildJump(int call) {
        Jump i = this.rt().createInstance(Jump:CLASSNAME);
        i.setCall(call);
        return i.instruction();
    } 
    
    [Instruction] _buildMove(int size) {
        Move i = this.rt().createInstance(Move:CLASSNAME);
        i.setOperandSize(size);
        return i.instruction();
    } 
    
    [Instruction] _buildNoOperand(int op1, int op2, int op3, int size) {
        NoOperand i = this.rt().createInstance(NoOperand:CLASSNAME);
        i.setOperandSize(size);
        i.setOperation(op1, op2, op3);
        return i.instruction();
    }
     
    [Instruction] _buildNothing() {
        Nothing i = this.rt().createInstance(Nothing:CLASSNAME);
        return i.instruction();
    } 
    
    [Instruction] _buildOrganize(int align) {
        Organize i = this.rt().createInstance(Organize:CLASSNAME);
        i.setAlign(align);
        return i.instruction();
    } 
    
    [Instruction] _buildPop(int size) {
        Pop i = this.rt().createInstance(Pop:CLASSNAME);
        i.setOperandSize(size);
        return i.instruction();
    } 
    
    [Instruction] _buildPush(int size) {
        Push i = this.rt().createInstance(Push:CLASSNAME);
        i.setOperandSize(size);
        return i.instruction();
    } 
}
