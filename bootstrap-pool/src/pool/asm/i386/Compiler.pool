/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386;

use pool::asm::CompilationBlock;
use pool::asm::CompilationUnit;
use pool::asm::Instruction;
use pool::asm::Value;

use pool::asm::ast::CommentNode;
use pool::asm::ast::DefinitionNode;
use pool::asm::ast::EmptyNode;
use pool::asm::ast::InstructionNode;
use pool::asm::ast::LabelNode;
use pool::asm::ast::Node;
use pool::asm::ast::NodeList;
use pool::asm::ast::OperandNode;

use pool::asm::ast::operand::FormulaNode;
use pool::asm::ast::operand::IdentifierNode;
use pool::asm::ast::operand::IndirectNode;
use pool::asm::ast::operand::NumberNode;
use pool::asm::ast::operand::RegisterNode;
use pool::asm::ast::operand::StringNode;

use pool::asm::value::NumericOperation;
use pool::asm::value::TextOperation;

use pool::asm::i386::value::RegisterValue;
use pool::asm::i386::value::IndirectValue;

use sys::core::anycollection::AnyIterator;
use sys::core::String;

class Compiler extends pool::asm::i386::instruction::Factory {
    CompilationUnit unit;
    CompilationBlock lastBlock;
    Instruction lastInst;

    [] prepare(CompilationUnit unit) {
        this.unit = unit;
        this.lastInst = null;
        this.lastBlock = unit.addBlock(32); // initialize default block
        this._prepareNodeList(unit.getNodeList());
        this.unit = null;
        
        {
            int pos = 0;
            AnyIterator bit = unit.blocks();
            while (bit.hasNext()) {
                CompilationBlock block = bit.next();
                AnyIterator iit = block.instructions();
                while (iit.hasNext()) {
                    Instruction inst = iit.next();
                    pos += inst.prepare(pos);
                }
                iit.destroy();
            }
            bit.destroy();
        }
    }
    
    [int] compile(CompilationUnit unit) {
        int pos = 0;
        {
            AnyIterator bit = unit.blocks();
            while (bit.hasNext()) {
                CompilationBlock block = bit.next();
                AnyIterator iit = block.instructions();
                while (iit.hasNext()) {
                    Instruction inst = iit.next();
                    pos += inst.compile(pos);
                }
                iit.destroy();
            }
            bit.destroy();
        }
        return pos;
    }
    
    [] finalize(CompilationUnit unit, int startAddress) {
        {
            AnyIterator bit = unit.blocks();
            while (bit.hasNext()) {
                CompilationBlock block = bit.next();
                AnyIterator iit = block.instructions();
                while (iit.hasNext()) {
                    Instruction inst = iit.next();
                    inst.finalize(startAddress);
                }
                iit.destroy();
            }
            bit.destroy();
        }
    }
    
    [] _prepareDefinitionNode(DefinitionNode defNode) {
        unit.addDefinition(defNode.getId(), this._prepareOperandNode(defNode.getValue()));
    }
    
    [] _prepareInstructionNode(InstructionNode instNode) {
        String op = instNode.getOperation().toLower();
        if (op.cequals(".code16")) { lastBlock = unit.addBlock(16); }
        else if (op.cequals(".code32")) { lastBlock = unit.addBlock(32); }
        else {
            Instruction inst = this.buildInstruction(op);
            if (inst) {
                inst.setNode(instNode);
                inst.setOperand1(this._prepareOperandNode(instNode.getOperand1()));
                inst.setOperand2(this._prepareOperandNode(instNode.getOperand2()));
                inst.setOperand3(this._prepareOperandNode(instNode.getOperand3()));
                lastInst = lastBlock.addInstruction(inst);
            } else {
                unit.newError().printCString("unknown instruction: '").print(op).printChar('\'');
            }
        }
        op.destroy();
    }
    
    [] _prepareLabelNode(LabelNode label) {
        if (!lastInst) {
            // fake instruction as reference for the beginning of the unit
            lastInst = lastBlock.addInstruction(this.buildInstruction(null));
        }
        unit.addDefinition(label.getLabel(), unit._buildPositionValue(lastInst));
    }
    
    [] _prepareNodeList(NodeList list) {
        sys::runtime::Runtime rt = this.rt();
        AnyIterator it = list.nodes();
        while (it.hasNext()) {
            Node n = it.next();
            CommentNode comment = rt.cast(CommentNode:CLASSNAME, n);
            DefinitionNode def = rt.cast(DefinitionNode:CLASSNAME, n);
            EmptyNode empty = rt.cast(EmptyNode:CLASSNAME, n);
            InstructionNode inst = rt.cast(InstructionNode:CLASSNAME, n);
            LabelNode label = rt.cast(LabelNode:CLASSNAME, n);
            NodeList list = rt.cast(NodeList:CLASSNAME, n);
            if (comment || empty) { /* ignore */ }
            else if (def) { this._prepareDefinitionNode(def); }
            else if (inst) { this._prepareInstructionNode(inst); }
            else if (label) { this._prepareLabelNode(label); }
            else if (list) { this._prepareNodeList(list); }
            else { unit.newError().printCString("unexpected node in nodelist: '").print(n).printChar('\''); }
        }
        it.destroy();
    }
    
    [Value] _prepareOperandNode(OperandNode o) {
        if (!o) { return null; }
        sys::runtime::Runtime rt = this.rt();
        FormulaNode formula = rt.cast(FormulaNode:CLASSNAME, o);
        IdentifierNode id = rt.cast(IdentifierNode:CLASSNAME, o);
        IndirectNode indirect = rt.cast(IndirectNode:CLASSNAME, o);
        NumberNode number = rt.cast(NumberNode:CLASSNAME, o);
        RegisterNode reg = rt.cast(RegisterNode:CLASSNAME, o);
        StringNode str = rt.cast(StringNode:CLASSNAME, o);
        if (formula) { return this._buildOperationValue(formula); }
        else if (id) { return unit._buildIdentifierValue(id); }
        else if (indirect) { return this._buildIndirectValue(indirect); }
        else if (number) { return unit._buildNumberValue(number.getOperand()); }
        else if (reg) { return this._buildRegisterValue(reg); }
        else if (str) { return unit._buildStringValue(str.getOperand()); }
        else { unit.newError().printCString("unexpected operand '").print(o).printChar('\''); }
        return null;
    }
    
    [Value] _buildOperationValue(FormulaNode n) {
        Value o1 = this._prepareOperandNode(n.getOperand1());
        Value o2 = this._prepareOperandNode(n.getOperand2());
        String op = n.getOperation();
        
        if (op.cequals("."))  { return unit._buildTextOperation(n, o1, TextOperation:CONC, o2); }
        if (op.cequals("+"))  { return unit._buildNumericOperation(n, o1, NumericOperation:ADD, o2); }
        if (op.cequals("-"))  { return unit._buildNumericOperation(n, o1, NumericOperation:SUB, o2); }
        if (op.cequals("*"))  { return unit._buildNumericOperation(n, o1, NumericOperation:MUL, o2); }
        if (op.cequals("/"))  { return unit._buildNumericOperation(n, o1, NumericOperation:DIV, o2); }
        if (op.cequals("%"))  { return unit._buildNumericOperation(n, o1, NumericOperation:MOD, o2); }
        if (op.cequals(">>"))  { return unit._buildNumericOperation(n, o1, NumericOperation:SHR, o2); }
        if (op.cequals("<<"))  { return unit._buildNumericOperation(n, o1, NumericOperation:SHL, o2); }
        
        unit.newError().printCString("unknown operation: '").print(n).printChar('\'');
        return null;
    }
    
    [Value] _buildRegisterValue(RegisterNode node) {
        RegisterValue v = unit.createOwn(RegisterValue:CLASSNAME);
        return v.init(node).value();
    }
    
    [Value] _buildIndirectValue(IndirectNode node) {
        IndirectValue v = unit.createOwn(IndirectValue:CLASSNAME);
        return v.init(
            node,
            this._prepareOperandNode(node.getBase()),
            this._prepareOperandNode(node.getIndex()),
            this._prepareOperandNode(node.getDisplacement())
        ).value();
    }
}
