/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386;

use pool::asm::CompilationUnit;
use pool::asm::CompilationBlock;
use pool::asm::Instruction;
use pool::asm::Value;

use pool::asm::ast::CodeNode;
use pool::asm::ast::CommentNode;
use pool::asm::ast::DefinitionNode;
use pool::asm::ast::EmptyNode;
use pool::asm::ast::InstructionNode;
use pool::asm::ast::LabelNode;
use pool::asm::ast::Node;
use pool::asm::ast::NodeList;
use pool::asm::ast::operand::FormulaOperand;
use pool::asm::ast::operand::IdentifierOperand;
use pool::asm::ast::operand::IndirectOperand;
use pool::asm::ast::operand::NumberOperand;
use pool::asm::ast::operand::OperandNode;
use pool::asm::ast::operand::RegisterOperand;
use pool::asm::ast::operand::StringOperand;

use pool::asm::i386::instruction::Inline;
use pool::asm::i386::instruction::Move;
use pool::asm::i386::instruction::NoOperand;
use pool::asm::i386::instruction::Nothing;

use pool::asm::value::PositionValue;
use pool::asm::value::OperandValue;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::stream::IStream;

class Compiler extends sys::core::Object {
    CompilationUnit unit;
    CompilationBlock lastBlock;
    Instruction lastInst;

    [CodeNode] createCode(int mode) {
        CodeNode code = this.rt().createInstance(CodeNode:CLASSNAME);
        code.setMode(mode);
        return code;
    }
    
    [CompilationUnit] compile(CompilationUnit unit) {
        this.unit = unit;
        this.lastInst = null;
        this._visitCodeNode(this.createCode(32)); // initialize default block
        this._visitNodeList(unit.getNodeList());
        this.unit = null;
        return unit;
    }
    
    [int] validate(CompilationUnit unit) {
        {
            int pos = 0;
            AnyIterator it = unit.iterator();
            while (it.hasNext()) {
                CompilationBlock block = it.next();
                AnyIterator bit = block.iterator();
                while (bit.hasNext()) {
                    Instruction inst = bit.next();
                    pos += inst.prepare(pos);
                }
                bit.destroy();
            }
            it.destroy();
        }

        {
            AnyIterator it = unit.values();
            while (it.hasNext()) {
                Value val = it.next();
                val.validate(unit);
            }
            it.destroy();
        }
        
        int pos = 0;
        {
            AnyIterator it = unit.iterator();
            while (it.hasNext()) {
                CompilationBlock block = it.next();
                AnyIterator bit = block.iterator();
                while (bit.hasNext()) {
                    Instruction inst = bit.next();
                    inst.setPos(pos);
                    pos += inst.validate();
                }
                bit.destroy();
            }
            it.destroy();
        }
        return pos;
    }
    
    [] finalize(CompilationUnit unit, int startAddress) {
        {
            AnyIterator it = unit.iterator();
            while (it.hasNext()) {
                CompilationBlock block = it.next();
                AnyIterator bit = block.iterator();
                while (bit.hasNext()) {
                    Instruction inst = bit.next();
                    inst.finalize(startAddress);
                }
                bit.destroy();
            }
            it.destroy();
        }
    }
    
    [] _visitCodeNode(CodeNode code) {
        lastBlock = unit.addBlock(code);
    }
    
    [] _visitDefinitionNode(DefinitionNode def) {
        OperandValue val = this.rt().createInstance(OperandValue:CLASSNAME);
        val.init(def);
        unit.addValue(val.value());
    }
    
    [] _visitInstructionNode(InstructionNode instNode) {
        String op = instNode.getOperation().toLower();
        Instruction inst = this._buildInstruction(op);
        if (inst) {
            inst.setNode(instNode);
            lastInst = lastBlock.addInstruction(inst);
        }
        op.destroy();
    }
    
    [] _visitLabelNode(LabelNode label) {
        PositionValue val = this.rt().createInstance(PositionValue:CLASSNAME);
        if (!lastInst) {
            // fake instruction as reference for the beginning of the unit
            lastInst = lastBlock.addInstruction(this._buildInstruction(null));
        }
        val.init(label, lastInst);
        unit.addValue(val.value());
    }
    
    [] _visitNodeList(NodeList list) {
        sys::runtime::Runtime rt = this.rt();
        AnyIterator it = list.iterator();
        while (it.hasNext()) {
            Node n = it.next();
            CodeNode code = rt.cast(CodeNode:CLASSNAME, n);
            CommentNode comment = rt.cast(CommentNode:CLASSNAME, n);
            DefinitionNode def = rt.cast(DefinitionNode:CLASSNAME, n);
            EmptyNode empty = rt.cast(EmptyNode:CLASSNAME, n);
            InstructionNode inst = rt.cast(InstructionNode:CLASSNAME, n);
            LabelNode label = rt.cast(LabelNode:CLASSNAME, n);
            NodeList list = rt.cast(NodeList:CLASSNAME, n);
            if (code) { this._visitCodeNode(code); }
            else if (comment) { /* ignore */ }
            else if (def) { this._visitDefinitionNode(def); }
            else if (empty) { /* ignore */ }
            else if (inst) { this._visitInstructionNode(inst); }
            else if (label) { this._visitLabelNode(label); }
            else if (list) { this._visitNodeList(list); }
            else { unit.newError().printCString("unexpected node in nodelist: '").print(n).printChar('\''); }
        }
        it.destroy();
    }
    
    // TODO: extract InstructionFactory
    [Instruction] _buildInstruction(String op) {
        if (!op) { return this._buildNothing(); }
        
        if (op.cequals("mov"))      { return this._buildMove( 0); }
        if (op.cequals("movb"))     { return this._buildMove( 8); }
        if (op.cequals("movw"))     { return this._buildMove(16); }
        if (op.cequals("movl"))     { return this._buildMove(32); }
        
        if (op.cequals(".byte"))    { return this._buildInline( 8, false); }
        if (op.cequals(".bytet"))   { return this._buildInline( 8, true); }
        if (op.cequals(".word"))    { return this._buildInline(16, false); }
        if (op.cequals(".wordt"))   { return this._buildInline(16, true); }
        if (op.cequals(".long"))    { return this._buildInline(32, false); }
                                            
        if (op.cequals("pusha"))    { return this._buildNoOperand(0x60, 0x00, 0x00,  0); }
        if (op.cequals("pushaw"))   { return this._buildNoOperand(0x60, 0x00, 0x00, 16); }
        if (op.cequals("pushad"))   { return this._buildNoOperand(0x60, 0x00, 0x00, 32); }
        if (op.cequals("pushal"))   { return this._buildNoOperand(0x60, 0x00, 0x00, 32); }
        if (op.cequals("popa"))     { return this._buildNoOperand(0x61, 0x00, 0x00,  0); }
        if (op.cequals("popaw"))    { return this._buildNoOperand(0x61, 0x00, 0x00, 16); }
        if (op.cequals("popad"))    { return this._buildNoOperand(0x61, 0x00, 0x00, 32); }
        if (op.cequals("popal"))    { return this._buildNoOperand(0x61, 0x00, 0x00, 32); }
        if (op.cequals("pushf"))    { return this._buildNoOperand(0x9C, 0x00, 0x00,  0); }
        if (op.cequals("pushfw"))   { return this._buildNoOperand(0x9C, 0x00, 0x00, 16); }
        if (op.cequals("pushfd"))   { return this._buildNoOperand(0x9C, 0x00, 0x00, 32); }
        if (op.cequals("pushfl"))   { return this._buildNoOperand(0x9C, 0x00, 0x00, 32); }
        if (op.cequals("popf"))     { return this._buildNoOperand(0x9D, 0x00, 0x00,  0); }
        if (op.cequals("popfw"))    { return this._buildNoOperand(0x9D, 0x00, 0x00, 16); }
        if (op.cequals("popfd"))    { return this._buildNoOperand(0x9D, 0x00, 0x00, 32); }
        if (op.cequals("popfl"))    { return this._buildNoOperand(0x9D, 0x00, 0x00, 32); }
        if (op.cequals("lodsb"))    { return this._buildNoOperand(0xAC, 0x00, 0x00,  8); }
        if (op.cequals("lodsw"))    { return this._buildNoOperand(0xAD, 0x00, 0x00, 16); }
        if (op.cequals("lodsd"))    { return this._buildNoOperand(0xAD, 0x00, 0x00, 32); }
        if (op.cequals("lodsl"))    { return this._buildNoOperand(0xAD, 0x00, 0x00, 32); }
        if (op.cequals("clc"))      { return this._buildNoOperand(0xF8, 0x00, 0x00,  0); }
        if (op.cequals("cld"))      { return this._buildNoOperand(0xFC, 0x00, 0x00,  0); }
        if (op.cequals("cli"))      { return this._buildNoOperand(0xFA, 0x00, 0x00,  0); }
        if (op.cequals("clts"))     { return this._buildNoOperand(0x0F, 0x06, 0x00,  0); }
        if (op.cequals("stc"))      { return this._buildNoOperand(0xF9, 0x00, 0x00,  0); }
        if (op.cequals("std"))      { return this._buildNoOperand(0xFD, 0x00, 0x00,  0); }
        if (op.cequals("sti"))      { return this._buildNoOperand(0xFB, 0x00, 0x00,  0); }
        if (op.cequals("hlt"))      { return this._buildNoOperand(0xF4, 0x00, 0x00,  0); }
        if (op.cequals("nop"))      { return this._buildNoOperand(0x90, 0x00, 0x00,  0); }
        if (op.cequals("int0"))     { return this._buildNoOperand(0xCE, 0x00, 0x00,  0); }
        if (op.cequals("int1"))     { return this._buildNoOperand(0xF1, 0x00, 0x00,  0); }
        if (op.cequals("int3"))     { return this._buildNoOperand(0xCC, 0x00, 0x00,  0); }
        if (op.cequals("leave"))    { return this._buildNoOperand(0xC9, 0x00, 0x00,  0); }
        if (op.cequals("ret"))      { return this._buildNoOperand(0xC3, 0x00, 0x00,  0); }
        if (op.cequals("iret"))     { return this._buildNoOperand(0xCF, 0x00, 0x00,  0); }
        
        unit.newError().printCString("unknown instruction: '").print(op).printChar('\'');
        return null;
    }
    
    [Instruction] _buildInline(int size, int skip) {
        Inline i = this.rt().createInstance(Inline:CLASSNAME);
        i.setOperandSize(size);
        i.setSkipValidation(skip);
        return i.instruction();
    } 
    
    [Instruction] _buildMove(int size) {
        Move i = this.rt().createInstance(Move:CLASSNAME);
        i.setOperandSize(size);
        return i.instruction();
    } 
    
    [Instruction] _buildNoOperand(int op1, int op2, int op3, int size) {
        NoOperand i = this.rt().createInstance(NoOperand:CLASSNAME);
        i.setOperandSize(size);
        i.setOperation(op1, op2, op3);
        return i.instruction();
    }
     
    [Instruction] _buildNothing() {
        Nothing i = this.rt().createInstance(Nothing:CLASSNAME);
        return i.instruction();
    } 
}
