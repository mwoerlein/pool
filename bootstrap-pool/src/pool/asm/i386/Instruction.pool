/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386;

use pool::asm::CompilationUnit;
use pool::asm::Value;
use pool::asm::value::NumericValue;
use pool::asm::i386::value::IndirectValue;

use sys::core::utils::Bitset;
use sys::stream::OStream;

class Instruction extends pool::asm::Instruction {

    int pre1; int pre2; int pre3; int pre4;
    int op1; int op2; int op3;
    
    int addr; int data; int operandSize;
    int pos; int preparePos;
    int immSize; int modrmSize; int sibSize; int dispSize;
    int size;
    
    [Instruction] setOperation(int op1, int op2, int op3) {
        this.op1 = op1;
        this.op2 = op2;
        this.op3 = op3;
        return this;
    }
    
    [Instruction] setOperandSize(int size) {
        operandSize = size;
        return this;
    }
    
    [int] prepare(int pos) {
        this.pos = this.preparePos = pos;
        int mode = block.getMode();
        addr = node.getAddr(mode);
        data = node.getData(mode);
        immSize = 0;
        
        // TODO: prepare prefix nodes
        if (node.getPrefix()) { this.newError().printCString("Unexpected prefix: ").print(node.getPrefix()); }
        this.checkOperands();
        if (block.getUnit().hasErrors()) { return this.size = 0; }
        
        if (o1) { o1 = o1.resolve(block); }
        if (o2) { o2 = o2.resolve(block); }
        if (o3) { o3 = o3.resolve(block); }
        if (block.getUnit().hasErrors()) { return this.size = 0; }
        
        this.prepareInstruction();
        if (block.getUnit().hasErrors()) { return this.size = 0; }
        return this.size = this.approximateSize();
    }
    
    [] checkOperands() {}

    [] prepareInstruction() {}
    
    [int] approximateSize() {
        // TODO: approximate specific instruction size
        // 4xpre 3xop 1xmodrm 1xsib 4xdisp 4ximm
        return 17;
    }
    
    [int] compile(int pos) {
        this.pos = pos;
        
        if (data != 0 && data != 8 && data != 16 && data != 32) {
            this.newError().printCString("invalid data: ").printInt(data);
        }
        if (addr != 0 && addr != 8 && addr != 16 && addr != 32) {
            this.newError().printCString("invalid addr: ").printInt(addr);
        }
        if (operandSize != 0 && operandSize != 8 && operandSize != 16 && operandSize != 32) {
            this.newError().printCString("invalid operandSize: ").printInt(operandSize);
        }
        if (block.getUnit().hasErrors()) { return this.size = 0; }
        
        this.size = this.compileInstruction();
        if (block.getUnit().hasErrors()) { return this.size = 0; }
        return this.size;
    }
    
    [int] compileInstruction() {
        return this.approximateSize();
    }
    
    [] finalize(int startAddress) {
        pos += startAddress;
    }
    
    [int] getStart() { return pos; }
    [int] getEnd() { return pos + size; }
    
    [] useIndirectSizes(IndirectValue i) {
        modrmSize = i.getModRMSize();
        sibSize = i.getSibSize();
        dispSize = i.getDispSize();
    }
    
    [int] requiresOperandSizeOverride(int operandSize) {
        return (operandSize == 16 && data == 32) || (operandSize == 32 && data == 16);
    }
    
    [int] requiresAddressSizeOverride(int addressSize) {
        int mode = block.getMode();
        return (addressSize == 16 && mode == 32) || (addressSize == 32 && mode == 16);
    }
    
    [int] getBitWidth(int value) {
        if (-128 <= value && value <= 127) { return 8; }
        if (-32768 <= value && value <= 32767) { return 16; }
        return 32;
    }
    
    [int] getUnsignedBitWidth(int value) {
        if (value < 0) { return 32; }
        if (value <= 255) { return 8; }
        if (value <= 65535) { return 16; }
        return 32;
    }
    
    [int] approximateOffset(int position, int posIncr) {
        if (position > (pos + size)) {
            return position - preparePos - posIncr;
        } else {
            return position - pos - posIncr;
        }
    }
    
    [OStream] rawToStream(OStream stream) {
        this.rawOperationToStream(stream);
        return this.rawOperandsToStream(stream);
    }
    
    [OStream] rawOperationToStream(OStream stream) {
        if (pre1) { stream.printChar(pre1); }
        if (pre2) { stream.printChar(pre2); }
        if (pre3) { stream.printChar(pre3); }
        if (pre4) { stream.printChar(pre4); }
        stream.printChar(op1);
        if (op1 == 0x0F) {
            stream.printChar(op2);
            if (op2 == 0x38 || op2 == 0x3A) {
                stream.printChar(op3);
            }
        }
        return stream;
    }
    
    [OStream] rawOperandsToStream(OStream stream) { return stream; }
    
    [OStream] rawValueToStream(OStream stream, int val, int bytes) {
        if (bytes == 1) {
            return stream
                .printChar(Bitset:and(val, 0xff));
        } else if (bytes == 2) {
            return stream
                .printChar(Bitset:and(val, 0xff))
                .printChar(Bitset:and(Bitset:rshift(val,  8), 0xff));
        } else if (bytes == 4) {
            return stream
                .printChar(Bitset:and(val, 0xff))
                .printChar(Bitset:and(Bitset:rshift(val,  8), 0xff))
                .printChar(Bitset:and(Bitset:rshift(val, 16), 0xff))
                .printChar(Bitset:and(Bitset:rshift(val, 24), 0xff));
        }
        return stream;
    }

    [OStream] rawImmediateToStream(OStream stream, NumericValue num) {
        if (num) { this.rawValueToStream(stream, num.getValue(), immSize); }
        return stream;
    }
    
    [OStream] rawOffsetToStream(OStream stream, NumericValue num) {
        if (num) { this.rawValueToStream(stream, num.getValue() - this.getEnd(), immSize); }
        return stream;
    }
    
    [OStream] rawModRMToStream(OStream stream, int regO, int regM) {
        if (modrmSize) { stream.printChar(IndirectValue:ModRM(3, regO, regM)); }
        return stream;
    }
    
    [OStream] rawIndirectToStream(OStream stream, IndirectValue i, int reg) {
        if (modrmSize) { stream.printChar(i.getModRM(reg)); }
        if (sibSize) { stream.printChar(i.getSib()); }
        if (dispSize) { this.rawValueToStream(stream, i.getDispValue(), dispSize); }
        return stream;
    }
}
