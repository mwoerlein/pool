/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm;

class Tokenizer extends pool::generator::tokenizer::Tokenizer {

    int T_ERROR := -2;
    int T_IDENTIFIER := 0;
    int T_REGISTER := 1;
    int T_CHAR := 2;
    int T_STRING := 3;
    int T_NUMBER := 4;
    int T_NEWLINE := 5;
    int T_SPACER := 6;
    int T_COMMENT := 7;
    int T_MLCOMMENT := 8;
    int T_OPERATOR := 9;
    int T_ASSIGN := 10;
    int T_COLON := 11;
    int T_OBRACKET := 12;
    int T_CBRACKET := 13;
    int T_SEMICOLON := 14;
    int T_COMMA := 15;

    [sys::stream::OStream] debugSymbol(int symbol, sys::stream::OStream stream) {
        if (symbol == Tokenizer:T_EOI) { stream.printCString("EOI"); }
        else if (symbol == Tokenizer:T_ERROR) { stream.printCString("ERROR"); }
        else if (symbol == Tokenizer:T_IDENTIFIER) { stream.printCString("IDENTIFIER"); }
        else if (symbol == Tokenizer:T_REGISTER) { stream.printCString("REGISTER"); }
        else if (symbol == Tokenizer:T_CHAR) { stream.printCString("CHAR"); }
        else if (symbol == Tokenizer:T_STRING) { stream.printCString("STRING"); }
        else if (symbol == Tokenizer:T_NUMBER) { stream.printCString("NUMBER"); }
        else if (symbol == Tokenizer:T_NEWLINE) { stream.printCString("NEWLINE"); }
        else if (symbol == Tokenizer:T_SPACER) { stream.printCString("SPACER"); }
        else if (symbol == Tokenizer:T_COMMENT) { stream.printCString("COMMENT"); }
        else if (symbol == Tokenizer:T_MLCOMMENT) { stream.printCString("MLCOMMENT"); }
        else if (symbol == Tokenizer:T_OPERATOR) { stream.printCString("OPERATOR"); }
        else if (symbol == Tokenizer:T_ASSIGN) { stream.printCString("ASSIGN"); }
        else if (symbol == Tokenizer:T_COLON) { stream.printCString("COLON"); }
        else if (symbol == Tokenizer:T_OBRACKET) { stream.printCString("OBRACKET"); }
        else if (symbol == Tokenizer:T_CBRACKET) { stream.printCString("CBRACKET"); }
        else if (symbol == Tokenizer:T_SEMICOLON) { stream.printCString("SEMICOLON"); }
        else if (symbol == Tokenizer:T_COMMA) { stream.printCString("COMMA"); }
        return stream;
    }

    [int] _detectToken() {
        int state = 0;
        while (!input.isEmpty()) {
            int c = input.peekChar();
            if (state == 0) {
                if ((c == 9) || (c == 32)) { this._consume(); state = 1; }
                else if ((c == 10) || (c == 13)) { this._consume(); state = 2; }
                else if (c == 34) { this._consume(); state = 3; }
                else if (c == 35) { this._consume(); state = 4; }
                else if (c == 37) { this._consume(); state = 5; }
                else if (c == 39) { this._consume(); state = 6; }
                else if (c == 40) { this._consume(); state = 7; }
                else if (c == 41) { this._consume(); state = 8; }
                else if (c == 42) { this._consume(); state = 9; }
                else if (c == 43) { this._consume(); state = 10; }
                else if (c == 44) { this._consume(); state = 11; }
                else if (c == 45) { this._consume(); state = 12; }
                else if (c == 46) { this._consume(); state = 13; }
                else if (c == 47) { this._consume(); state = 14; }
                else if (c == 48) { this._consume(); state = 15; }
                else if (((c >= 49) && (c <= 57))) { this._consume(); state = 16; }
                else if (c == 58) { this._consume(); state = 17; }
                else if (c == 59) { this._consume(); state = 18; }
                else if (c == 60) { this._consume(); state = 19; }
                else if (c == 62) { this._consume(); state = 20; }
                else if (((c >= 65) && (c <= 90)) || (c == 95) || ((c >= 97) && (c <= 122))) { this._consume(); state = 21; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 1) {
                if ((c == 9) || (c == 32)) { this._consume(); state = 1; }
                else { return this._buildNextToken(Tokenizer:T_SPACER); }
            } else if (state == 2) {
                if ((c == 10) || (c == 13)) { this._consume(); state = 2; }
                else { return this._buildNextToken(Tokenizer:T_NEWLINE); }
            } else if (state == 3) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 33)) || ((c >= 35) && (c <= 91)) || ((c >= 93) && (c <= 255))) { this._consume(); state = 22; }
                else if (c == 34) { this._consume(); state = 23; }
                else if (c == 92) { this._consume(); state = 24; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 4) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 255))) { this._consume(); state = 25; }
                else { return this._buildNextToken(Tokenizer:T_COMMENT); }
            } else if (state == 5) {
                if (((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) { this._consume(); state = 26; }
                else { return this._buildNextToken(Tokenizer:T_OPERATOR); }
            } else if (state == 6) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 38)) || ((c >= 40) && (c <= 91)) || ((c >= 93) && (c <= 255))) { this._consume(); state = 27; }
                else if (c == 39) { this._consume(); state = 28; }
                else if (c == 92) { this._consume(); state = 29; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 7) {
                { return this._buildNextToken(Tokenizer:T_OBRACKET); }
            } else if (state == 8) {
                { return this._buildNextToken(Tokenizer:T_CBRACKET); }
            } else if (state == 9) {
                { return this._buildNextToken(Tokenizer:T_OPERATOR); }
            } else if (state == 10) {
                { return this._buildNextToken(Tokenizer:T_OPERATOR); }
            } else if (state == 11) {
                { return this._buildNextToken(Tokenizer:T_COMMA); }
            } else if (state == 12) {
                if (c == 48) { this._consume(); state = 15; }
                else if (((c >= 49) && (c <= 57))) { this._consume(); state = 16; }
                else { return this._buildNextToken(Tokenizer:T_OPERATOR); }
            } else if (state == 13) {
                if (((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c == 95) || ((c >= 97) && (c <= 122))) { this._consume(); state = 30; }
                else { return this._buildNextToken(Tokenizer:T_IDENTIFIER); }
            } else if (state == 14) {
                if (c == 42) { this._consume(); state = 31; }
                else if (c == 47) { this._consume(); state = 32; }
                else { return this._buildNextToken(Tokenizer:T_OPERATOR); }
            } else if (state == 15) {
                if (((c >= 48) && (c <= 55))) { this._consume(); state = 33; }
                else if ((c == 66) || (c == 98)) { this._consume(); state = 34; }
                else if ((c == 88) || (c == 120)) { this._consume(); state = 35; }
                else { return this._buildNextToken(Tokenizer:T_NUMBER); }
            } else if (state == 16) {
                if (((c >= 48) && (c <= 57))) { this._consume(); state = 36; }
                else { return this._buildNextToken(Tokenizer:T_NUMBER); }
            } else if (state == 17) {
                if (c == 61) { this._consume(); state = 37; }
                else { return this._buildNextToken(Tokenizer:T_COLON); }
            } else if (state == 18) {
                { return this._buildNextToken(Tokenizer:T_SEMICOLON); }
            } else if (state == 19) {
                if (c == 60) { this._consume(); state = 38; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 20) {
                if (c == 62) { this._consume(); state = 39; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 21) {
                if (((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c == 95) || ((c >= 97) && (c <= 122))) { this._consume(); state = 30; }
                else { return this._buildNextToken(Tokenizer:T_IDENTIFIER); }
            } else if (state == 22) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 33)) || ((c >= 35) && (c <= 91)) || ((c >= 93) && (c <= 255))) { this._consume(); state = 22; }
                else if (c == 34) { this._consume(); state = 23; }
                else if (c == 92) { this._consume(); state = 24; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 23) {
                { return this._buildNextToken(Tokenizer:T_STRING); }
            } else if (state == 24) {
                if (((c >= 0) && (c <= 8)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 255))) { this._consume(); state = 40; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 25) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 255))) { this._consume(); state = 25; }
                else { return this._buildNextToken(Tokenizer:T_COMMENT); }
            } else if (state == 26) {
                if (((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c == 95) || ((c >= 97) && (c <= 122))) { this._consume(); state = 41; }
                else { return this._buildNextToken(Tokenizer:T_REGISTER); }
            } else if (state == 27) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 38)) || ((c >= 40) && (c <= 91)) || ((c >= 93) && (c <= 255))) { this._consume(); state = 27; }
                else if (c == 39) { this._consume(); state = 28; }
                else if (c == 92) { this._consume(); state = 29; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 28) {
                { return this._buildNextToken(Tokenizer:T_CHAR); }
            } else if (state == 29) {
                if (((c >= 0) && (c <= 8)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 255))) { this._consume(); state = 42; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 30) {
                if (((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c == 95) || ((c >= 97) && (c <= 122))) { this._consume(); state = 30; }
                else { return this._buildNextToken(Tokenizer:T_IDENTIFIER); }
            } else if (state == 31) {
                if (((c >= 0) && (c <= 41)) || ((c >= 43) && (c <= 255))) { this._consume(); state = 43; }
                else if (c == 42) { this._consume(); state = 44; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 32) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 255))) { this._consume(); state = 25; }
                else { return this._buildNextToken(Tokenizer:T_COMMENT); }
            } else if (state == 33) {
                if (((c >= 48) && (c <= 55))) { this._consume(); state = 33; }
                else { return this._buildNextToken(Tokenizer:T_NUMBER); }
            } else if (state == 34) {
                if ((c == 48) || (c == 49)) { this._consume(); state = 45; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 35) {
                if (((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 70)) || ((c >= 97) && (c <= 102))) { this._consume(); state = 46; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 36) {
                if (((c >= 48) && (c <= 57))) { this._consume(); state = 36; }
                else { return this._buildNextToken(Tokenizer:T_NUMBER); }
            } else if (state == 37) {
                { return this._buildNextToken(Tokenizer:T_ASSIGN); }
            } else if (state == 38) {
                { return this._buildNextToken(Tokenizer:T_OPERATOR); }
            } else if (state == 39) {
                { return this._buildNextToken(Tokenizer:T_OPERATOR); }
            } else if (state == 40) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 33)) || ((c >= 35) && (c <= 91)) || ((c >= 93) && (c <= 255))) { this._consume(); state = 22; }
                else if (c == 34) { this._consume(); state = 23; }
                else if (c == 92) { this._consume(); state = 24; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 41) {
                if (((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c == 95) || ((c >= 97) && (c <= 122))) { this._consume(); state = 41; }
                else { return this._buildNextToken(Tokenizer:T_REGISTER); }
            } else if (state == 42) {
                if (((c >= 0) && (c <= 9)) || (c == 11) || (c == 12) || ((c >= 14) && (c <= 38)) || ((c >= 40) && (c <= 91)) || ((c >= 93) && (c <= 255))) { this._consume(); state = 27; }
                else if (c == 39) { this._consume(); state = 28; }
                else if (c == 92) { this._consume(); state = 29; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 43) {
                if (((c >= 0) && (c <= 41)) || ((c >= 43) && (c <= 255))) { this._consume(); state = 43; }
                else if (c == 42) { this._consume(); state = 44; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 44) {
                if (((c >= 0) && (c <= 41)) || ((c >= 43) && (c <= 46)) || ((c >= 48) && (c <= 255))) { this._consume(); state = 47; }
                else if (c == 42) { this._consume(); state = 44; }
                else if (c == 47) { this._consume(); state = 48; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 45) {
                if ((c == 48) || (c == 49)) { this._consume(); state = 45; }
                else { return this._buildNextToken(Tokenizer:T_NUMBER); }
            } else if (state == 46) {
                if (((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 70)) || ((c >= 97) && (c <= 102))) { this._consume(); state = 46; }
                else { return this._buildNextToken(Tokenizer:T_NUMBER); }
            } else if (state == 47) {
                if (((c >= 0) && (c <= 41)) || ((c >= 43) && (c <= 255))) { this._consume(); state = 49; }
                else if (c == 42) { this._consume(); state = 50; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 48) {
                { return this._buildNextToken(Tokenizer:T_MLCOMMENT); }
            } else if (state == 49) {
                if (((c >= 0) && (c <= 41)) || ((c >= 43) && (c <= 255))) { this._consume(); state = 49; }
                else if (c == 42) { this._consume(); state = 50; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 50) {
                if (((c >= 0) && (c <= 41)) || ((c >= 43) && (c <= 46)) || ((c >= 48) && (c <= 255))) { this._consume(); state = 47; }
                else if (c == 42) { this._consume(); state = 50; }
                else if (c == 47) { this._consume(); state = 48; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else {
                this.rt().err().printCString("Unexpected state: ").printInt(state).printNewline();
                return false;
            }
        }

        if (state == 1) { return this._buildNextToken(Tokenizer:T_SPACER); }
        else if (state == 2) { return this._buildNextToken(Tokenizer:T_NEWLINE); }
        else if (state == 3) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 4) { return this._buildNextToken(Tokenizer:T_COMMENT); }
        else if (state == 5) { return this._buildNextToken(Tokenizer:T_OPERATOR); }
        else if (state == 6) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 7) { return this._buildNextToken(Tokenizer:T_OBRACKET); }
        else if (state == 8) { return this._buildNextToken(Tokenizer:T_CBRACKET); }
        else if (state == 9) { return this._buildNextToken(Tokenizer:T_OPERATOR); }
        else if (state == 10) { return this._buildNextToken(Tokenizer:T_OPERATOR); }
        else if (state == 11) { return this._buildNextToken(Tokenizer:T_COMMA); }
        else if (state == 12) { return this._buildNextToken(Tokenizer:T_OPERATOR); }
        else if (state == 13) { return this._buildNextToken(Tokenizer:T_IDENTIFIER); }
        else if (state == 14) { return this._buildNextToken(Tokenizer:T_OPERATOR); }
        else if (state == 15) { return this._buildNextToken(Tokenizer:T_NUMBER); }
        else if (state == 16) { return this._buildNextToken(Tokenizer:T_NUMBER); }
        else if (state == 17) { return this._buildNextToken(Tokenizer:T_COLON); }
        else if (state == 18) { return this._buildNextToken(Tokenizer:T_SEMICOLON); }
        else if (state == 19) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 20) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 21) { return this._buildNextToken(Tokenizer:T_IDENTIFIER); }
        else if (state == 22) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 23) { return this._buildNextToken(Tokenizer:T_STRING); }
        else if (state == 24) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 25) { return this._buildNextToken(Tokenizer:T_COMMENT); }
        else if (state == 26) { return this._buildNextToken(Tokenizer:T_REGISTER); }
        else if (state == 27) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 28) { return this._buildNextToken(Tokenizer:T_CHAR); }
        else if (state == 29) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 30) { return this._buildNextToken(Tokenizer:T_IDENTIFIER); }
        else if (state == 31) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 32) { return this._buildNextToken(Tokenizer:T_COMMENT); }
        else if (state == 33) { return this._buildNextToken(Tokenizer:T_NUMBER); }
        else if (state == 34) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 35) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 36) { return this._buildNextToken(Tokenizer:T_NUMBER); }
        else if (state == 37) { return this._buildNextToken(Tokenizer:T_ASSIGN); }
        else if (state == 38) { return this._buildNextToken(Tokenizer:T_OPERATOR); }
        else if (state == 39) { return this._buildNextToken(Tokenizer:T_OPERATOR); }
        else if (state == 40) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 41) { return this._buildNextToken(Tokenizer:T_REGISTER); }
        else if (state == 42) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 43) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 44) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 45) { return this._buildNextToken(Tokenizer:T_NUMBER); }
        else if (state == 46) { return this._buildNextToken(Tokenizer:T_NUMBER); }
        else if (state == 47) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 48) { return this._buildNextToken(Tokenizer:T_MLCOMMENT); }
        else if (state == 49) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 50) { return this._buildNextToken(Tokenizer:T_ERROR); }
        return false;
    }
}
