/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::grammar;

use pool::generator::Symbol;

use sys::core::anycollection::AnyIterator;
use sys::stream::OStream;

class Factory extends sys::core::Object {

    [GrammarDefinition] definition() { return this.rt().createInstance(GrammarDefinition:CLASSNAME); }
    [Action] action() { return this.rt().createInstance(Action:CLASSNAME); }
    
    [Action] accept() { return this.action().setAccept(); }
    [Action] shift(State s) { return this.action().setShift(s); }
    [Action] reduce(Rule r) { return this.action().setReduce(r); }
    [Action] shiftReduce(Rule r) { return this.action().setShift(null).setReduce(r); }
    
    [Grammar] buildGrammar(GrammarDefinition def, OStream err) {
        Grammar g = this.rt().createInstance(Grammar:CLASSNAME);
        g.setDefinition(def);
        int errors = 0;
        {
            AnyIterator it = def.tokens();
            while (it.hasNext()) {
                Token t = it.next();
                Symbol s = t.getId();
                if (g.hasTerminal(s)) {
                    errors++;
                    err.printCString("duplicate definition for token: ").print(s.getName()).printNewline();
                } else {
                    g.markTerminal(s);
                }
            }
            it.destroy();
        }
        {
            AnyIterator it = def.rules();
            while (it.hasNext()) {
                Rule r = it.next();
                Symbol s = r.getLHS();
                if (g.hasTerminal(s)) {
                    errors++;
                    err.printCString("invalid use as reduction of token: ").print(s.getName()).printNewline();
                } else if (!g.hasNonTerminal(s)) {
                    g.markNonTerminal(s);
                }
            }
            it.destroy();
        }
        {
            AnyIterator it = def.symbols();
            while (it.hasNext()) {
                Symbol s = it.next();
                if (s.getId() != def.getEOI().getId() && !g.hasTerminal(s) && !g.hasNonTerminal(s)) {
                    errors++;
                    err.printCString("undefined symbol: ").print(s.getName()).printNewline();
                }
            }
            it.destroy();
        }
        if (errors > 0) { return null; }
        return g;
    }
    
    /* 
     * use manually built parse grammar for regexes until pool::generator is finalized
     */
    [Grammar] buildRegexGrammar(OStream err) {
        // TODO: parse .gram file to definition
        GrammarDefinition def = this.definition();

        def.setCStringProperty("namespace", "pool::generator::regex");
        def.setCStringProperty("classname", "Parser");
        def.setCStringProperty("extends", "BaseParser");
        def.setCStringProperty("tokenizer", "Tokenizer");
        
        Symbol tEOI         := def.getEOI();
        Symbol tCHAR        := def.getCSymbol("CHAR");
        Symbol tOBRACKET    := def.getCSymbol("OBRACKET");
        Symbol tCBRACKET    := def.getCSymbol("CBRACKET");
        Symbol tOSBRACKET   := def.getCSymbol("OSBRACKET");
        Symbol tCSBRACKET   := def.getCSymbol("CSBRACKET");
        Symbol tQMARK       := def.getCSymbol("QMARK");
        Symbol tSTAR        := def.getCSymbol("STAR");
        Symbol tPLUS        := def.getCSymbol("PLUS");
        Symbol tMINUS       := def.getCSymbol("MINUS");
        Symbol tCFLEX       := def.getCSymbol("CFLEX");
        Symbol tPIPE        := def.getCSymbol("PIPE");
        Symbol tDOT         := def.getCSymbol("DOT");
        Symbol tOTHER       := def.getCSymbol("OTHER");

        Symbol ntEXPRESSION := def.getCSymbol("expression");    
        Symbol ntALTER      := def.getCSymbol("alter");    
        Symbol ntCONCAT     := def.getCSymbol("concat");
        Symbol ntELEM       := def.getCSymbol("elem");
        Symbol ntEXPR       := def.getCSymbol("expr");
        Symbol ntCHARSET    := def.getCSymbol("charset");
        
        def.newToken(tCHAR).setDefinition("/[^\\\\\\(\\)\\[\\]\\?\\*\\+\\-\\^\\|\\.\\/]|\\\\[nrt\\\\\\(\\)\\[\\]\\?\\*\\+\\-\\^\\|\\.\\/]/");
        def.newToken(tOBRACKET).setDefinition("/\\(/");
        def.newToken(tCBRACKET).setDefinition("/\\)/");
        def.newToken(tOSBRACKET).setDefinition("/\\[/");
        def.newToken(tCSBRACKET).setDefinition("/\\]/");
        def.newToken(tQMARK).setDefinition("/\\?/");
        def.newToken(tSTAR).setDefinition("/\\*/");
        def.newToken(tPLUS).setDefinition("/\\+/");
        def.newToken(tMINUS).setDefinition("/\\-/");
        def.newToken(tCFLEX).setDefinition("/\\^/");
        def.newToken(tPIPE).setDefinition("/\\|/");
        def.newToken(tDOT).setDefinition("/\\./");
        def.newToken(tOTHER).setDefinition("/.*/");

        Rule r00 := def.newRule(ntEXPRESSION).addRHS(ntALTER)
            .setCode("{ $$ = this.expression = $1; }");
        Rule r01 := def.newRule(ntEXPRESSION).addRHS(ntCONCAT)
            .setCode("{ $$ = this.expression = $1; }");
        Rule r02 := def.newRule(ntALTER).addRHS(ntCONCAT)
            .setCode("{ $$ = this.listAddNode(this.alter(), this.listToNode($1)); }");
        Rule r03 := def.newRule(ntALTER).addRHS(ntALTER).addRHS(tPIPE).addRHS(ntCONCAT)
            .setCode("{ $$ = this.listAddNode($1, this.listToNode($3)); }");
        Rule r04 := def.newRule(ntCONCAT).addRHS(ntELEM)
            .setCode("{ $$ = this.listAddNode(this.concat(), $1); }");
        Rule r05 := def.newRule(ntCONCAT).addRHS(ntCONCAT).addRHS(ntELEM)
            .setCode("{ $$ = this.listAddNode($1, $2); }");
        Rule r06 := def.newRule(ntELEM).addRHS(ntEXPR)
            .setCode("{ $$ = $1; }");
        Rule r07 := def.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tQMARK)
            .setCode("{ $$ = this.atMostOnce($1); }");
        Rule r08 := def.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tSTAR)
            .setCode("{ $$ = this.any($1); }");
        Rule r09 := def.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tPLUS)
            .setCode("{ $$ = this.atLeastOnce($1); }");
        Rule r10 := def.newRule(ntEXPR).addRHS(tDOT)
            .setCode("{ $$ = this.all(); }");
        Rule r11 := def.newRule(ntEXPR).addRHS(tCHAR)
            .setCode("{ $$ = this.single(this.toChar($1)); }");
        Rule r12 := def.newRule(ntEXPR).addRHS(tOSBRACKET).addRHS(ntCHARSET).addRHS(tCSBRACKET)
            .setCode("{ $$ = this.csToNode($2); }");
        Rule r13 := def.newRule(ntEXPR).addRHS(tOSBRACKET).addRHS(tCFLEX).addRHS(ntCHARSET).addRHS(tCSBRACKET)
            .setCode("{ $$ = this.csToExclusiveNode($3); }");
        Rule r14 := def.newRule(ntEXPR).addRHS(tOBRACKET).addRHS(ntALTER).addRHS(tCBRACKET)
            .setCode("{ $$ = this.listToNode($2); }");
        Rule r15 := def.newRule(ntCHARSET).addRHS(tCHAR)
            .setCode("{ $$ = this.csAddChar(this.cs(), this.toChar($1)); }");
        Rule r16 := def.newRule(ntCHARSET).addRHS(tCHAR).addRHS(tMINUS).addRHS(tCHAR)
            .setCode("{ $$ = this.csAddRange(this.cs(), this.toChar($1), this.toChar($3)); }");
        Rule r17 := def.newRule(ntCHARSET).addRHS(ntCHARSET).addRHS(tCHAR)
            .setCode("{ $$ = this.csAddChar($1, this.toChar($2)); }");
        Rule r18 := def.newRule(ntCHARSET).addRHS(ntCHARSET).addRHS(tCHAR).addRHS(tMINUS).addRHS(tCHAR)
            .setCode("{ $$ = this.csAddRange($1, this.toChar($2), this.toChar($4)); }");

        Grammar d = this.buildGrammar(def, err);

        // TODO: generate states/actions/gotos from rules
        State sEMPTY := d.newInitState();
        State sExpression := d.newState();
        State sExpr := d.newState();
        State sElem := d.newState();
        State sConcat := d.newState();
        State sAlter := d.newState();
        State sAlterPipe := d.newState();
        State sAlterPipeConcat := d.newState();
        State sOBracket := d.newState();
        State sOBracketExpr := d.newState();
        State sOBracketElem := d.newState();
        State sOBracketConcat := d.newState();
        State sOBracketAlter := d.newState();
        State sOBracketAlterPipe := d.newState();
        State sOBracketAlterPipeConcat := d.newState();
        State sOSBracket := d.newState();
        State sOSBracketCharset := d.newState();
        State sOSBracketCFlex := d.newState();
        State sOSBracketCFlexCharset := d.newState();
        State sChar := d.newState();
        State sCharMinus := d.newState();
        State sCharsetChar := d.newState();
        State sCharsetCharMinus := d.newState();
        State sReduceRule05 := d.newState();
        
        sEMPTY.addAction(tDOT, this.shiftReduce(r10));
        sEMPTY.addAction(tCHAR, this.shiftReduce(r11));
        sEMPTY.addAction(tOBRACKET, this.shift(sOBracket));
        sEMPTY.addAction(tOSBRACKET, this.shift(sOSBracket));
        sEMPTY.addGoto(ntEXPRESSION, sExpression);
        sEMPTY.addGoto(ntEXPR, sExpr);
        sEMPTY.addGoto(ntELEM, sElem);
        sEMPTY.addGoto(ntCONCAT, sConcat);
        sEMPTY.addGoto(ntALTER, sAlter);
        
        sExpression.addAction(tEOI, this.accept());
        
        sExpr.addAction(tEOI, this.reduce(r06));
        sExpr.addAction(tPIPE, this.reduce(r06));
        sExpr.addAction(tDOT, this.reduce(r06));
        sExpr.addAction(tCHAR, this.reduce(r06));
        sExpr.addAction(tOBRACKET, this.reduce(r06));
        sExpr.addAction(tOSBRACKET, this.reduce(r06));
        sExpr.addAction(tQMARK, this.shiftReduce(r07));
        sExpr.addAction(tSTAR, this.shiftReduce(r08));
        sExpr.addAction(tPLUS, this.shiftReduce(r09));
        
        sElem.addAction(tEOI, this.reduce(r04));
        sElem.addAction(tPIPE, this.reduce(r04));
        sElem.addAction(tDOT, this.reduce(r04));
        sElem.addAction(tCHAR, this.reduce(r04));
        sElem.addAction(tOBRACKET, this.reduce(r04));
        sElem.addAction(tOSBRACKET, this.reduce(r04));
        
        sConcat.addAction(tEOI, this.reduce(r01));
        sConcat.addAction(tPIPE, this.reduce(r02));
        sConcat.addAction(tDOT, this.shiftReduce(r10));
        sConcat.addAction(tCHAR, this.shiftReduce(r11));
        sConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sConcat.addGoto(ntEXPR, sExpr);
        sConcat.addGoto(ntELEM, sReduceRule05);
        
        sAlter.addAction(tEOI, this.reduce(r00));
        sAlter.addAction(tPIPE, this.shift(sAlterPipe));
        
        sAlterPipe.addAction(tDOT, this.shiftReduce(r10));
        sAlterPipe.addAction(tCHAR, this.shiftReduce(r11));
        sAlterPipe.addAction(tOBRACKET, this.shift(sOBracket));
        sAlterPipe.addAction(tOSBRACKET, this.shift(sOSBracket));
        sAlterPipe.addGoto(ntEXPR, sExpr);
        sAlterPipe.addGoto(ntELEM, sElem);
        sAlterPipe.addGoto(ntCONCAT, sAlterPipeConcat);
        
        sAlterPipeConcat.addAction(tEOI, this.reduce(r03));
        sAlterPipeConcat.addAction(tPIPE, this.reduce(r03));
        sAlterPipeConcat.addAction(tDOT, this.shiftReduce(r10));
        sAlterPipeConcat.addAction(tCHAR, this.shiftReduce(r11));
        sAlterPipeConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sAlterPipeConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sAlterPipeConcat.addGoto(ntEXPR, sExpr);
        sAlterPipeConcat.addGoto(ntELEM, sReduceRule05);
        
        sOBracket.addAction(tDOT, this.shiftReduce(r10));
        sOBracket.addAction(tCHAR, this.shiftReduce(r11));
        sOBracket.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracket.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracket.addGoto(ntEXPR, sOBracketExpr);
        sOBracket.addGoto(ntELEM, sOBracketElem);
        sOBracket.addGoto(ntCONCAT, sOBracketConcat);
        sOBracket.addGoto(ntALTER, sOBracketAlter);

        sOBracketAlter.addAction(tCBRACKET, this.shiftReduce(r14));
        sOBracketAlter.addAction(tPIPE, this.shift(sOBracketAlterPipe));
        
        sOBracketConcat.addAction(tCBRACKET, this.reduce(r02));
        sOBracketConcat.addAction(tPIPE, this.reduce(r02));
        sOBracketConcat.addAction(tDOT, this.shiftReduce(r10));
        sOBracketConcat.addAction(tCHAR, this.shiftReduce(r11));
        sOBracketConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracketConcat.addGoto(ntEXPR, sOBracketExpr);
        sOBracketConcat.addGoto(ntELEM, sReduceRule05);
        
        sOBracketElem.addAction(tCBRACKET, this.reduce(r04));
        sOBracketElem.addAction(tPIPE, this.reduce(r04));
        sOBracketElem.addAction(tDOT, this.reduce(r04));
        sOBracketElem.addAction(tCHAR, this.reduce(r04));
        sOBracketElem.addAction(tOBRACKET, this.reduce(r04));
        sOBracketElem.addAction(tOSBRACKET, this.reduce(r04));
        
        sOBracketExpr.addAction(tCBRACKET, this.reduce(r06));
        sOBracketExpr.addAction(tPIPE, this.reduce(r06));
        sOBracketExpr.addAction(tDOT, this.reduce(r06));
        sOBracketExpr.addAction(tCHAR, this.reduce(r06));
        sOBracketExpr.addAction(tOBRACKET, this.reduce(r06));
        sOBracketExpr.addAction(tOSBRACKET, this.reduce(r06));
        sOBracketExpr.addAction(tQMARK, this.shiftReduce(r07));
        sOBracketExpr.addAction(tSTAR, this.shiftReduce(r08));
        sOBracketExpr.addAction(tPLUS, this.shiftReduce(r09));
        
        sOBracketAlterPipe.addAction(tDOT, this.shiftReduce(r10));
        sOBracketAlterPipe.addAction(tCHAR, this.shiftReduce(r11));
        sOBracketAlterPipe.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketAlterPipe.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracketAlterPipe.addGoto(ntEXPR, sOBracketExpr);
        sOBracketAlterPipe.addGoto(ntELEM, sOBracketElem);
        sOBracketAlterPipe.addGoto(ntCONCAT, sOBracketAlterPipeConcat);
        
        sOBracketAlterPipeConcat.addAction(tCBRACKET, this.reduce(r03));
        sOBracketAlterPipeConcat.addAction(tPIPE, this.reduce(r03));
        sOBracketAlterPipeConcat.addAction(tDOT, this.shiftReduce(r10));
        sOBracketAlterPipeConcat.addAction(tCHAR, this.shiftReduce(r11));
        sOBracketAlterPipeConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketAlterPipeConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracketAlterPipeConcat.addGoto(ntEXPR, sOBracketExpr);
        sOBracketAlterPipeConcat.addGoto(ntELEM, sReduceRule05);
        
        sOSBracket.addAction(tCHAR, this.shift(sChar));
        sOSBracket.addAction(tCFLEX, this.shift(sOSBracketCFlex));
        sOSBracket.addGoto(ntCHARSET, sOSBracketCharset);
        sOSBracketCharset.addAction(tCHAR, this.shift(sCharsetChar));
        sOSBracketCharset.addAction(tCSBRACKET, this.shiftReduce(r12));
        
        sOSBracketCFlex.addAction(tCHAR, this.shift(sChar));
        sOSBracketCFlex.addGoto(ntCHARSET, sOSBracketCFlexCharset);
        sOSBracketCFlexCharset.addAction(tCHAR, this.shift(sCharsetChar));
        sOSBracketCFlexCharset.addAction(tCSBRACKET, this.shiftReduce(r13));
        
        sChar.addAction(tCHAR, this.reduce(r15));
        sChar.addAction(tCSBRACKET, this.reduce(r15));
        sChar.addAction(tMINUS, this.shift(sCharMinus));
        sCharMinus.addAction(tCHAR, this.shiftReduce(r16));
        
        sCharsetChar.addAction(tCHAR, this.reduce(r17));
        sCharsetChar.addAction(tCSBRACKET, this.reduce(r17));
        sCharsetChar.addAction(tMINUS, this.shift(sCharsetCharMinus));
        sCharsetCharMinus.addAction(tCHAR, this.shiftReduce(r18));

        sReduceRule05.setDefaultAction(this.reduce(r05));
        
        return d;
    }
    
    /* 
     * use manually built parser grammar for pasm until pool::generator is finalized
     */
    [Grammar] buildPasmGrammar(OStream err) {
        // TODO: parse .gram file to definition
        GrammarDefinition def = this.definition();
        
        def.setCStringProperty("namespace", "pool::asm");
        def.setCStringProperty("classname", "Parser");
        def.setCStringProperty("extends", "BaseParser");
        def.setCStringProperty("tokenizer", "Tokenizer");
        
        Symbol tEOI          := def.getEOI();
        Symbol tOTHER        := def.getCSymbol("OTHER");
        Symbol tIDENTIFIER   := def.getCSymbol("IDENTIFIER");
        Symbol tREGISTER     := def.getCSymbol("REGISTER");
        Symbol tCHAR         := def.getCSymbol("CHAR");
        Symbol tSTRING       := def.getCSymbol("STRING");
        Symbol tNUMBER       := def.getCSymbol("NUMBER");
        Symbol tNEWLINE      := def.getCSymbol("NEWLINE");
        Symbol tSPACER       := def.getCSymbol("SPACER").setIgnore(true);
        Symbol tCOMMENT      := def.getCSymbol("COMMENT").setIgnore(true);
        Symbol tMLCOMMENT    := def.getCSymbol("MLCOMMENT").setIgnore(true);
        Symbol tOPERATOR     := def.getCSymbol("OPERATOR");
        Symbol tASSIGN       := def.getCSymbol("ASSIGN");
        Symbol tOBRACKET     := def.getCSymbol("OBRACKET");
        Symbol tCBRACKET     := def.getCSymbol("CBRACKET");
        Symbol tCOLON        := def.getCSymbol("COLON");
        Symbol tSEMICOLON    := def.getCSymbol("SEMICOLON");
        Symbol tCOMMA        := def.getCSymbol("COMMA");
        
        Symbol ntUNIT        := def.getCSymbol("compilation_unit");    
        Symbol ntLABEL       := def.getCSymbol("label");
        Symbol ntDEFINITION  := def.getCSymbol("definition");
        Symbol ntINSTRUCTION := def.getCSymbol("instruction");
        Symbol ntEOL         := def.getCSymbol("eol");
        Symbol ntOPERAND     := def.getCSymbol("operand");
        Symbol ntINDIRECT    := def.getCSymbol("indirect");
        Symbol ntFORMULA     := def.getCSymbol("formula");
        
        def.newToken(tIDENTIFIER).setDefinition("/[\\._a-zA-Z][_a-zA-Z0-9]*/");
        def.newToken(tREGISTER).setDefinition("/%[a-zA-Z][_a-zA-Z0-9]*/");
        def.newToken(tCHAR).setDefinition("/'([^\\\\\\n\\r']|\\\\[^\\n\\r\\t])*'/");
        def.newToken(tSTRING).setDefinition("/\"([^\\\\\\n\\r\"]|\\\\[^\\n\\r\\t])*\"/");
        def.newToken(tNUMBER).setDefinition("/\\-?(0[0-7]*|[1-9][0-9]*|0[bB][01]+|0[xX][0-9a-fA-F]+)/");
        def.newToken(tNEWLINE).setDefinition("/[\\n\\r]+/");
        def.newToken(tSPACER).setDefinition("/[ \\t]+/");
        def.newToken(tCOMMENT).setDefinition("/(\\/\\/|#)[^\\n\\r]*/");
        def.newToken(tMLCOMMENT).setDefinition("/\\/\\*([^\\*]*\\*+)([^\\/\\*][^\\*]*\\*+)*\\//");
        def.newToken(tOPERATOR).setDefinition("/(\\+|\\-|\\*|\\/|%|<<|>>|\\.)/");
        def.newToken(tASSIGN).setDefinition("/:=/");
        def.newToken(tCOLON).setDefinition("/:/");
        def.newToken(tOBRACKET).setDefinition("/\\(/");
        def.newToken(tCBRACKET).setDefinition("/\\)/");
        def.newToken(tSEMICOLON).setDefinition("/;/");
        def.newToken(tCOMMA).setDefinition("/,/");
        def.newToken(tOTHER).setDefinition("/.*/");

        Rule r00 := def.newRule(ntUNIT)
            .setCode("{ $$ = unit.getNodeList(); }");
        Rule r01 := def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntLABEL)
            .setCode("{ $$ = this.pushToList($1, $2); }");
        Rule r02 := def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntDEFINITION)
            .setCode("{ $$ = this.pushToList($1, $2); }");
        Rule r03 := def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntINSTRUCTION)
            .setCode("{ $$ = this.pushToList($1, $2); }");
        Rule r04 := def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntEOL)
            .setCode("{ $$ = $1; }");
        Rule r05 := def.newRule(ntLABEL).addRHS(tIDENTIFIER).addRHS(tCOLON)
            .setCode("{ $$ = this.createLabel($1).node(); }");
        Rule r06 := def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntEOL)
            .setCode("{ $$ = this.createInstruction($1).node(); }");
        Rule r07 := def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCode("{ $$ = this.createInstruction($1).setOperand1($2).node(); }");
        Rule r08 := def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCode("{ $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).node(); }");
        Rule r09 := def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCode("{ $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).setOperand3($6).node(); }");
        Rule r10 := def.newRule(ntDEFINITION).addRHS(tIDENTIFIER).addRHS(tASSIGN).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCode("{ $$ = this.createDefinition($1, $3).node(); }");
        Rule r11 := def.newRule(ntEOL).addRHS(tSEMICOLON)
            .setCode("{ $$ = $1; }");
        Rule r12 := def.newRule(ntEOL).addRHS(tNEWLINE)
            .setCode("{ $$ = $1; }");
        Rule r13 := def.newRule(ntOPERAND).addRHS(tIDENTIFIER)
            .setCode("{ $$ = this.createIdentifier($1).operand(); }");
        Rule r14 := def.newRule(ntOPERAND).addRHS(tREGISTER)
            .setCode("{ $$ = this.createRegister($1).operand(); }");
        Rule r15 := def.newRule(ntOPERAND).addRHS(tNUMBER)
            .setCode("{ $$ = this.createNumber($1).operand(); }");
        Rule r16 := def.newRule(ntOPERAND).addRHS(tCHAR)
            .setCode("{ $$ = this.createChar($1).operand(); }");
        Rule r17 := def.newRule(ntOPERAND).addRHS(tSTRING)
            .setCode("{ $$ = this.createString($1).operand(); }");
        Rule r18 := def.newRule(ntOPERAND).addRHS(ntINDIRECT)
            .setCode("{ $$ = $1; }");
        Rule r19 := def.newRule(ntOPERAND).addRHS(ntFORMULA)
            .setCode("{ $$ = $1; }");
        Rule r20 := def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setBase($2).operand(); }");
        Rule r21 := def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setBase($2).setIndex($4).operand(); }");
        Rule r22 := def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setBase($2).setIndex($4).setScale(this.toInt($6)).operand(); }");
        Rule r23 := def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setIndex($3).operand(); }");
        Rule r24 := def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setIndex($3).setScale(this.toInt($5)).operand(); }");
        Rule r25 := def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setDisplacement($1).setBase($3).operand(); }");
        Rule r26 := def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).operand(); }");
        Rule r27 := def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).setScale(this.toInt($7)).operand(); }");
        Rule r28 := def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setDisplacement($1).setIndex($4).operand(); }");
        Rule r29 := def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createIndirect().setDisplacement($1).setIndex($4).setScale(this.toInt($6)).operand(); }");
        Rule r30 := def.newRule(ntFORMULA).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tOPERATOR).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCode("{ $$ = this.createFormula($2, $3, $4).operand(); }");

        Grammar d = this.buildGrammar(def, err);

        // TODO: generate states/actions/gotos from rules
        State sEMPTY := d.newInitState();
        State sUnit := d.newState();
        State sUnitId := d.newState();
        State sUnitIdAssign := d.newState();
        State sUnitIdAssignOp := d.newState();
        State sUnitIdOp := d.newState();
        State sUnitIdOpComma := d.newState();
        State sUnitIdOpCommaOp := d.newState();
        State sUnitIdOpCommaOpComma:= d.newState();
        State sUnitIdOpCommaOpCommaOp := d.newState();
        State sOBracket := d.newState();
        State sOBracketOp := d.newState();
        State sOBracketOpComma := d.newState();
        State sOBracketOpCommaOp := d.newState();
        State sOBracketOpCommaOpComma := d.newState();
        State sOBracketOpCommaOpCommaNumber := d.newState();
        State sOBracketComma := d.newState();
        State sOBracketCommaOp := d.newState();
        State sOBracketCommaOpComma := d.newState();
        State sOBracketCommaOpCommaNumber := d.newState();
        State sOBracketOpOperator := d.newState();
        State sOBracketOpOperatorOp := d.newState();
        State sOpOBracket := d.newState();
        State sOpOBracketOp := d.newState();
        State sOpOBracketOpComma := d.newState();
        State sOpOBracketOpCommaOp := d.newState();
        State sOpOBracketOpCommaOpComma := d.newState();
        State sOpOBracketOpCommaOpCommaNumber := d.newState();
        State sOpOBracketComma := d.newState();
        State sOpOBracketCommaOp := d.newState();
        State sOpOBracketCommaOpComma := d.newState();
        State sOpOBracketCommaOpCommaNumber := d.newState();

        State sReduceUnitLabel := d.newState();
        State sReduceUnitDefinition := d.newState();
        State sReduceUnitInstruction := d.newState();
        State sReduceUnitEOL := d.newState();
        State sReduceIndirect := d.newState();
        State sReduceFormula := d.newState();
        
        sEMPTY.addAction(tEOI, this.reduce(r00));
        sEMPTY.addAction(tSEMICOLON, this.reduce(r00));
        sEMPTY.addAction(tNEWLINE, this.reduce(r00));
        sEMPTY.addAction(tIDENTIFIER, this.reduce(r00));
        sEMPTY.addGoto(ntUNIT, sUnit);
        
        sUnit.addAction(tEOI, this.accept());
        sUnit.addAction(tSEMICOLON, this.shiftReduce(r04));
        sUnit.addAction(tNEWLINE, this.shiftReduce(r04));
        sUnit.addAction(tIDENTIFIER, this.shift(sUnitId));
        sUnit.addGoto(ntLABEL, sReduceUnitLabel);
        sUnit.addGoto(ntDEFINITION, sReduceUnitDefinition);
        sUnit.addGoto(ntINSTRUCTION, sReduceUnitInstruction);
        sUnit.addGoto(ntEOL, sReduceUnitEOL);

        sUnitId.addAction(tCOLON, this.shiftReduce(r05));
        sUnitId.addAction(tEOI, this.shiftReduce(r06));
        sUnitId.addAction(tSEMICOLON, this.shiftReduce(r06));
        sUnitId.addAction(tNEWLINE, this.shiftReduce(r06));
        sUnitId.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitId.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitId.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitId.addAction(tCHAR, this.shiftReduce(r16));
        sUnitId.addAction(tSTRING, this.shiftReduce(r17));
        sUnitId.addAction(tASSIGN, this.shift(sUnitIdAssign));
        sUnitId.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitId.addGoto(ntOPERAND, sUnitIdOp);
        sUnitId.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitId.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdAssign.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitIdAssign.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitIdAssign.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitIdAssign.addAction(tCHAR, this.shiftReduce(r16));
        sUnitIdAssign.addAction(tSTRING, this.shiftReduce(r17));
        sUnitIdAssign.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitIdAssign.addGoto(ntOPERAND, sUnitIdAssignOp);
        sUnitIdAssign.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitIdAssign.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdAssignOp.addAction(tEOI, this.shiftReduce(r10));
        sUnitIdAssignOp.addAction(tSEMICOLON, this.shiftReduce(r10));
        sUnitIdAssignOp.addAction(tNEWLINE, this.shiftReduce(r10));
        sUnitIdAssignOp.addAction(tOBRACKET, this.shift(sOpOBracket));

        sUnitIdOp.addAction(tEOI, this.shiftReduce(r07));
        sUnitIdOp.addAction(tSEMICOLON, this.shiftReduce(r07));
        sUnitIdOp.addAction(tNEWLINE, this.shiftReduce(r07));
        sUnitIdOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sUnitIdOp.addAction(tCOMMA, this.shift(sUnitIdOpComma));

        sUnitIdOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitIdOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitIdOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitIdOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sUnitIdOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sUnitIdOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitIdOpComma.addGoto(ntOPERAND, sUnitIdOpCommaOp);
        sUnitIdOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitIdOpComma.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdOpCommaOp.addAction(tEOI, this.shiftReduce(r08));
        sUnitIdOpCommaOp.addAction(tSEMICOLON, this.shiftReduce(r08));
        sUnitIdOpCommaOp.addAction(tNEWLINE, this.shiftReduce(r08));
        sUnitIdOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sUnitIdOpCommaOp.addAction(tCOMMA, this.shift(sUnitIdOpCommaOpComma));

        sUnitIdOpCommaOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitIdOpCommaOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitIdOpCommaOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitIdOpCommaOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitIdOpCommaOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sUnitIdOpCommaOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sUnitIdOpCommaOpComma.addGoto(ntOPERAND, sUnitIdOpCommaOpCommaOp);
        sUnitIdOpCommaOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitIdOpCommaOpComma.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdOpCommaOpCommaOp.addAction(tEOI, this.shiftReduce(r09));
        sUnitIdOpCommaOpCommaOp.addAction(tSEMICOLON, this.shiftReduce(r09));
        sUnitIdOpCommaOpCommaOp.addAction(tNEWLINE, this.shiftReduce(r09));
        sUnitIdOpCommaOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));

        sOBracketOpOperator.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracketOpOperator.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracketOpOperator.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracketOpOperator.addAction(tCHAR, this.shiftReduce(r16));
        sOBracketOpOperator.addAction(tSTRING, this.shiftReduce(r17));
        sOBracketOpOperator.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketOpOperator.addGoto(ntOPERAND, sOBracketOpOperatorOp);
        sOBracketOpOperator.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracketOpOperator.addGoto(ntFORMULA, sReduceFormula);
        sOBracketOpOperatorOp.addAction(tCBRACKET, this.shiftReduce(r30));

        sOBracket.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracket.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracket.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracket.addAction(tCHAR, this.shiftReduce(r16));
        sOBracket.addAction(tSTRING, this.shiftReduce(r17));
        sOBracket.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracket.addAction(tCOMMA, this.shift(sOBracketComma));
        sOBracket.addGoto(ntOPERAND, sOBracketOp);
        sOBracket.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracket.addGoto(ntFORMULA, sReduceFormula);
        
        sOBracketOp.addAction(tCBRACKET, this.shiftReduce(r20));
        sOBracketOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOBracketOp.addAction(tCOMMA, this.shift(sOBracketOpComma));
        sOBracketOp.addAction(tOPERATOR, this.shift(sOBracketOpOperator));

        sOBracketOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracketOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracketOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracketOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sOBracketOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sOBracketOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketOpComma.addGoto(ntOPERAND, sOBracketOpCommaOp);
        sOBracketOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracketOpComma.addGoto(ntFORMULA, sReduceFormula);

        sOBracketOpCommaOp.addAction(tCBRACKET, this.shiftReduce(r21));
        sOBracketOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOBracketOpCommaOp.addAction(tCOMMA, this.shift(sOBracketOpCommaOpComma));
        sOBracketOpCommaOpComma.addAction(tNUMBER, this.shift(sOBracketOpCommaOpCommaNumber));
        sOBracketOpCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r22));

        sOBracketComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracketComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracketComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracketComma.addAction(tCHAR, this.shiftReduce(r16));
        sOBracketComma.addAction(tSTRING, this.shiftReduce(r17));
        sOBracketComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketComma.addGoto(ntOPERAND, sOBracketCommaOp);
        sOBracketComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracketComma.addGoto(ntFORMULA, sReduceFormula);

        sOBracketCommaOp.addAction(tCBRACKET, this.shiftReduce(r23));
        sOBracketCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOBracketCommaOp.addAction(tCOMMA, this.shift(sOBracketCommaOpComma));
        sOBracketCommaOpComma.addAction(tNUMBER, this.shift(sOBracketCommaOpCommaNumber));
        sOBracketCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r24));

        sOpOBracket.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOpOBracket.addAction(tREGISTER, this.shiftReduce(r14));
        sOpOBracket.addAction(tNUMBER, this.shiftReduce(r15));
        sOpOBracket.addAction(tCHAR, this.shiftReduce(r16));
        sOpOBracket.addAction(tSTRING, this.shiftReduce(r17));
        sOpOBracket.addAction(tOBRACKET, this.shift(sOBracket));
        sOpOBracket.addAction(tCOMMA, this.shift(sOpOBracketComma));
        sOpOBracket.addGoto(ntOPERAND, sOpOBracketOp);
        sOpOBracket.addGoto(ntINDIRECT, sReduceIndirect);
        sOpOBracket.addGoto(ntFORMULA, sReduceFormula);
        
        sOpOBracketOp.addAction(tCBRACKET, this.shiftReduce(r25));
        sOpOBracketOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOpOBracketOp.addAction(tCOMMA, this.shift(sOpOBracketOpComma));

        sOpOBracketOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOpOBracketOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOpOBracketOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOpOBracketOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sOpOBracketOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sOpOBracketOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOpOBracketOpComma.addGoto(ntOPERAND, sOpOBracketOpCommaOp);
        sOpOBracketOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOpOBracketOpComma.addGoto(ntFORMULA, sReduceFormula);

        sOpOBracketOpCommaOp.addAction(tCBRACKET, this.shiftReduce(r26));
        sOpOBracketOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOpOBracketOpCommaOp.addAction(tCOMMA, this.shift(sOpOBracketOpCommaOpComma));
        sOpOBracketOpCommaOpComma.addAction(tNUMBER, this.shift(sOpOBracketOpCommaOpCommaNumber));
        sOpOBracketOpCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r27));

        sOpOBracketComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOpOBracketComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOpOBracketComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOpOBracketComma.addAction(tCHAR, this.shiftReduce(r16));
        sOpOBracketComma.addAction(tSTRING, this.shiftReduce(r17));
        sOpOBracketComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOpOBracketComma.addGoto(ntOPERAND, sOpOBracketCommaOp);
        sOpOBracketComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOpOBracketComma.addGoto(ntFORMULA, sReduceFormula);

        sOpOBracketCommaOp.addAction(tCBRACKET, this.shiftReduce(r28));
        sOpOBracketCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOpOBracketCommaOp.addAction(tCOMMA, this.shift(sOpOBracketCommaOpComma));
        sOpOBracketCommaOpComma.addAction(tNUMBER, this.shift(sOpOBracketCommaOpCommaNumber));
        sOpOBracketCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r29));

        sReduceUnitLabel.setDefaultAction(this.reduce(r01));
        sReduceUnitDefinition.setDefaultAction(this.reduce(r02));
        sReduceUnitInstruction.setDefaultAction(this.reduce(r03));
        sReduceUnitEOL.setDefaultAction(this.reduce(r04));
        sReduceIndirect.setDefaultAction(this.reduce(r18));
        sReduceFormula.setDefaultAction(this.reduce(r19));

        return d;
    }
    
}
