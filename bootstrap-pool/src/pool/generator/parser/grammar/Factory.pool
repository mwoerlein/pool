/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::grammar;

use pool::generator::Symbol;

use sys::core::anycollection::AnyIterator;
use sys::stream::OStream;

class Factory extends sys::core::Object {

    [GrammarDefinition] definition() { return this.rt().createInstance(GrammarDefinition:CLASSNAME); }
    [Action] action() { return this.rt().createInstance(Action:CLASSNAME); }
    
    [Action] accept() { return this.action().setAccept(); }
    [Action] shift(State s) { return this.action().setShift(s); }
    [Action] reduce(Rule r) { return this.action().setReduce(r); }
    [Action] shiftReduce(Rule r) { return this.action().setShift(null).setReduce(r); }
    
    [Grammar] buildGrammar(GrammarDefinition def, OStream err, OStream dot) {
        GrammarBuilder gb = this.rt().createInstance(GrammarBuilder:CLASSNAME);
        Grammar g = gb.build(def, err);
        
//        OStream out = this.rt().out();
//        gb.debugNullable(out);
//        gb.debugFirst(out);
//        gb.debugFollow(out);
//        gb.debugGraph(dot);
        
        gb.destroy();
        return g;
    }
    
    /* 
     * use manually built parse grammar for regexes until pool::generator is finalized
     */
    [Grammar] buildRegexGrammar(OStream err, OStream dot) {
        // TODO: parse .gram file to definition
        GrammarDefinition def = this.definition();

        def.setCStringProperty("namespace", "pool::generator::regex");
        def.setCStringProperty("classname", "Parser");
        def.setCStringProperty("extends", "BaseParser");
        def.setCStringProperty("tokenizer", "Tokenizer");
        
        Symbol tCHAR        := def.getCSymbol("CHAR");
        Symbol tOBRACKET    := def.getCSymbol("OBRACKET");
        Symbol tCBRACKET    := def.getCSymbol("CBRACKET");
        Symbol tOSBRACKET   := def.getCSymbol("OSBRACKET");
        Symbol tCSBRACKET   := def.getCSymbol("CSBRACKET");
        Symbol tQMARK       := def.getCSymbol("QMARK");
        Symbol tSTAR        := def.getCSymbol("STAR");
        Symbol tPLUS        := def.getCSymbol("PLUS");
        Symbol tMINUS       := def.getCSymbol("MINUS");
        Symbol tCFLEX       := def.getCSymbol("CFLEX");
        Symbol tPIPE        := def.getCSymbol("PIPE");
        Symbol tDOT         := def.getCSymbol("DOT");

        Symbol ntEXPRESSION := def.getCSymbol("expression");    
        Symbol ntALTER      := def.getCSymbol("alter");    
        Symbol ntCONCAT     := def.getCSymbol("concat");
        Symbol ntELEM       := def.getCSymbol("elem");
        Symbol ntEXPR       := def.getCSymbol("expr");
        Symbol ntCLASS      := def.getCSymbol("class");
        
        def.newToken(tCHAR).setCDefinition("/[^\\\\\\(\\)\\[\\]\\?\\*\\+\\-\\^\\|\\.\\/]|\\\\[nrt\\\\\\(\\)\\[\\]\\?\\*\\+\\-\\^\\|\\.\\/]/");
        def.newToken(tOBRACKET).setCDefinition("/\\(/");
        def.newToken(tCBRACKET).setCDefinition("/\\)/");
        def.newToken(tOSBRACKET).setCDefinition("/\\[/");
        def.newToken(tCSBRACKET).setCDefinition("/\\]/");
        def.newToken(tQMARK).setCDefinition("/\\?/");
        def.newToken(tSTAR).setCDefinition("/\\*/");
        def.newToken(tPLUS).setCDefinition("/\\+/");
        def.newToken(tMINUS).setCDefinition("/\\-/");
        def.newToken(tCFLEX).setCDefinition("/\\^/");
        def.newToken(tPIPE).setCDefinition("/\\|/");
        def.newToken(tDOT).setCDefinition("/\\./");

        def.newRule(ntEXPRESSION).addRHS(ntALTER)
            .setCCode("{ $$ = this.expression = $1; }");
        def.newRule(ntALTER).addRHS(ntCONCAT)
            .setCCode("{ $$ = this.listAddNode(this.alter(), this.listToNode($1)); }");
        def.newRule(ntALTER).addRHS(ntALTER).addRHS(tPIPE).addRHS(ntCONCAT)
            .setCCode("{ $$ = this.listAddNode($1, this.listToNode($3)); }");
        def.newRule(ntCONCAT).addRHS(ntELEM)
            .setCCode("{ $$ = this.listAddNode(this.concat(), $1); }");
        def.newRule(ntCONCAT).addRHS(ntCONCAT).addRHS(ntELEM)
            .setCCode("{ $$ = this.listAddNode($1, $2); }");
        def.newRule(ntELEM).addRHS(ntEXPR);
        def.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tQMARK)
            .setCCode("{ $$ = this.atMostOnce($1); }");
        def.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tSTAR)
            .setCCode("{ $$ = this.any($1); }");
        def.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tPLUS)
            .setCCode("{ $$ = this.atLeastOnce($1); }");
        def.newRule(ntEXPR).addRHS(tDOT)
            .setCCode("{ $$ = this.all(); }");
        def.newRule(ntEXPR).addRHS(tCHAR)
            .setCCode("{ $$ = this.single(this.toChar($1)); }");
        def.newRule(ntEXPR).addRHS(tOSBRACKET).addRHS(ntCLASS).addRHS(tCSBRACKET)
            .setCCode("{ $$ = this.ccToNode($2); }");
        def.newRule(ntEXPR).addRHS(tOSBRACKET).addRHS(tCFLEX).addRHS(ntCLASS).addRHS(tCSBRACKET)
            .setCCode("{ $$ = this.ccToExclusiveNode($3); }");
        def.newRule(ntEXPR).addRHS(tOBRACKET).addRHS(ntALTER).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.listToNode($2); }");
        def.newRule(ntCLASS).addRHS(tCHAR)
            .setCCode("{ $$ = this.ccAddChar(this.cc(), this.toChar($1)); }");
        def.newRule(ntCLASS).addRHS(tCHAR).addRHS(tMINUS).addRHS(tCHAR)
            .setCCode("{ $$ = this.ccAddRange(this.cc(), this.toChar($1), this.toChar($3)); }");
        def.newRule(ntCLASS).addRHS(ntCLASS).addRHS(tCHAR)
            .setCCode("{ $$ = this.ccAddChar($1, this.toChar($2)); }");
        def.newRule(ntCLASS).addRHS(ntCLASS).addRHS(tCHAR).addRHS(tMINUS).addRHS(tCHAR)
            .setCCode("{ $$ = this.ccAddRange($1, this.toChar($2), this.toChar($4)); }");

        return this.buildGrammar(def, err, dot);
    }
    
    /* 
     * use manually built parse grammar for grammar definitions until pool::generator is finalized
     */
    [Grammar] buildDefinitionGrammar(OStream err, OStream dot) {
        // TODO: parse .gram file to definition
        GrammarDefinition def = this.definition();

        def.setCStringProperty("namespace", "pool::generator::parser::grammar");
        def.setCStringProperty("classname", "Parser");
        def.setCStringProperty("extends", "BaseParser");
        def.setCStringProperty("tokenizer", "Tokenizer");
        
        Symbol tSYMBOL      := def.getCSymbol("SYMBOL");
        Symbol tPARAMETER   := def.getCSymbol("PARAMETER");
        Symbol tREGEX       := def.getCSymbol("REGEX");
        Symbol tSTRING      := def.getCSymbol("STRING");
        Symbol tCODE        := def.getCSymbol("CODE");
        Symbol tNEWLINE     := def.getCSymbol("NEWLINE");
        Symbol tSPACER      := def.getCSymbol("SPACER").setIgnore(true);
        Symbol tASSIGN      := def.getCSymbol("ASSIGN");
        Symbol tCOLON       := def.getCSymbol("COLON");

        Symbol ntGRAMMARDEF := def.getCSymbol("grammar_def");    
        Symbol ntSYMBOLLIST := def.getCSymbol("symbol_list");
        
        def.newToken(tSYMBOL).setCDefinition("/[a-zA-Z][_a-zA-Z0-9]*/");
        def.newToken(tPARAMETER).setCDefinition("/%[a-zA-Z][_a-zA-Z0-9]*/");
        def.newToken(tREGEX).setCDefinition("/\\/([^\\\\\\n\\r\\/]|\\\\[^\\n\\r\\t])*\\//");
        def.newToken(tSTRING).setCDefinition("/\"([^\\\\\\n\\r\"]|\\\\[^\\n\\r\\t])*\"/");
        def.newToken(tCODE).setCDefinition("/{([^\\\\\\n\\r{}]|\\\\[^\\n\\r\\t])*}/");
        def.newToken(tNEWLINE).setCDefinition("/[\\n\\r]+/");
        def.newToken(tSPACER).setCDefinition("/[ \\t]+/");
        def.newToken(tASSIGN).setCDefinition("/:=/");
        def.newToken(tCOLON).setCDefinition("/:/");

        def.newRule(ntGRAMMARDEF)
            .setCCode("{ $$ = this.definition; }");
        def.newRule(ntGRAMMARDEF).addRHS(ntGRAMMARDEF).addRHS(tNEWLINE);
        def.newRule(ntGRAMMARDEF).addRHS(ntGRAMMARDEF).addRHS(tPARAMETER).addRHS(tSTRING).addRHS(tNEWLINE)
            .setCCode("{ $$ = this.addParameter($1, $2, $3); }");
        def.newRule(ntGRAMMARDEF).addRHS(ntGRAMMARDEF).addRHS(tPARAMETER).addRHS(tSYMBOL).addRHS(tNEWLINE)
            .setCCode("{ $$ = this.addParameter($1, $2, $3); }");
        def.newRule(ntGRAMMARDEF).addRHS(ntGRAMMARDEF).addRHS(tSYMBOL).addRHS(tASSIGN).addRHS(tREGEX).addRHS(tNEWLINE)
            .setCCode("{ $$ = this.addToken($1, $2, $4); }");
        def.newRule(ntGRAMMARDEF).addRHS(ntGRAMMARDEF).addRHS(tSYMBOL).addRHS(tCOLON).addRHS(ntSYMBOLLIST).addRHS(tNEWLINE)
            .setCCode("{ $$ = this.addRule($1, $2, $4, null); }");
        def.newRule(ntGRAMMARDEF).addRHS(ntGRAMMARDEF).addRHS(tSYMBOL).addRHS(tCOLON).addRHS(ntSYMBOLLIST).addRHS(tCODE).addRHS(tNEWLINE)
            .setCCode("{ $$ = this.addRule($1, $2, $4, $5); }");
        def.newRule(ntSYMBOLLIST)
            .setCCode("{ $$ = this.list(); }");
        def.newRule(ntSYMBOLLIST).addRHS(ntSYMBOLLIST).addRHS(tSYMBOL)
            .setCCode("{ $$ = this.addSymbolToList($1, $2); }");

        return this.buildGrammar(def, err, dot);
    }
    
    /* 
     * use manually built parser grammar for pasm until pool::generator is finalized
     */
    [Grammar] buildPasmGrammar(OStream err, OStream dot) {
        // TODO: parse .gram file to definition
        GrammarDefinition def = this.definition();
        
        def.setCStringProperty("namespace", "pool::asm");
        def.setCStringProperty("classname", "Parser");
        def.setCStringProperty("extends", "BaseParser");
        def.setCStringProperty("tokenizer", "Tokenizer");
        
        Symbol tIDENTIFIER   := def.getCSymbol("IDENTIFIER");
        Symbol tREGISTER     := def.getCSymbol("REGISTER");
        Symbol tCHAR         := def.getCSymbol("CHAR");
        Symbol tSTRING       := def.getCSymbol("STRING");
        Symbol tNUMBER       := def.getCSymbol("NUMBER");
        Symbol tNEWLINE      := def.getCSymbol("NEWLINE");
        Symbol tSPACER       := def.getCSymbol("SPACER").setIgnore(true);
        Symbol tCOMMENT      := def.getCSymbol("COMMENT").setIgnore(true);
        Symbol tMLCOMMENT    := def.getCSymbol("MLCOMMENT").setIgnore(true);
        Symbol tOPERATOR     := def.getCSymbol("OPERATOR");
        Symbol tASSIGN       := def.getCSymbol("ASSIGN");
        Symbol tOBRACKET     := def.getCSymbol("OBRACKET");
        Symbol tCBRACKET     := def.getCSymbol("CBRACKET");
        Symbol tCOLON        := def.getCSymbol("COLON");
        Symbol tSEMICOLON    := def.getCSymbol("SEMICOLON");
        Symbol tCOMMA        := def.getCSymbol("COMMA");
        
        Symbol ntUNIT        := def.getCSymbol("compilation_unit");    
        Symbol ntLABEL       := def.getCSymbol("label");
        Symbol ntDEFINITION  := def.getCSymbol("definition");
        Symbol ntINSTRUCTION := def.getCSymbol("instruction");
        Symbol ntEOL         := def.getCSymbol("eol");
        Symbol ntOPERAND     := def.getCSymbol("operand");
        Symbol ntINDIRECT    := def.getCSymbol("indirect");
        Symbol ntFORMULA     := def.getCSymbol("formula");
        
        def.newToken(tIDENTIFIER).setCDefinition("/[\\._a-zA-Z][_a-zA-Z0-9]*/");
        def.newToken(tREGISTER).setCDefinition("/%[a-zA-Z][_a-zA-Z0-9]*/");
        def.newToken(tCHAR).setCDefinition("/'([^\\\\\\n\\r']|\\\\[^\\n\\r\\t])*'/");
        def.newToken(tSTRING).setCDefinition("/\"([^\\\\\\n\\r\"]|\\\\[^\\n\\r\\t])*\"/");
        def.newToken(tNUMBER).setCDefinition("/\\-?(0[0-7]*|[1-9][0-9]*|0[bB][01]+|0[xX][0-9a-fA-F]+)/");
        def.newToken(tNEWLINE).setCDefinition("/[\\n\\r]+/");
        def.newToken(tSPACER).setCDefinition("/[ \\t]+/");
        def.newToken(tCOMMENT).setCDefinition("/(\\/\\/|#)[^\\n\\r]*/");
        def.newToken(tMLCOMMENT).setCDefinition("/\\/\\*([^\\*]*\\*+)([^\\/\\*][^\\*]*\\*+)*\\//");
        def.newToken(tOPERATOR).setCDefinition("/(\\+|\\-|\\*|\\/|%|<<|>>|\\.)/");
        def.newToken(tASSIGN).setCDefinition("/:=/");
        def.newToken(tCOLON).setCDefinition("/:/");
        def.newToken(tOBRACKET).setCDefinition("/\\(/");
        def.newToken(tCBRACKET).setCDefinition("/\\)/");
        def.newToken(tSEMICOLON).setCDefinition("/;/");
        def.newToken(tCOMMA).setCDefinition("/,/");

        def.newRule(ntUNIT)
            .setCCode("{ $$ = unit.getNodeList(); }");
        def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntLABEL)
            .setCCode("{ $$ = this.pushToList($1, $2); }");
        def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntDEFINITION)
            .setCCode("{ $$ = this.pushToList($1, $2); }");
        def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntINSTRUCTION)
            .setCCode("{ $$ = this.pushToList($1, $2); }");
        def.newRule(ntUNIT).addRHS(ntUNIT).addRHS(ntEOL);
        def.newRule(ntLABEL).addRHS(tIDENTIFIER).addRHS(tCOLON)
            .setCCode("{ $$ = this.createLabel($1).node(); }");
        def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntEOL)
            .setCCode("{ $$ = this.createInstruction($1).node(); }");
        def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCCode("{ $$ = this.createInstruction($1).setOperand1($2).node(); }");
        def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCCode("{ $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).node(); }");
        def.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCCode("{ $$ = this.createInstruction($1).setOperand1($2).setOperand2($4).setOperand3($6).node(); }");
        def.newRule(ntDEFINITION).addRHS(tIDENTIFIER).addRHS(tASSIGN).addRHS(ntOPERAND).addRHS(ntEOL)
            .setCCode("{ $$ = this.createDefinition($1, $3).node(); }");
        def.newRule(ntEOL).addRHS(tSEMICOLON)
            .setCCode("{ $$ = null; }");
        def.newRule(ntEOL).addRHS(tNEWLINE)
            .setCCode("{ $$ = null; }");
        def.newRule(ntOPERAND).addRHS(tIDENTIFIER)
            .setCCode("{ $$ = this.createIdentifier($1).operand(); }");
        def.newRule(ntOPERAND).addRHS(tREGISTER)
            .setCCode("{ $$ = this.createRegister($1).operand(); }");
        def.newRule(ntOPERAND).addRHS(tNUMBER)
            .setCCode("{ $$ = this.createNumber($1).operand(); }");
        def.newRule(ntOPERAND).addRHS(tCHAR)
            .setCCode("{ $$ = this.createChar($1).operand(); }");
        def.newRule(ntOPERAND).addRHS(tSTRING)
            .setCCode("{ $$ = this.createString($1).operand(); }");
        def.newRule(ntOPERAND).addRHS(ntINDIRECT);
        def.newRule(ntOPERAND).addRHS(ntFORMULA);
        def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setBase($2).operand(); }");
        def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setBase($2).setIndex($4).operand(); }");
        def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setBase($2).setIndex($4).setScale(this.toInt($6)).operand(); }");
        def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setIndex($3).operand(); }");
        def.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setIndex($3).setScale(this.toInt($5)).operand(); }");
        def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setDisplacement($1).setBase($3).operand(); }");
        def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).operand(); }");
        def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setDisplacement($1).setBase($3).setIndex($5).setScale(this.toInt($7)).operand(); }");
        def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setDisplacement($1).setIndex($4).operand(); }");
        def.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createIndirect().setDisplacement($1).setIndex($4).setScale(this.toInt($6)).operand(); }");
        def.newRule(ntFORMULA).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tOPERATOR).addRHS(ntOPERAND).addRHS(tCBRACKET)
            .setCCode("{ $$ = this.createFormula($2, $3, $4).operand(); }");

        return this.buildGrammar(def, err, dot);
    }
    
}
