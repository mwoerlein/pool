%namespace  "pool::generator::parser::grammar"
%classname  "Parser"
%extends    "BaseParser"
%tokenizer  "Tokenizer"
%ignores SPACER
%ignores COMMENT

--- TOKENS ---
SYMBOL      := /[a-zA-Z][_a-zA-Z0-9]*/
PARAMETER   := /%[a-zA-Z][_a-zA-Z0-9]*/
REGEX       := /\/([^\\\n\r\/]|\\[^\n\r\t])*\//
STRING      := /"([^\\\n\r"]|\\[^\n\r\t])*"/
INLINE      := /'([^\\\n\r']|\\[^\n\r\t])*'/
CODE        := /{([^\\\n\r{}]|\\[^\n\r\t])*}/
COMMENT     := /\-\-\-[^\n\r]*/
NEWLINE     := /[\n\r]+/
SPACER      := /[ \t]+/

--- RULES ---
grammar_def:                                                    { $$ = this.definition; }
grammar_def: grammar_def NEWLINE
grammar_def: grammar_def PARAMETER STRING NEWLINE               { $$ = this.addParameter($1, $2, $3); }
grammar_def: grammar_def PARAMETER SYMBOL NEWLINE               { $$ = this.addParameter($1, $2, $3); }
grammar_def: grammar_def SYMBOL ':=' REGEX NEWLINE              { $$ = this.addToken($1, $2, $4); }
grammar_def: grammar_def SYMBOL ':' symbol_list NEWLINE         { $$ = this.addRule($1, $2, $4, null); }
grammar_def: grammar_def SYMBOL ':' symbol_list CODE NEWLINE    { $$ = this.addRule($1, $2, $4, $5); }
symbol_list:                                                    { $$ = this.list(); }
symbol_list: symbol_list SYMBOL                                 { $$ = this.addSymbolToList($1, $2); }
symbol_list: symbol_list INLINE                                 { $$ = this.addInlineToList($1, $2); }
