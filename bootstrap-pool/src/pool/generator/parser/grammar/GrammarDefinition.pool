/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::grammar;

use pool::generator::Symbol;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMap;
use sys::core::utils::PropertyContainer;

class GrammarDefinition extends PropertyContainer {

    AnyList tokens; // ArrayList<Token>
    AnyList rules; // ArrayList<Rule>
    AnyMap symbols; // HashMap<String, Symbol>
    Symbol eoi;

    [] __init() { this._initGrammarDefinition(); }
    [] _initGrammarDefinition() {
        this._initPropertyContainer();
        this.tokens = this.createOwn(AnyList:CLASSNAME);
        this.rules = this.createOwn(AnyList:CLASSNAME);
        this.symbols = this.createOwn(AnyMap:CLASSNAME);
        eoi = this.getCSymbol("EOI").setId(pool::generator::tokenizer::Tokenizer:T_EOI);
    }
    
    [] __destruct() { this._destructGrammarDefinition(); }
    [] _destructGrammarDefinition() {
        this._destructPropertyContainer();
    }
    
    [String] setSourceName(String sourceName) {
        return _properties.set(this.createOwnStringFromCString("source.name"), this.createOwnStringFromString(sourceName));
    }
    
    [Symbol] getInlineSymbol(String value) {
        if (symbols.has(value)) { return symbols.get(value); }
        Symbol s = this.createOwn(Symbol:CLASSNAME);
        s.getName().printCString("INLINE_").printInt(symbols.size());
        symbols.set(this.createOwnStringFromString(value), s);
        this.newToken(s).setDefinition(value, true);
        return s;
    }
    
    [Symbol] getSymbol(String name) {
        if (symbols.has(name)) { return symbols.get(name); }
        Symbol s = this.createOwn(Symbol:CLASSNAME);
        s.setName(name);
        symbols.set(this.createOwnStringFromString(name), s);
        return s;
    }
    
    [Symbol] getCSymbol(cstring n) {
        String name = this.createOwnStringFromCString(n);
        if (symbols.has(name)) { return symbols.get(name); }
        Symbol s = this.createOwn(Symbol:CLASSNAME);
        s.setName(name);
        symbols.set(name, s);
        return s;
    }
    
    [Symbol] getEOI() { return eoi; }
    [AnyIterator] symbols() { return symbols.values(); }
    
    [Rule] newRule(Symbol lhs) {
        Rule r = this.createOwn(Rule:CLASSNAME);
        r.setLHS(lhs).setId(rules.size());
        rules.add(r);
        return r;
    }
    [AnyIterator] rules() { return rules.iterator(); }
    
    [Token] newToken(Symbol s) {
        Token t = this.createOwn(Token:CLASSNAME);
        t.setSymbol(s);
        tokens.add(t);
        return t;
    }
    [AnyIterator] tokens() { return tokens.iterator(); }
}
