/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::grammar;

use sys::stream::OStream;

class Rule extends sys::core::Object {

    int id;
    int lhs;
    int rhSize;
    RuleElement rhs;
    RuleElement lastRhs;
    
    [Rule] init(int i, int l) {
        id = i;
        lhs = l;
        rhSize = 0;
        return this;
    }
    [] __destruct() {
        if (rhs) { rhs.destroy(); }
    }
    
    [int] getId() { return id; }
    [int] getLHS() { return lhs; }
    [int] getRhSize() { return rhSize; }
    [RuleElement] getRHS() { return rhs; }
    
    [Rule] symbol(int s) { return this.addRhs(RuleElement:SYMBOL, s); }
    [Rule] terminal(int s) { return this.addRhs(RuleElement:TERMINAL, s); }
    
    [Rule] addRhs(int kind, int s) {
        RuleElement e = this.rt().createInstance(RuleElement:CLASSNAME);
        e.init(kind, s);
        if (!rhs) {
            rhs = lastRhs = e;
        } else {
            lastRhs = lastRhs.setNext(e);
        }
        rhSize++;
        return this;
    }
    
    [OStream] printToStream(OStream stream) {
        stream.printChar('(').printInt(id).printCString(") ").printInt(lhs).printCString(" <-");
        RuleElement cur = rhs;
        while (cur) {
            stream.printChar(' ').print(cur);
            cur = cur.getNext();
        }
        return stream.printChar(';');
    }
}
