/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::grammar::definition;

use pool::generator::Symbol;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMap;
use sys::core::utils::PropertyContainer;

use sys::stream::OStream;

class Definition extends PropertyContainer {

    AnyList inlineTokens; // ArrayList<TokenDesc>
    AnyList regexTokens; // ArrayList<TokenDesc>
    AnyList rules; // ArrayList<Rule>
    AnyList precedences; // HashMap<Precedence>
    AnyMap symbols; // HashMap<String, Symbol>
    AnyMap precRefs; // HashMap<String, Symbol>
    Symbol eoi;
    Precedence defaultPrec;

    [] __init() { this._initGrammarDefinition(); }
    [] _initGrammarDefinition() {
        this._initPropertyContainer();
        this.inlineTokens = this.createOwn(AnyList:CLASSNAME);
        this.regexTokens = this.createOwn(AnyList:CLASSNAME);
        this.precedences = this.createOwn(AnyList:CLASSNAME);
        this.rules = this.createOwn(AnyList:CLASSNAME);
        this.symbols = this.createOwn(AnyMap:CLASSNAME);
        this.precRefs = this.createOwn(AnyMap:CLASSNAME);
        eoi = this.getCSymbol("EOI").setId(pool::generator::tokenizer::Tokenizer:T_EOI);
        AnyList aliases = this.createOwn(AnyList:CLASSNAME);
        aliases.add(eoi);
        defaultPrec = this.newPrecedence().setPrec(0).setNonAsso().setAliases(aliases);
    }
    
    [String] setSourceName(String sourceName) {
        return _properties.set(this.createOwnStringFromCString("source.name"), this.createOwnStringFromString(sourceName));
    }
    
    [Symbol] getSymbol(String name) {
        if (symbols.has(name)) { return symbols.get(name); }
        Symbol s = this.createOwn(Symbol:CLASSNAME);
        s.setName(name);
        symbols.set(this.createOwnStringFromString(name), s);
        return s;
    }
    
    [Symbol] getInlineSymbol(String value) {
        if (symbols.has(value)) { return symbols.get(value); }

        Symbol s = this.createOwn(Symbol:CLASSNAME);
        s.getName().printCString("INLINE_").printInt(symbols.size());
        symbols.set(this.createOwnStringFromString(value), s);
        
        TokenDesc t = this.createOwn(TokenDesc:CLASSNAME);
        t.setSymbol(s).setDefinition(value);
        inlineTokens.add(t);
        
        return s;
    }
    
    [Symbol] getPrecRefSymbol(String name) {
        if (precRefs.has(name)) { return precRefs.get(name); }
        Symbol s = this.createOwn(Symbol:CLASSNAME);
        s.setName(name);
        precRefs.set(this.createOwnStringFromString(name), s);
        return s;
    }
    
    [Symbol] getCSymbol(cstring n) {
        String name = this.createOwnStringFromCString(n);
        if (symbols.has(name)) { return symbols.get(name); }
        Symbol s = this.createOwn(Symbol:CLASSNAME);
        s.setName(name);
        symbols.set(name, s);
        return s;
    }
    
    [Symbol] getEOI() { return eoi; }
    [AnyIterator] symbols() { return symbols.values(); }
    
    [Rule] newRule(Symbol lhs) {
        Rule r = this.createOwn(Rule:CLASSNAME);
        r.setLHS(lhs).setId(rules.size());
        rules.add(r);
        return r;
    }
    [AnyIterator] rules() { return rules.iterator(); }
    
    [TokenDesc] newToken(Symbol s) {
        TokenDesc t = this.createOwn(TokenDesc:CLASSNAME);
        t.setSymbol(s);
        regexTokens.add(t);
        return t;
    }
    [AnyIterator] regexTokens() { return regexTokens.iterator(); }
    [AnyIterator] inlineTokens() { return inlineTokens.iterator(); }

    [Precedence] newPrecedence() {
        Precedence p = this.createOwn(Precedence:CLASSNAME);
        p.setPrec(precedences.size());
        precedences.add(p);
        return p;
    }
    [Precedence] getDefaultPrecedence() { return defaultPrec; }
    [AnyIterator] precedences() { return precedences.iterator(); }

    [OStream] printToStream(OStream stream) {
        {
            stream.printCString("--- PRECEDENCES ---").printNewline();
            AnyIterator it = precedences.iterator();
            while (it.hasNext()) { stream.print(it.next()).printNewline(); }
            it.destroy();
        }
        {
            stream.printCString("--- INLINE TOKENS ---").printNewline();
            AnyIterator it = inlineTokens.iterator();
            while (it.hasNext()) { stream.print(it.next()).printNewline(); }
            it.destroy();
        }
        {
            stream.printCString("--- REGEX TOKENS ---").printNewline();
            AnyIterator it = regexTokens.iterator();
            while (it.hasNext()) { stream.print(it.next()).printNewline(); }
            it.destroy();
        }
        {
            stream.printCString("--- RULES ---").printNewline();
            AnyIterator it = rules.iterator();
            while (it.hasNext()) { stream.print(it.next()).printNewline(); }
            it.destroy();
        }
        return stream;
    }

}
