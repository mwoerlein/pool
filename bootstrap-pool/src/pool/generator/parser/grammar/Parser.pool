/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
generator = parsergen
[source]
mimetype = text/x-pool-grammar
name = ./src/pool/generator/parser/grammar/Parser.gram
*/
namespace pool::generator::parser::grammar;

use pool::generator::parser::ParseStack;

class Parser extends BaseParser {

    int NT_GRAMMAR_DEF := 0;
    int NT_SYMBOL_LIST := 1;

    [int, int] __getRule(int rule) {
        if (rule == 0) { return [Parser:NT_GRAMMAR_DEF, 0]; }
        else if (rule == 1) { return [Parser:NT_GRAMMAR_DEF, 2]; }
        else if (rule == 2) { return [Parser:NT_GRAMMAR_DEF, 4]; }
        else if (rule == 3) { return [Parser:NT_GRAMMAR_DEF, 4]; }
        else if (rule == 4) { return [Parser:NT_GRAMMAR_DEF, 5]; }
        else if (rule == 5) { return [Parser:NT_GRAMMAR_DEF, 5]; }
        else if (rule == 6) { return [Parser:NT_GRAMMAR_DEF, 6]; }
        else if (rule == 7) { return [Parser:NT_SYMBOL_LIST, 0]; }
        else if (rule == 8) { return [Parser:NT_SYMBOL_LIST, 2]; }
        return [Parser:ERROR, 0];
    }

    [__any__] __executeRule(int rule, ParseStack s) {
        __any__ result = null;
        if (rule == 0) { result = this.definition; }
        else if (rule == 1) { result = s.at(1); }
        else if (rule == 2) { result = this.addParameter(s.at(3), s.at(2), s.at(1)); }
        else if (rule == 3) { result = this.addParameter(s.at(3), s.at(2), s.at(1)); }
        else if (rule == 4) { result = this.addToken(s.at(4), s.at(3), s.at(1)); }
        else if (rule == 5) { result = this.addRule(s.at(4), s.at(3), s.at(1), null); }
        else if (rule == 6) { result = this.addRule(s.at(5), s.at(4), s.at(2), s.at(1)); }
        else if (rule == 7) { result = this.list(); }
        else if (rule == 8) { result = this.addSymbolToList(s.at(1), s.at(0)); }

        return result;
    }

    [int] __goto(int state, int symbol) {
        if (state == 0) {
            if (symbol == Parser:NT_GRAMMAR_DEF) { return 1; }
        } else if (state == 6) {
            if (symbol == Parser:NT_SYMBOL_LIST) { return 10; }
        }

        return Parser:ERROR;
    }

    [int, int] __action(int state, int symbol) {
        if ((symbol == Tokenizer:T_COMMENT) || (symbol == Tokenizer:T_SPACER)) { return [Parser:IGNORE, 0]; }
        if (state == 0) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 0]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 0]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:REDUCE, 0]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 0]; }
        } else if (state == 1) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:ACCEPT, 0]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:SHIFT, 2]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:SHIFT, 3]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:SHIFT, 4]; }
        } else if (state == 2) {
            if (symbol == Tokenizer:T_ASSIGN) { return [Parser:SHIFT, 5]; }
            else if (symbol == Tokenizer:T_COLON) { return [Parser:SHIFT, 6]; }
        } else if (state == 3) {
            if (symbol == Tokenizer:T_SYMBOL) { return [Parser:SHIFT, 7]; }
            else if (symbol == Tokenizer:T_STRING) { return [Parser:SHIFT, 8]; }
        } else if (state == 4) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 1]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 1]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:REDUCE, 1]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 1]; }
        } else if (state == 5) {
            if (symbol == Tokenizer:T_REGEX) { return [Parser:SHIFT, 9]; }
        } else if (state == 6) {
            if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 7]; }
            else if (symbol == Tokenizer:T_CODE) { return [Parser:REDUCE, 7]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 7]; }
        } else if (state == 7) {
            if (symbol == Tokenizer:T_NEWLINE) { return [Parser:SHIFT, 11]; }
        } else if (state == 8) {
            if (symbol == Tokenizer:T_NEWLINE) { return [Parser:SHIFT, 12]; }
        } else if (state == 9) {
            if (symbol == Tokenizer:T_NEWLINE) { return [Parser:SHIFT, 13]; }
        } else if (state == 10) {
            if (symbol == Tokenizer:T_SYMBOL) { return [Parser:SHIFT, 14]; }
            else if (symbol == Tokenizer:T_CODE) { return [Parser:SHIFT, 15]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:SHIFT, 16]; }
        } else if (state == 11) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 3]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 3]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:REDUCE, 3]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 3]; }
        } else if (state == 12) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 2]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 2]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:REDUCE, 2]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 2]; }
        } else if (state == 13) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 4]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 4]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:REDUCE, 4]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 4]; }
        } else if (state == 14) {
            if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 8]; }
            else if (symbol == Tokenizer:T_CODE) { return [Parser:REDUCE, 8]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 8]; }
        } else if (state == 15) {
            if (symbol == Tokenizer:T_NEWLINE) { return [Parser:SHIFT, 17]; }
        } else if (state == 16) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 5]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 5]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:REDUCE, 5]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 5]; }
        } else if (state == 17) {
            if (symbol == Tokenizer:T_EOI) { return [Parser:REDUCE, 6]; }
            else if (symbol == Tokenizer:T_NEWLINE) { return [Parser:REDUCE, 6]; }
            else if (symbol == Tokenizer:T_PARAMETER) { return [Parser:REDUCE, 6]; }
            else if (symbol == Tokenizer:T_SYMBOL) { return [Parser:REDUCE, 6]; }
        }

        return [Parser:ERROR, 0];
    }

}
