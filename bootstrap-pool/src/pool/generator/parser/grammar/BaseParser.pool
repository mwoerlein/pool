/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::grammar;

use pool::generator::Symbol;
use pool::generator::tokenizer::Token;

use sys::core::String;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyIterator;
use sys::stream::IStream;

class BaseParser extends pool::generator::parser::Parser {
    
    GrammarDefinition definition;
    
    [sys::stream::OStream] newError() { return this.rt().err(); }
    
    [Grammar] parse(IStream input, String inputName, String sourceName) {
        this.definition = this.rt().createInstance(GrammarDefinition:CLASSNAME);
        this.definition.setSourceName(sourceName);
        Tokenizer in = this.rt().createInstance(Tokenizer:CLASSNAME);
        this._parse(in.init(input, inputName));
        in.destroy();
        GrammarBuilder gb = this.rt().createInstance(GrammarBuilder:CLASSNAME);
        Grammar g = gb.build(this.definition, this.rt().err());
        g.own(this.definition);
        this.definition = null;
        gb.destroy();
        return g;
    }

    // Definition creation helper
    [GrammarDefinition] addParameter(GrammarDefinition def, Token param, Token value) {
        String val = def.createOwn(String:CLASSNAME);
        value.getValue().unescapeToStream(val.ostream());
        String name = param.getValue().subString(1, 0);
        def.setStringProperty(name, val);
        name.destroy();
        return def;
    }
    
    [GrammarDefinition] addIgnoreList(GrammarDefinition def, AnyList symbols) {
        AnyIterator it = symbols.iterator();
        while (it.hasNext()) {
            Symbol s = it.next();
            s.setIgnore(true);
        }
        it.destroy();
        return def;
    }

    [GrammarDefinition] addToken(GrammarDefinition def, Token symbol, Token regex) {
        def.newToken(def.getSymbol(symbol.getValue())).setDefinition(regex.getValue(), false);
        return def;
    }

    [GrammarDefinition] addRule(GrammarDefinition def, Token symbol, AnyList rhs, Token code) {
        Rule r = def.newRule(def.getSymbol(symbol.getValue()));
        {
            AnyIterator it = rhs.iterator();
            while (it.hasNext()) { r.addRHS(it.next()); }
            it.destroy();
        }
        if (code) { r.setCode(code.getValue()); }
        return def;
    }

    [AnyList] list() {
        return this.createOwn(AnyList:CLASSNAME);
    }
    
    [AnyList] addSymbolToList(AnyList l, Token symbol) {
        l.add(definition.getSymbol(symbol.getValue()));
        return l;
    }
    
    [AnyList] addInlineToList(AnyList l, Token inline) {
        l.add(definition.getInlineSymbol(inline.getValue()));
        return l;
    }
}
