/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::grammar;

use pool::generator::Symbol;
use pool::generator::parser::grammar::builder::Builder;
use pool::generator::parser::grammar::definition::Definition;
use pool::generator::parser::grammar::definition::Precedence;
use pool::generator::parser::grammar::definition::Rule;
use pool::generator::parser::grammar::definition::TokenDesc;
use pool::generator::tokenizer::Token;

use sys::core::String;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyIterator;
use sys::stream::IStream;

class BaseParser extends pool::generator::parser::Parser {
    
    Definition definition;
    
    [sys::stream::OStream] newError() { return this.rt().err(); }
    
    [Grammar] parse(IStream input, String inputName, String sourceName) {
        this.definition = this.rt().createInstance(Definition:CLASSNAME);
        this.definition.setSourceName(sourceName);
        Tokenizer in = this.rt().createInstance(Tokenizer:CLASSNAME);
        this._parse(in.init(input, inputName));
        in.destroy();
        Builder gb = this.rt().createInstance(Builder:CLASSNAME);
        Grammar g = gb.build(this.definition, this.rt().err());
        this.definition = null;
        gb.destroy();
        return g;
    }

    // Definition creation helper
    [] addParameter(Token param, Token value) {
        String val = definition.createOwn(String:CLASSNAME);
        value.getValue().unescapeToStream(val.ostream());
        String name = param.getValue().subString(1, 0);
        definition.setStringProperty(name, val);
        name.destroy();
    }
    
    [] addIgnoreList(AnyList symbols) {
        AnyIterator it = symbols.iterator();
        while (it.hasNext()) {
            Symbol s = it.next();
            s.setIgnore(true);
        }
        it.destroy();
    }
    
    [Precedence] newPrecedence(AnyList symbols) {
        return definition.newPrecedence().setAliases(symbols);
    }
    
    [TokenDesc] newToken(Token symbol, Token regex) {
        return definition.newToken(this.getSymbol(symbol)).setDefinition(regex.getValue());
    }

    [Rule] newRule(Token symbol, AnyList rhs, Token precRef, Token code) {
        Rule r = definition.newRule(this.getSymbol(symbol)).setRHS(rhs);
        if (precRef) { r.setPrecedence(this.getPrecRefSymbol(precRef)); }
        if (code) { r.setCode(code.getValue()); }
        return r;
    }
    
    [Symbol] getSymbol(Token t) { return definition.getSymbol(t.getValue());}
    [Symbol] getInlineSymbol(Token t) { return definition.getInlineSymbol(t.getValue());}
    [Symbol] getPrecRefSymbol(Token t) { return definition.getPrecRefSymbol(t.getValue());}

    [AnyList] newList() { return this.createOwn(AnyList:CLASSNAME); }
    [AnyList] addToList(AnyList l, Symbol s) { l.add(s); return l; }
}
