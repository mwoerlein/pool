/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser;

use pool::generator::Symbol;
use pool::generator::parser::grammar::Action;
use pool::generator::parser::grammar::Grammar;
use pool::generator::parser::grammar::Rule;
use pool::generator::parser::grammar::State;

use pool::generator::tokenizer::Token;
use pool::generator::tokenizer::Tokenizer;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::stream::IStream;
use sys::stream::OStream;

class Parser extends sys::core::Object {

    // actions    
    int UNKNOWN      := -2;
    int ERROR        := -1;
    int ACCEPT       := 0;
    int SHIFT        := 1;
    int REDUCE       := 2;
    int SHIFT_REDUCE := 3;
    int IGNORE       := 4;

    abstract [OStream] newError();
    
    abstract [int, int] __getRule(int rule);
    abstract [__any__] __executeRule(int rule, ParseStack s);
    abstract [int] __goto(int state, int symbol);
    abstract [int, int] __action(int state, int type);
    
    [int] _parse(Tokenizer tokens) {
        
        ParseStack stack = this.rt().createInstance(ParseStack:CLASSNAME);
        stack.push(0, null);
        int result = Parser:UNKNOWN;
        
        Token t = tokens.next();
        while (result == Parser:UNKNOWN) {
            [int action, int param] = this.__action(stack.getState(), t.getSymbol());
            if (action == Parser:IGNORE) {
                t.destroy();
                t = tokens.next();
            } else if (action == Parser:ACCEPT) {
                result = Parser:ACCEPT;
            } else if (action == Parser:SHIFT) {
                stack.push(param, t);
                t = tokens.next();
            } else if (action == Parser:REDUCE) {
                [int lhs, int rhsSize] = this.__getRule(param);
                __any__ v = this.__executeRule(param, stack);
                stack.pop(rhsSize);
                int goto = this.__goto(stack.getState(), lhs);
                if (goto < 0) {
                    result = Parser:ERROR;
                    t.debugToStream(tokens.symbolTable(), this.newError().printCString("Parsing error near "));
                } else { stack.push(goto, v); }
            } else if (action == Parser:SHIFT_REDUCE) {
                stack.push(Parser:UNKNOWN, t);
                [int lhs, int rhsSize] = this.__getRule(param);
                __any__ v = this.__executeRule(param, stack);
                stack.pop(rhsSize);
                int goto = this.__goto(stack.getState(), lhs);
                if (goto < 0) {
                    result = Parser:ERROR;
                    t.debugToStream(tokens.symbolTable(), this.newError().printCString("Parsing error near "));
                } else {
                    stack.push(goto, v);
                    t = tokens.next();
                }
            } else if (action == Parser:ERROR) {
                result = Parser:ERROR;
                t.debugToStream(tokens.symbolTable(), this.newError().printCString("Parsing error near "));
            }
        }
        stack.destroy();
        return result == Parser:ACCEPT;
    }

    // TODO: extract model based src-code generation
    global [] genClassFromGrammar(Grammar gram, OStream out) {
        out.printCString(<"
/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
">).printNewline();
        out.printCString("namespace ").print(gram.getNamespace()).printCString(";").printNewline();
        out.printNewline();
        out.printCString("use pool::generator::parser::ParseStack;").printNewline();
        out.printNewline();
        out.printCString("class ").print(gram.getClassname())
            .printCString(" extends ").print(gram.getExtends())
            .printCString(" {").printNewline();
        out.printNewline();
        {
            AnyIterator sit = gram.nonTerminals();
            while (sit.hasNext()) {
                Symbol s = sit.next();
                out.printCString("    int NT_").upperString(s.getName()).printCString(" := ").printInt(s.getId()).printChar(';').printNewline();
            }
            sit.destroy();
        }
        out.printNewline();
        out.printCString("    [int, int] __getRule(int rule) {").printNewline();
        {
            int pos = 0;
            AnyIterator rit = gram.rules();
            while (rit.hasNext()) {
                Rule r = rit.next();
                if (pos++ == 0) {
                    out.printCString("        ");
                } else {
                    out.printCString("        else ");
                }
                out.printCString("if (rule == ").printInt(r.getId()).printCString(") { return [Parser:NT_")
                    .upperString(r.getLHS().getName()).printCString(", ").printInt(r.getRHSSize()).printCString("]; }")
                    .printNewline();
            }
            rit.destroy();
        }
        out.printCString("        return [Parser:ERROR, 0];").printNewline();
        out.printCString("    }").printNewline();
        out.printNewline();
        out.printCString("    [__any__] __executeRule(int rule, ParseStack s) {").printNewline();
        out.printCString("        __any__ result = null;").printNewline();
        {
            int pos = 0;
            AnyIterator rit = gram.rules();
            while (rit.hasNext()) {
                Rule r = rit.next();
                if (pos++ == 0) {
                    out.printCString("        ");
                } else {
                    out.printCString("        else ");
                }
                out.printCString("if (rule == ").printInt(r.getId()).printCString(") ");
                Parser:_genCodeForRule(r, out);
                out.printNewline();
            }
            rit.destroy();
        }
        out.printNewline();        
        out.printCString("        return result;").printNewline();
        out.printCString("    }").printNewline();
        out.printNewline();
        out.printCString("    [int] __goto(int state, int symbol) {").printNewline();
        {
            int pos = 0;
            AnyIterator sit = gram.states();
            while (sit.hasNext()) {
                State s = sit.next();
                if (s.hasGotos()) {
                    if (pos++ == 0) {
                        out.printCString("        ");
                    } else {
                        out.printCString("        } else ");
                    }
                    out.printCString("if (state == ").printInt(s.getId()).printCString(") {").printNewline();
                    {
                        int mpos = 0;
                        AnyMapEntryIterator mit = s.gotos();
                        while (mit.hasNext()) {
                            [Symbol nt, State g] = mit.nextPair();
                            if (mpos++ == 0) {
                                out.printCString("            ");
                            } else {
                                out.printCString("            else ");
                            }
                            out.printCString("if (symbol == Parser:NT_").upperString(nt.getName())
                                .printCString(") { return ").printInt(g.getId()).printCString("; }").printNewline();
                        }
                        mit.destroy();
                    }
                }
            }
            if (pos > 0) {
                out.printCString("        }").printNewline();
            }
            sit.destroy();
        }
        out.printNewline();        
        out.printCString("        return Parser:ERROR;").printNewline();
        out.printCString("    }").printNewline();
        out.printNewline();
        out.printCString("    [int, int] __action(int state, int symbol) {").printNewline();
        {
            int pos = 0;
            AnyIterator sit = gram.terminals();
            while (sit.hasNext()) {
                Symbol s = sit.next();
                if (s.isIgnore()) {
                    if (pos++ == 0) {
                        out.printCString("        if ((symbol == ").print(gram.getTokenizerClassname()).printCString(":T_");
                    } else {
                        out.printCString(") || (symbol == ").print(gram.getTokenizerClassname()).printCString(":T_");
                    }
                    out.upperString(s.getName());
                }
            }
            if (pos > 0) {
                    out.printCString(")) { return [Parser:IGNORE, 0]; }").printNewline();
            }
            sit.destroy();
        }
        {
            int pos = 0;
            AnyIterator sit = gram.states();
            while (sit.hasNext()) {
                State s = sit.next();
                if (s.hasActions()) {
                    if (pos++ == 0) {
                        out.printCString("        ");
                    } else {
                        out.printCString("        } else ");
                    }
                    out.printCString("if (state == ").printInt(s.getId()).printCString(") {").printNewline();
                    {
                        int mpos = 0;
                        AnyMapEntryIterator mit = s.actions();
                        while (mit.hasNext()) {
                            [Symbol t, Action a] = mit.nextPair();
                            if (mpos++ == 0) {
                                out.printCString("            ");
                            } else {
                                out.printCString("            else ");
                            }
                            out.printCString("if (symbol == ").print(gram.getTokenizerClassname()).printCString(":T_").upperString(t.getName()).printCString(") { ");
                            Parser:_genReturnForAction(a, out);
                            out.printCString(" }").printNewline();
                        }
                        mit.destroy();
                        Action defaultAction = s.getDefaultAction();
                        if (defaultAction) {
                            out.printCString("            ");
                            Parser:_genReturnForAction(defaultAction, out);
                            out.printNewline();
                        }
                    }
                }
            }
            if (pos > 0) {
                out.printCString("        }").printNewline();
            }
            sit.destroy();
        }
        out.printNewline();        
        out.printCString("        return [Parser:ERROR, 0];").printNewline();
        out.printCString("    }").printNewline();
        out.printNewline();
        out.printCString("}").printNewline();
    }
    
    global [] _genReturnForAction(Action a, OStream out) {
        if (a.isAccept()) { out.printCString("return [Parser:ACCEPT, 0];"); }
        else if (a.isShiftReduce()) { out.printCString("return [Parser:SHIFT_REDUCE, ").printInt(a.getRule().getId()).printCString("];");}
        else if (a.isReduce()) { out.printCString("return [Parser:REDUCE, ").printInt(a.getRule().getId()).printCString("];");}
        else if (a.isShift()) { out.printCString("return [Parser:SHIFT, ").printInt(a.getState().getId()).printCString("];");}
    }
    
    global [] _genCodeForRule(Rule r, OStream out) {
        IStream in = r.getCode().toIStream();
        int size = r.getRHSSize();
        while (!in.isEmpty()) {
            int c = in.readChar();
            if (c == '$') {
                int pc = in.peekChar();
                if (pc == '$') {
                    in.readChar();
                    out.printCString("result");
                } else if (pc >= '1' && pc <= '9') {
                    int idx = in.readInt();
                    out.printCString("s.at(").printInt(size - idx).printChar(')');
                } else {
                    out.printChar(c);
                }
            } else {
                out.printChar(c);
            }
        }
        in.destroy();
    }
}
