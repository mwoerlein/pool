/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::parser::dfa;


class Factory extends sys::core::Object {

    [DFA] dfa() { return this.rt().createInstance(DFA:CLASSNAME); }
    [Action] action() { return this.rt().createInstance(Action:CLASSNAME); }
    
    [Action] accept() { return this.action().setAccept(); }
    [Action] shift(State s) { return this.action().setShift(s); }
    [Action] reduce(Rule r) { return this.action().setReduce(r); }
    [Action] shiftReduce(Rule r) { return this.action().setShift(null).setReduce(r); }
    
    /* 
     * use manually built parse dfa for regexes until pool::generator is finalized
     */
    [DFA] buildRegexDFA() {
        DFA d = this.dfa();
        
        Symbol tEOI       := d.getEOI();
        Symbol tCHAR      := d.addTerminal("CHAR");
        Symbol tOBRACKET  := d.addTerminal("OBRACKET");
        Symbol tCBRACKET  := d.addTerminal("CBRACKET");
        Symbol tOSBRACKET := d.addTerminal("OSBRACKET");
        Symbol tCSBRACKET := d.addTerminal("CSBRACKET");
        Symbol tQMARK     := d.addTerminal("QMARK");
        Symbol tSTAR      := d.addTerminal("STAR");
        Symbol tPLUS      := d.addTerminal("PLUS");
        Symbol tMINUS     := d.addTerminal("MINUS");
        Symbol tCFLEX     := d.addTerminal("CFLEX");
        Symbol tPIPE      := d.addTerminal("PIPE");
        Symbol tDOT       := d.addTerminal("DOT");
        Symbol tOTHER     := d.addTerminal("OTHER");
        
        Symbol ntEXPRESSION := d.addNonTerminal("expression");    
        Symbol ntALTER      := d.addNonTerminal("alter");    
        Symbol ntCONCAT     := d.addNonTerminal("concat");
        Symbol ntELEM       := d.addNonTerminal("elem");
        Symbol ntEXPR       := d.addNonTerminal("expr");
        Symbol ntCHARSET    := d.addNonTerminal("charset");

        Rule r00 := d.newRule(ntEXPRESSION).addRHS(ntALTER);
        Rule r01 := d.newRule(ntEXPRESSION).addRHS(ntCONCAT);
        Rule r02 := d.newRule(ntALTER).addRHS(ntCONCAT);
        Rule r03 := d.newRule(ntALTER).addRHS(ntALTER).addRHS(tPIPE).addRHS(ntCONCAT);
        Rule r04 := d.newRule(ntCONCAT).addRHS(ntELEM);
        Rule r05 := d.newRule(ntCONCAT).addRHS(ntCONCAT).addRHS(ntELEM);
        Rule r06 := d.newRule(ntELEM).addRHS(ntEXPR);
        Rule r07 := d.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tQMARK);
        Rule r08 := d.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tSTAR);
        Rule r09 := d.newRule(ntEXPR).addRHS(ntEXPR).addRHS(tPLUS);
        Rule r10 := d.newRule(ntEXPR).addRHS(tDOT);
        Rule r11 := d.newRule(ntEXPR).addRHS(tCHAR);
        Rule r12 := d.newRule(ntEXPR).addRHS(tOSBRACKET).addRHS(ntCHARSET).addRHS(tCSBRACKET);
        Rule r13 := d.newRule(ntEXPR).addRHS(tOSBRACKET).addRHS(tCFLEX).addRHS(ntCHARSET).addRHS(tCSBRACKET);
        Rule r14 := d.newRule(ntEXPR).addRHS(tOBRACKET).addRHS(ntALTER).addRHS(tCBRACKET);
        Rule r15 := d.newRule(ntCHARSET).addRHS(tCHAR);
        Rule r16 := d.newRule(ntCHARSET).addRHS(tCHAR).addRHS(tMINUS).addRHS(tCHAR);
        Rule r17 := d.newRule(ntCHARSET).addRHS(ntCHARSET).addRHS(tCHAR);
        Rule r18 := d.newRule(ntCHARSET).addRHS(ntCHARSET).addRHS(tCHAR).addRHS(tMINUS).addRHS(tCHAR);
        // TODO: use and replace $$, $1, $2, ...
        r00.setCode("{ result = this.expression = s.at(0); }");
        r01.setCode("{ result = this.expression = s.at(0); }");
        r02.setCode("{ result = this.listAddNode(this.alter(), this.listToNode(s.at(0))); }");
        r03.setCode("{ result = this.listAddNode(s.at(2), this.listToNode(s.at(0))); }");
        r04.setCode("{ result = this.listAddNode(this.concat(), s.at(0)); }");
        r05.setCode("{ result = this.listAddNode(s.at(1), s.at(0)); }");
        r06.setCode("{ result = s.at(0); }");
        r07.setCode("{ result = this.atMostOnce(s.at(1)); }");
        r08.setCode("{ result = this.any(s.at(1)); }");
        r09.setCode("{ result = this.atLeastOnce(s.at(1)); }");
        r10.setCode("{ result = this.all(); }");
        r11.setCode("{ result = this.single(this.toChar(s.at(0))); }");
        r12.setCode("{ result = this.csToNode(s.at(1)); }");
        r13.setCode("{ result = this.csToExclusiveNode(s.at(1)); }");
        r14.setCode("{ result = this.listToNode(s.at(1)); }");
        r15.setCode("{ result = this.csAddChar(this.cs(), this.toChar(s.at(0))); }");
        r16.setCode("{ result = this.csAddRange(this.cs(), this.toChar(s.at(2)), this.toChar(s.at(0))); }");
        r17.setCode("{ result = this.csAddChar(s.at(1), this.toChar(s.at(0))); }");
        r18.setCode("{ result = this.csAddRange(s.at(3), this.toChar(s.at(2)), this.toChar(s.at(0))); }");

        State sEMPTY := d.newInitState();
        State sExpression := d.newState();
        State sExpr := d.newState();
        State sElem := d.newState();
        State sConcat := d.newState();
        State sAlter := d.newState();
        State sAlterPipe := d.newState();
        State sAlterPipeConcat := d.newState();
        State sOBracket := d.newState();
        State sOBracketExpr := d.newState();
        State sOBracketElem := d.newState();
        State sOBracketConcat := d.newState();
        State sOBracketAlter := d.newState();
        State sOBracketAlterPipe := d.newState();
        State sOBracketAlterPipeConcat := d.newState();
        State sOSBracket := d.newState();
        State sOSBracketCharset := d.newState();
        State sOSBracketCFlex := d.newState();
        State sOSBracketCFlexCharset := d.newState();
        State sChar := d.newState();
        State sCharMinus := d.newState();
        State sCharsetChar := d.newState();
        State sCharsetCharMinus := d.newState();
        State sReduceRule05 := d.newState();
        
        sEMPTY.addAction(tDOT, this.shiftReduce(r10));
        sEMPTY.addAction(tCHAR, this.shiftReduce(r11));
        sEMPTY.addAction(tOBRACKET, this.shift(sOBracket));
        sEMPTY.addAction(tOSBRACKET, this.shift(sOSBracket));
        sEMPTY.addGoto(ntEXPRESSION, sExpression);
        sEMPTY.addGoto(ntEXPR, sExpr);
        sEMPTY.addGoto(ntELEM, sElem);
        sEMPTY.addGoto(ntCONCAT, sConcat);
        sEMPTY.addGoto(ntALTER, sAlter);
        
        sExpression.addAction(tEOI, this.accept());
        
        sExpr.addAction(tEOI, this.reduce(r06));
        sExpr.addAction(tPIPE, this.reduce(r06));
        sExpr.addAction(tDOT, this.reduce(r06));
        sExpr.addAction(tCHAR, this.reduce(r06));
        sExpr.addAction(tOBRACKET, this.reduce(r06));
        sExpr.addAction(tOSBRACKET, this.reduce(r06));
        sExpr.addAction(tQMARK, this.shiftReduce(r07));
        sExpr.addAction(tSTAR, this.shiftReduce(r08));
        sExpr.addAction(tPLUS, this.shiftReduce(r09));
        
        sElem.addAction(tEOI, this.reduce(r04));
        sElem.addAction(tPIPE, this.reduce(r04));
        sElem.addAction(tDOT, this.reduce(r04));
        sElem.addAction(tCHAR, this.reduce(r04));
        sElem.addAction(tOBRACKET, this.reduce(r04));
        sElem.addAction(tOSBRACKET, this.reduce(r04));
        
        sConcat.addAction(tEOI, this.reduce(r01));
        sConcat.addAction(tPIPE, this.reduce(r02));
        sConcat.addAction(tDOT, this.shiftReduce(r10));
        sConcat.addAction(tCHAR, this.shiftReduce(r11));
        sConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sConcat.addGoto(ntEXPR, sExpr);
        sConcat.addGoto(ntELEM, sReduceRule05);
        
        sAlter.addAction(tEOI, this.reduce(r00));
        sAlter.addAction(tPIPE, this.shift(sAlterPipe));
        
        sAlterPipe.addAction(tDOT, this.shiftReduce(r10));
        sAlterPipe.addAction(tCHAR, this.shiftReduce(r11));
        sAlterPipe.addAction(tOBRACKET, this.shift(sOBracket));
        sAlterPipe.addAction(tOSBRACKET, this.shift(sOSBracket));
        sAlterPipe.addGoto(ntEXPR, sExpr);
        sAlterPipe.addGoto(ntELEM, sElem);
        sAlterPipe.addGoto(ntCONCAT, sAlterPipeConcat);
        
        sAlterPipeConcat.addAction(tEOI, this.reduce(r03));
        sAlterPipeConcat.addAction(tPIPE, this.reduce(r03));
        sAlterPipeConcat.addAction(tDOT, this.shiftReduce(r10));
        sAlterPipeConcat.addAction(tCHAR, this.shiftReduce(r11));
        sAlterPipeConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sAlterPipeConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sAlterPipeConcat.addGoto(ntEXPR, sExpr);
        sAlterPipeConcat.addGoto(ntELEM, sReduceRule05);
        
        sOBracket.addAction(tDOT, this.shiftReduce(r10));
        sOBracket.addAction(tCHAR, this.shiftReduce(r11));
        sOBracket.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracket.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracket.addGoto(ntEXPR, sOBracketExpr);
        sOBracket.addGoto(ntELEM, sOBracketElem);
        sOBracket.addGoto(ntCONCAT, sOBracketConcat);
        sOBracket.addGoto(ntALTER, sOBracketAlter);

        sOBracketAlter.addAction(tCBRACKET, this.shiftReduce(r14));
        sOBracketAlter.addAction(tPIPE, this.shift(sOBracketAlterPipe));
        
        sOBracketConcat.addAction(tCBRACKET, this.reduce(r02));
        sOBracketConcat.addAction(tPIPE, this.reduce(r02));
        sOBracketConcat.addAction(tDOT, this.shiftReduce(r10));
        sOBracketConcat.addAction(tCHAR, this.shiftReduce(r11));
        sOBracketConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracketConcat.addGoto(ntEXPR, sOBracketExpr);
        sOBracketConcat.addGoto(ntELEM, sReduceRule05);
        
        sOBracketElem.addAction(tCBRACKET, this.reduce(r04));
        sOBracketElem.addAction(tPIPE, this.reduce(r04));
        sOBracketElem.addAction(tDOT, this.reduce(r04));
        sOBracketElem.addAction(tCHAR, this.reduce(r04));
        sOBracketElem.addAction(tOBRACKET, this.reduce(r04));
        sOBracketElem.addAction(tOSBRACKET, this.reduce(r04));
        
        sOBracketExpr.addAction(tCBRACKET, this.reduce(r06));
        sOBracketExpr.addAction(tPIPE, this.reduce(r06));
        sOBracketExpr.addAction(tDOT, this.reduce(r06));
        sOBracketExpr.addAction(tCHAR, this.reduce(r06));
        sOBracketExpr.addAction(tOBRACKET, this.reduce(r06));
        sOBracketExpr.addAction(tOSBRACKET, this.reduce(r06));
        sOBracketExpr.addAction(tQMARK, this.shiftReduce(r07));
        sOBracketExpr.addAction(tSTAR, this.shiftReduce(r08));
        sOBracketExpr.addAction(tPLUS, this.shiftReduce(r09));
        
        sOBracketAlterPipe.addAction(tDOT, this.shiftReduce(r10));
        sOBracketAlterPipe.addAction(tCHAR, this.shiftReduce(r11));
        sOBracketAlterPipe.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketAlterPipe.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracketAlterPipe.addGoto(ntEXPR, sOBracketExpr);
        sOBracketAlterPipe.addGoto(ntELEM, sOBracketElem);
        sOBracketAlterPipe.addGoto(ntCONCAT, sOBracketAlterPipeConcat);
        
        sOBracketAlterPipeConcat.addAction(tCBRACKET, this.reduce(r03));
        sOBracketAlterPipeConcat.addAction(tPIPE, this.reduce(r03));
        sOBracketAlterPipeConcat.addAction(tDOT, this.shiftReduce(r10));
        sOBracketAlterPipeConcat.addAction(tCHAR, this.shiftReduce(r11));
        sOBracketAlterPipeConcat.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketAlterPipeConcat.addAction(tOSBRACKET, this.shift(sOSBracket));
        sOBracketAlterPipeConcat.addGoto(ntEXPR, sOBracketExpr);
        sOBracketAlterPipeConcat.addGoto(ntELEM, sReduceRule05);
        
        sOSBracket.addAction(tCHAR, this.shift(sChar));
        sOSBracket.addAction(tCFLEX, this.shift(sOSBracketCFlex));
        sOSBracket.addGoto(ntCHARSET, sOSBracketCharset);
        sOSBracketCharset.addAction(tCHAR, this.shift(sCharsetChar));
        sOSBracketCharset.addAction(tCSBRACKET, this.shiftReduce(r12));
        
        sOSBracketCFlex.addAction(tCHAR, this.shift(sChar));
        sOSBracketCFlex.addGoto(ntCHARSET, sOSBracketCFlexCharset);
        sOSBracketCFlexCharset.addAction(tCHAR, this.shift(sCharsetChar));
        sOSBracketCFlexCharset.addAction(tCSBRACKET, this.shiftReduce(r13));
        
        sChar.addAction(tCHAR, this.reduce(r15));
        sChar.addAction(tCSBRACKET, this.reduce(r15));
        sChar.addAction(tMINUS, this.shift(sCharMinus));
        sCharMinus.addAction(tCHAR, this.shiftReduce(r16));
        
        sCharsetChar.addAction(tCHAR, this.reduce(r17));
        sCharsetChar.addAction(tCSBRACKET, this.reduce(r17));
        sCharsetChar.addAction(tMINUS, this.shift(sCharsetCharMinus));
        sCharsetCharMinus.addAction(tCHAR, this.shiftReduce(r18));

        sReduceRule05.setDefaultAction(this.reduce(r05));
        
        return d;
    }
    
    /* 
     * use manually built parser dfa for pasm until pool::generator is finalized
     */
    [DFA] buildPasmDFA() {
        DFA d = this.dfa();
        
        Symbol tEOI        := d.getEOI();
        Symbol tOTHER      := d.addTerminal("OTHER");
        Symbol tIDENTIFIER := d.addTerminal("IDENTIFIER");
        Symbol tREGISTER   := d.addTerminal("REGISTER");
        Symbol tCHAR       := d.addTerminal("CHAR");
        Symbol tSTRING     := d.addTerminal("STRING");
        Symbol tNUMBER     := d.addTerminal("NUMBER");
        Symbol tNEWLINE    := d.addTerminal("NEWLINE");
        Symbol tSPACER     := d.addTerminal("SPACER").setIgnore(true);
        Symbol tCOMMENT    := d.addTerminal("COMMENT").setIgnore(true);
        Symbol tMLCOMMENT  := d.addTerminal("MLCOMMENT").setIgnore(true);
        Symbol tOPERATOR   := d.addTerminal("OPERATOR");
        Symbol tASSIGN     := d.addTerminal("ASSIGN");
        Symbol tOBRACKET   := d.addTerminal("OBRACKET");
        Symbol tCBRACKET   := d.addTerminal("CBRACKET");
        Symbol tCOLON      := d.addTerminal("COLON");
        Symbol tSEMICOLON  := d.addTerminal("SEMICOLON");
        Symbol tCOMMA      := d.addTerminal("COMMA");
        
        Symbol ntUnit := d.addNonTerminal("compilation_unit");    
        Symbol ntLABEL            := d.addNonTerminal("label");
        Symbol ntDEFINITION       := d.addNonTerminal("definition");
        Symbol ntINSTRUCTION      := d.addNonTerminal("instruction");
        Symbol ntEOL              := d.addNonTerminal("eol");
        Symbol ntOPERAND          := d.addNonTerminal("operand");
        Symbol ntINDIRECT         := d.addNonTerminal("indirect");
        Symbol ntFORMULA          := d.addNonTerminal("formula");
        
        Rule r00 := d.newRule(ntUnit);
        Rule r01 := d.newRule(ntUnit).addRHS(ntUnit).addRHS(ntLABEL);
        Rule r02 := d.newRule(ntUnit).addRHS(ntUnit).addRHS(ntDEFINITION);
        Rule r03 := d.newRule(ntUnit).addRHS(ntUnit).addRHS(ntINSTRUCTION);
        Rule r04 := d.newRule(ntUnit).addRHS(ntUnit).addRHS(ntEOL);
        Rule r05 := d.newRule(ntLABEL).addRHS(tIDENTIFIER).addRHS(tCOLON);
        Rule r06 := d.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntEOL);
        Rule r07 := d.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(ntEOL);
        Rule r08 := d.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(ntEOL);
        Rule r09 := d.newRule(ntINSTRUCTION).addRHS(tIDENTIFIER).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(ntEOL);
        Rule r10 := d.newRule(ntDEFINITION).addRHS(tIDENTIFIER).addRHS(tASSIGN).addRHS(ntOPERAND).addRHS(ntEOL);
        Rule r11 := d.newRule(ntEOL).addRHS(tSEMICOLON);
        Rule r12 := d.newRule(ntEOL).addRHS(tNEWLINE);
        Rule r13 := d.newRule(ntOPERAND).addRHS(tIDENTIFIER);
        Rule r14 := d.newRule(ntOPERAND).addRHS(tREGISTER);
        Rule r15 := d.newRule(ntOPERAND).addRHS(tNUMBER);
        Rule r16 := d.newRule(ntOPERAND).addRHS(tCHAR);
        Rule r17 := d.newRule(ntOPERAND).addRHS(tSTRING);
        Rule r18 := d.newRule(ntOPERAND).addRHS(ntINDIRECT);
        Rule r19 := d.newRule(ntOPERAND).addRHS(ntFORMULA);
        Rule r20 := d.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCBRACKET);
        Rule r21 := d.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET);
        Rule r22 := d.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET);
        Rule r23 := d.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET);
        Rule r24 := d.newRule(ntINDIRECT).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET);
        Rule r25 := d.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCBRACKET);
        Rule r26 := d.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET);
        Rule r27 := d.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET);
        Rule r28 := d.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCBRACKET);
        Rule r29 := d.newRule(ntINDIRECT).addRHS(ntOPERAND).addRHS(tOBRACKET).addRHS(tCOMMA).addRHS(ntOPERAND).addRHS(tCOMMA).addRHS(tNUMBER).addRHS(tCBRACKET);
        Rule r30 := d.newRule(ntFORMULA).addRHS(tOBRACKET).addRHS(ntOPERAND).addRHS(tOPERATOR).addRHS(ntOPERAND).addRHS(tCBRACKET);
        // TODO: use and replace $$, $1, $2, ...
        r00.setCode("{ result = unit.getNodeList(); }");
        r01.setCode("{ result = this.pushToList(s.at(1), s.at(0)); }");
        r02.setCode("{ result = this.pushToList(s.at(1), s.at(0)); }");
        r03.setCode("{ result = this.pushToList(s.at(1), s.at(0)); }");
        r04.setCode("{ result = s.at(1); }");
        r05.setCode("{ result = this.createLabel(s.at(1)).node(); }");
        r06.setCode("{ result = this.createInstruction(s.at(1)).node(); }");
        r07.setCode("{ result = this.createInstruction(s.at(2)).setOperand1(s.at(1)).node(); }");
        r08.setCode("{ result = this.createInstruction(s.at(4)).setOperand1(s.at(3)).setOperand2(s.at(1)).node(); }");
        r09.setCode("{ result = this.createInstruction(s.at(6)).setOperand1(s.at(5)).setOperand2(s.at(3)).setOperand3(s.at(1)).node(); }");
        r10.setCode("{ result = this.createDefinition(s.at(3), s.at(1)).node(); }");
        r11.setCode("{ result = s.at(0); }");
        r12.setCode("{ result = s.at(0); }");
        r13.setCode("{ result = this.createIdentifier(s.at(0)).operand(); }");
        r14.setCode("{ result = this.createRegister(s.at(0)).operand(); }");
        r15.setCode("{ result = this.createNumber(s.at(0)).operand(); }");
        r16.setCode("{ result = this.createChar(s.at(0)).operand(); }");
        r17.setCode("{ result = this.createString(s.at(0)).operand(); }");
        r18.setCode("{ result = s.at(0); }");
        r19.setCode("{ result = s.at(0); }");
        r20.setCode("{ result = this.createIndirect().setBase(s.at(1)).operand(); }");
        r21.setCode("{ result = this.createIndirect().setBase(s.at(3)).setIndex(s.at(1)).operand(); }");
        r22.setCode("{ result = this.createIndirect().setBase(s.at(5)).setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }");
        r23.setCode("{ result = this.createIndirect().setIndex(s.at(1)).operand(); }");
        r24.setCode("{ result = this.createIndirect().setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }");
        r25.setCode("{ result = this.createIndirect().setDisplacement(s.at(3)).setBase(s.at(1)).operand(); }");
        r26.setCode("{ result = this.createIndirect().setDisplacement(s.at(5)).setBase(s.at(3)).setIndex(s.at(1)).operand(); }");
        r27.setCode("{ result = this.createIndirect().setDisplacement(s.at(7)).setBase(s.at(5)).setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }");
        r28.setCode("{ result = this.createIndirect().setDisplacement(s.at(4)).setIndex(s.at(1)).operand(); }");
        r29.setCode("{ result = this.createIndirect().setDisplacement(s.at(6)).setIndex(s.at(3)).setScale(this.toInt(s.at(1))).operand(); }");
        r30.setCode("{ result = this.createFormula(s.at(3), s.at(2), s.at(1)).operand(); }");

        State sEMPTY := d.newInitState();
        State sUnit := d.newState();
        State sUnitId := d.newState();
        State sUnitIdAssign := d.newState();
        State sUnitIdAssignOp := d.newState();
        State sUnitIdOp := d.newState();
        State sUnitIdOpComma := d.newState();
        State sUnitIdOpCommaOp := d.newState();
        State sUnitIdOpCommaOpComma:= d.newState();
        State sUnitIdOpCommaOpCommaOp := d.newState();
        State sOBracket := d.newState();
        State sOBracketOp := d.newState();
        State sOBracketOpComma := d.newState();
        State sOBracketOpCommaOp := d.newState();
        State sOBracketOpCommaOpComma := d.newState();
        State sOBracketOpCommaOpCommaNumber := d.newState();
        State sOBracketComma := d.newState();
        State sOBracketCommaOp := d.newState();
        State sOBracketCommaOpComma := d.newState();
        State sOBracketCommaOpCommaNumber := d.newState();
        State sOBracketOpOperator := d.newState();
        State sOBracketOpOperatorOp := d.newState();
        State sOpOBracket := d.newState();
        State sOpOBracketOp := d.newState();
        State sOpOBracketOpComma := d.newState();
        State sOpOBracketOpCommaOp := d.newState();
        State sOpOBracketOpCommaOpComma := d.newState();
        State sOpOBracketOpCommaOpCommaNumber := d.newState();
        State sOpOBracketComma := d.newState();
        State sOpOBracketCommaOp := d.newState();
        State sOpOBracketCommaOpComma := d.newState();
        State sOpOBracketCommaOpCommaNumber := d.newState();

        State sReduceUnitLabel := d.newState();
        State sReduceUnitDefinition := d.newState();
        State sReduceUnitInstruction := d.newState();
        State sReduceUnitEOL := d.newState();
        State sReduceIndirect := d.newState();
        State sReduceFormula := d.newState();
        
        sEMPTY.addAction(tEOI, this.reduce(r00));
        sEMPTY.addAction(tSEMICOLON, this.reduce(r00));
        sEMPTY.addAction(tNEWLINE, this.reduce(r00));
        sEMPTY.addAction(tIDENTIFIER, this.reduce(r00));
        sEMPTY.addGoto(ntUnit, sUnit);
        
        sUnit.addAction(tEOI, this.accept());
        sUnit.addAction(tSEMICOLON, this.shiftReduce(r04));
        sUnit.addAction(tNEWLINE, this.shiftReduce(r04));
        sUnit.addAction(tIDENTIFIER, this.shift(sUnitId));
        sUnit.addGoto(ntLABEL, sReduceUnitLabel);
        sUnit.addGoto(ntDEFINITION, sReduceUnitDefinition);
        sUnit.addGoto(ntINSTRUCTION, sReduceUnitInstruction);
        sUnit.addGoto(ntEOL, sReduceUnitEOL);

        sUnitId.addAction(tCOLON, this.shiftReduce(r05));
        sUnitId.addAction(tEOI, this.shiftReduce(r06));
        sUnitId.addAction(tSEMICOLON, this.shiftReduce(r06));
        sUnitId.addAction(tNEWLINE, this.shiftReduce(r06));
        sUnitId.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitId.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitId.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitId.addAction(tCHAR, this.shiftReduce(r16));
        sUnitId.addAction(tSTRING, this.shiftReduce(r17));
        sUnitId.addAction(tASSIGN, this.shift(sUnitIdAssign));
        sUnitId.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitId.addGoto(ntOPERAND, sUnitIdOp);
        sUnitId.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitId.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdAssign.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitIdAssign.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitIdAssign.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitIdAssign.addAction(tCHAR, this.shiftReduce(r16));
        sUnitIdAssign.addAction(tSTRING, this.shiftReduce(r17));
        sUnitIdAssign.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitIdAssign.addGoto(ntOPERAND, sUnitIdAssignOp);
        sUnitIdAssign.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitIdAssign.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdAssignOp.addAction(tEOI, this.shiftReduce(r10));
        sUnitIdAssignOp.addAction(tSEMICOLON, this.shiftReduce(r10));
        sUnitIdAssignOp.addAction(tNEWLINE, this.shiftReduce(r10));
        sUnitIdAssignOp.addAction(tOBRACKET, this.shift(sOpOBracket));

        sUnitIdOp.addAction(tEOI, this.shiftReduce(r07));
        sUnitIdOp.addAction(tSEMICOLON, this.shiftReduce(r07));
        sUnitIdOp.addAction(tNEWLINE, this.shiftReduce(r07));
        sUnitIdOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sUnitIdOp.addAction(tCOMMA, this.shift(sUnitIdOpComma));

        sUnitIdOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitIdOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitIdOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitIdOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sUnitIdOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sUnitIdOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitIdOpComma.addGoto(ntOPERAND, sUnitIdOpCommaOp);
        sUnitIdOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitIdOpComma.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdOpCommaOp.addAction(tEOI, this.shiftReduce(r08));
        sUnitIdOpCommaOp.addAction(tSEMICOLON, this.shiftReduce(r08));
        sUnitIdOpCommaOp.addAction(tNEWLINE, this.shiftReduce(r08));
        sUnitIdOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sUnitIdOpCommaOp.addAction(tCOMMA, this.shift(sUnitIdOpCommaOpComma));

        sUnitIdOpCommaOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sUnitIdOpCommaOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sUnitIdOpCommaOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sUnitIdOpCommaOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sUnitIdOpCommaOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sUnitIdOpCommaOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sUnitIdOpCommaOpComma.addGoto(ntOPERAND, sUnitIdOpCommaOpCommaOp);
        sUnitIdOpCommaOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sUnitIdOpCommaOpComma.addGoto(ntFORMULA, sReduceFormula);

        sUnitIdOpCommaOpCommaOp.addAction(tEOI, this.shiftReduce(r09));
        sUnitIdOpCommaOpCommaOp.addAction(tSEMICOLON, this.shiftReduce(r09));
        sUnitIdOpCommaOpCommaOp.addAction(tNEWLINE, this.shiftReduce(r09));
        sUnitIdOpCommaOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));

        sOBracketOpOperator.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracketOpOperator.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracketOpOperator.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracketOpOperator.addAction(tCHAR, this.shiftReduce(r16));
        sOBracketOpOperator.addAction(tSTRING, this.shiftReduce(r17));
        sOBracketOpOperator.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketOpOperator.addGoto(ntOPERAND, sOBracketOpOperatorOp);
        sOBracketOpOperator.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracketOpOperator.addGoto(ntFORMULA, sReduceFormula);
        sOBracketOpOperatorOp.addAction(tCBRACKET, this.shiftReduce(r30));

        sOBracket.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracket.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracket.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracket.addAction(tCHAR, this.shiftReduce(r16));
        sOBracket.addAction(tSTRING, this.shiftReduce(r17));
        sOBracket.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracket.addAction(tCOMMA, this.shift(sOBracketComma));
        sOBracket.addGoto(ntOPERAND, sOBracketOp);
        sOBracket.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracket.addGoto(ntFORMULA, sReduceFormula);
        
        sOBracketOp.addAction(tCBRACKET, this.shiftReduce(r20));
        sOBracketOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOBracketOp.addAction(tCOMMA, this.shift(sOBracketOpComma));
        sOBracketOp.addAction(tOPERATOR, this.shift(sOBracketOpOperator));

        sOBracketOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracketOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracketOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracketOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sOBracketOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sOBracketOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketOpComma.addGoto(ntOPERAND, sOBracketOpCommaOp);
        sOBracketOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracketOpComma.addGoto(ntFORMULA, sReduceFormula);

        sOBracketOpCommaOp.addAction(tCBRACKET, this.shiftReduce(r21));
        sOBracketOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOBracketOpCommaOp.addAction(tCOMMA, this.shift(sOBracketOpCommaOpComma));
        sOBracketOpCommaOpComma.addAction(tNUMBER, this.shift(sOBracketOpCommaOpCommaNumber));
        sOBracketOpCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r22));

        sOBracketComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOBracketComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOBracketComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOBracketComma.addAction(tCHAR, this.shiftReduce(r16));
        sOBracketComma.addAction(tSTRING, this.shiftReduce(r17));
        sOBracketComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOBracketComma.addGoto(ntOPERAND, sOBracketCommaOp);
        sOBracketComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOBracketComma.addGoto(ntFORMULA, sReduceFormula);

        sOBracketCommaOp.addAction(tCBRACKET, this.shiftReduce(r23));
        sOBracketCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOBracketCommaOp.addAction(tCOMMA, this.shift(sOBracketCommaOpComma));
        sOBracketCommaOpComma.addAction(tNUMBER, this.shift(sOBracketCommaOpCommaNumber));
        sOBracketCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r24));

        sOpOBracket.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOpOBracket.addAction(tREGISTER, this.shiftReduce(r14));
        sOpOBracket.addAction(tNUMBER, this.shiftReduce(r15));
        sOpOBracket.addAction(tCHAR, this.shiftReduce(r16));
        sOpOBracket.addAction(tSTRING, this.shiftReduce(r17));
        sOpOBracket.addAction(tOBRACKET, this.shift(sOBracket));
        sOpOBracket.addAction(tCOMMA, this.shift(sOpOBracketComma));
        sOpOBracket.addGoto(ntOPERAND, sOpOBracketOp);
        sOpOBracket.addGoto(ntINDIRECT, sReduceIndirect);
        sOpOBracket.addGoto(ntFORMULA, sReduceFormula);
        
        sOpOBracketOp.addAction(tCBRACKET, this.shiftReduce(r25));
        sOpOBracketOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOpOBracketOp.addAction(tCOMMA, this.shift(sOpOBracketOpComma));

        sOpOBracketOpComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOpOBracketOpComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOpOBracketOpComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOpOBracketOpComma.addAction(tCHAR, this.shiftReduce(r16));
        sOpOBracketOpComma.addAction(tSTRING, this.shiftReduce(r17));
        sOpOBracketOpComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOpOBracketOpComma.addGoto(ntOPERAND, sOpOBracketOpCommaOp);
        sOpOBracketOpComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOpOBracketOpComma.addGoto(ntFORMULA, sReduceFormula);

        sOpOBracketOpCommaOp.addAction(tCBRACKET, this.shiftReduce(r26));
        sOpOBracketOpCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOpOBracketOpCommaOp.addAction(tCOMMA, this.shift(sOpOBracketOpCommaOpComma));
        sOpOBracketOpCommaOpComma.addAction(tNUMBER, this.shift(sOpOBracketOpCommaOpCommaNumber));
        sOpOBracketOpCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r27));

        sOpOBracketComma.addAction(tIDENTIFIER, this.shiftReduce(r13));
        sOpOBracketComma.addAction(tREGISTER, this.shiftReduce(r14));
        sOpOBracketComma.addAction(tNUMBER, this.shiftReduce(r15));
        sOpOBracketComma.addAction(tCHAR, this.shiftReduce(r16));
        sOpOBracketComma.addAction(tSTRING, this.shiftReduce(r17));
        sOpOBracketComma.addAction(tOBRACKET, this.shift(sOBracket));
        sOpOBracketComma.addGoto(ntOPERAND, sOpOBracketCommaOp);
        sOpOBracketComma.addGoto(ntINDIRECT, sReduceIndirect);
        sOpOBracketComma.addGoto(ntFORMULA, sReduceFormula);

        sOpOBracketCommaOp.addAction(tCBRACKET, this.shiftReduce(r28));
        sOpOBracketCommaOp.addAction(tOBRACKET, this.shift(sOpOBracket));
        sOpOBracketCommaOp.addAction(tCOMMA, this.shift(sOpOBracketCommaOpComma));
        sOpOBracketCommaOpComma.addAction(tNUMBER, this.shift(sOpOBracketCommaOpCommaNumber));
        sOpOBracketCommaOpCommaNumber.addAction(tCBRACKET, this.shiftReduce(r29));

        sReduceUnitLabel.setDefaultAction(this.reduce(r01));
        sReduceUnitDefinition.setDefaultAction(this.reduce(r02));
        sReduceUnitInstruction.setDefaultAction(this.reduce(r03));
        sReduceUnitEOL.setDefaultAction(this.reduce(r04));
        sReduceIndirect.setDefaultAction(this.reduce(r18));
        sReduceFormula.setDefaultAction(this.reduce(r19));

        return d;
    }
    
}
