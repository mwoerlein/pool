/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::tokenizer;

use pool::generator::SymbolTable;

use sys::core::Object;
use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::stream::OStream;

class Token extends Object {

    int symbol;
    String value;
    
    // Location
    String inputName;
    int firstLine;
    int firstColumn;
    int lastLine;
    int lastColumn;
    
    [Token] init(String v, int s) {
        value = this.createOwn(String:CLASSNAME);
        value.assignString(v);
        symbol = s;
        return this;
    }
    [Token] cinit(cstring v, int s) {
        value = this.createOwn(String:CLASSNAME);
        value.assignCString(v);
        symbol = s;
        return this;
    }
    
    [int] getSymbol() { return symbol; }
    [String] getValue() { return value; }
    [int] toInt() { return value.toInt(); }
    
    [Token] setLocation(String inputName, int firstLine, int firstColumn, int lastLine, int lastColumn) {
        this.inputName = inputName;
        this.firstLine = firstLine;
        this.firstColumn = firstColumn;
        this.lastLine = lastLine;
        this.lastColumn = lastColumn;
        return this;
    }
    
    [OStream] printToStream(OStream stream) {
        return stream.print(value);
    }
    
    [OStream] debugToStream(SymbolTable table, OStream stream) {
        table.debugSymbol(symbol, stream).printChar('(')
            .printInt(firstLine).printChar('/').printInt(firstColumn)
            .printChar('-')
            .printInt(lastLine).printChar('/').printInt(lastColumn)
            .printChar(')');
        return value.escapeToStream(stream.printChar(':'));
    }
    
    [] debugSymbol(OStream stream) {
        if (symbol == Tokenizer:T_EOI) { stream.printCString("EOI"); }
    }
}
