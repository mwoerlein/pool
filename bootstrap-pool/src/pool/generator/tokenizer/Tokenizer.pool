/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::tokenizer;

use pool::generator::CharSet;
use pool::generator::Symbol;
use pool::generator::SymbolTable;

use pool::generator::parser::grammar::Grammar;

use pool::generator::tokenizer::dfa::Action;
use pool::generator::tokenizer::dfa::DFA;
use pool::generator::tokenizer::dfa::State;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::memory::Address;
use sys::stream::IStream;
use sys::stream::OStream;

class Tokenizer extends sys::core::anycollection::AnyIterator, SymbolTable {

    int T_EOI       := -1;
    
    LocationAwareIStream input;
    String tmp;
    String inputName;
    int startLine;
    int startColumn;
    int curLine;
    int curColumn;
    
    Token nextToken;
    Token eoi;
    
    abstract [int] _detectToken();
    
    [Tokenizer] init(IStream in, String inName) {
        input = this.createOwn(LocationAwareIStream:CLASSNAME);
        input.init(in);
        inputName = inName;
        tmp = this.createOwn(String:CLASSNAME);
        eoi = this.createOwn(Token:CLASSNAME);
        eoi.init(tmp, Tokenizer:T_EOI);
        return this;
    }
    
    [int] hasNext() {
        return this._fillToken();
    }
    
    [__all__] next() {
        if (this._fillToken()) {
            Token ret = nextToken;
            nextToken = null;
            return Address:convert(ret);
        }
        return Address:convert(eoi);
    }
    [int] _fillToken() {
        if (nextToken) { return true; }
        startLine = input.getLine();
        startColumn = input.getColumn();
        return this._detectToken();
    }

    [int] _buildNextToken(int symbol) {
        Token t = this.rt().createInstance(Token:CLASSNAME);
        nextToken = t.init(tmp, symbol).setLocation(inputName, startLine, startColumn, curLine, curColumn);
        tmp.clear();
        return true;
    }
    
    [] _consume() {
        curLine = input.getLine();
        curColumn = input.getColumn();
        tmp.printChar(input.readChar());
    }
    [] _skip() {
        curLine = input.getLine();
        curColumn = input.getColumn();
        input.readChar();
    }
    [] _push(int c) {
        tmp.printChar(c);
    }
    [int] _error(cstring msg) {
        this.rt().err().printCString(msg).printNewline();
        return false;
    }
    
    // TODO: extract model based src-code generation
    global [] generateFromGrammar(Grammar gram, pool::storage::PoolStorage storage) {
        DFA d = gram.getTokenizerDFA();
        String ns = gram.getNamespace();
        String classname = gram.getTokenizerClassname();
        String fqn = storage.rt().createInstance(String:CLASSNAME);
        fqn.print(ns).printCString("::").print(classname);
        OStream out = storage.writeElement(fqn, pool::storage::Mimetype:POOL_SRC, null);
        
        State init = d.getInitState();
        out.printChar('/').printChar('*').printCString(<"
[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
generator = parsergen
[source]
mimetype = text/x-pool-grammar
">).printNewline();
        out.printCString("name = ").print(gram.getSourceName()).printNewline()
           .printChar('*').printChar('/').printNewline();
        out.printCString("namespace ").print(ns).printCString(";").printNewline();
        out.printNewline();
        out.printCString("class ").print(classname)
            .printCString(" extends pool::generator::tokenizer::Tokenizer {").printNewline();
        out.printNewline();
        {
            AnyIterator sit = d.symbols();
            while (sit.hasNext()) {
                Symbol s = sit.next();
                out.printCString("    int T_").print(s.getName()).printCString(" := ")
                    .printInt(s.getId()).printChar(';');
                if (s.hasDebug()) { out.printCString(" // ").print(s.getDebug()); }
                out.printNewline();
            }
            sit.destroy();
        }
        out.printNewline();
        out.printCString("    [sys::stream::OStream] debugSymbol(int symbol, sys::stream::OStream stream) {").printNewline();
        out.printCString("        if (symbol == ").print(classname).printCString(":T_EOI) { stream.printCString(\"EOI\"); }").printNewline();
        {
            AnyIterator sit = d.symbols();
            while (sit.hasNext()) {
                Symbol s = sit.next();
                out.printCString("        else if (symbol == ").print(classname).printCString(":T_").print(s.getName())
                    .printCString(") { stream.printCString(");
                if (s.hasDebug()) {
                    out.escapeString(s.getDebug());
                } else {
                    out.escapeString(s.getName());
                }
                out.printCString("); }").printNewline();
            }
            sit.destroy();
        }
        out.printCString("        return stream;").printNewline();
        out.printCString("    }").printNewline();
        out.printNewline();
        out.printCString("    [int] _detectToken() {").printNewline();
        if (init) {
            out.printCString("        int state = ").printInt(init.getId()).printChar(';').printNewline();
            out.printCString("        while (!input.isEmpty()) {").printNewline();
            out.printCString("            int c = input.peekChar();").printNewline();
            
            out.printCString("            if (state == ").printInt(init.getId()).printCString(") {").printNewline();
            Tokenizer:_genRulesForState(init, classname, out);
            
            {
                AnyIterator sit = d.states();
                while (sit.hasNext()) {
                    State s = sit.next();
                    if (s.getId() != init.getId()) {
                        out.printCString("            } else if (state == ").printInt(s.getId()).printCString(") {").printNewline();
                        Tokenizer:_genRulesForState(s, classname, out);
                    }
                }
                sit.destroy();
            }
            out.printCString("            } else {").printNewline();
            out.printCString("                this.rt().err().printCString(\"Unexpected state: \").printInt(state).printNewline();").printNewline();
            out.printCString("                return false;").printNewline();
            out.printCString("            }").printNewline();
            out.printCString("        }").printNewline();
        }
        out.printNewline();
        {
            AnyIterator sit = d.states();
            int pos = 0;
            while (sit.hasNext()) {
                State s = sit.next();
                Action terminal = s.getTerminalAction();
                if (terminal && !s.equals(init)) {
                    if (pos++ == 0) {
                        out.printCString("       ");
                    } else {
                        out.printCString("        else");
                    }
                    out.printCString(" if (state == ").printInt(s.getId()).printChar(')');
                    this._genBlockForAction(terminal, classname, out);
                }
            }
            sit.destroy();
        }
        
        out.printCString("        return false;").printNewline();
        out.printCString("    }").printNewline();
        out.printCString("}").printNewline();
    
        out.destroy();
        fqn.destroy();
    }
    
    global [] _genRulesForState(State s, String classname, OStream out) {
        int pos = 0;
        AnyMapEntryIterator ait = s.actions();
        while ((pos >= 0) && ait.hasNext()) {
            [CharSet cs, Action a] := ait.nextPair();
            if (pos++ == 0) {
                out.printCString("               ");
            } else {
                out.printCString("                else");
            }
            if (cs.isAll()) {
                // abort after this action
                pos = -1;
            } else {
                int lc = cs.getLowestChar();
                int hc = cs.getHighestChar();
                if (lc == hc) {
                    out.printCString(" if (c == ").printInt(lc).printChar(')');
                } else {
                    out.printCString(" if (");
                    int i = 0;
                    int cur = lc;
                    while (cur <= hc) {
                        if (cs.hasChar(cur)) {
                            if (i++) { out.printCString(" || "); }
                            if (cs.hasChar(cur+1) && cs.hasChar(cur+2)) {
                                int start = cur;
                                // skip consecutive characters
                                while (cs.hasChar(++cur)) {}
                                out.printCString("((c >= ").printInt(start).printCString(") && (c <= ").printInt(--cur).printCString("))");
                            } else {
                                out.printCString("(c == ").printInt(cur).printChar(')');
                            }
                        }
                        cur++;
                    }
                    out.printChar(')');
                }
            }
            this._genBlockForAction(a, classname, out);
        }
        Action terminal = s.getTerminalAction();
        if (terminal && (pos != -1)) {
            if (pos == 0) {
                out.printCString("               ");
            } else {
                out.printCString("                else");
            }
            this._genBlockForAction(terminal, classname, out);
        }
        ait.destroy();
    }
    
    global [] _genBlockForAction(Action a, String classname, OStream out) {
        out.printCString(" {");
        if (a.isError()) {
            out.printCString(" return this._error(").escapeString(a.getError()).printCString(");");
        } else {
            if (a.isPush()) { out.printCString(" this._push(").escapeChar(a.getPush()).printCString(");"); }
            if (a.isSkip()) { out.printCString(" this._skip();"); }
            if (a.isShift()) { out.printCString(" this._consume();"); }
            if (a.isGoto()) { out.printCString(" state = ").printInt(a.getTarget().getId()).printChar(';'); }
            if (a.isReturn()) { out.printCString(" return this._buildNextToken(").print(classname).printCString(":T_").print(a.getSymbol().getName()).printCString(");"); }
        }
        out.printCString(" }").printNewline();
    }
}
