/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::tokenizer;

use sys::core::String;
use sys::memory::Address;
use sys::stream::IStream;
use sys::stream::OStream;

class Tokenizer extends sys::core::anycollection::AnyIterator {

    LocationAwareIStream input;
    String tmp;
    String inputName;
    int startLine;
    int startColumn;
    int curLine;
    int curColumn;
    
    Token nextToken;
    Token eoi;
    
    abstract [int] _detectToken();
    
    [Tokenizer] init(IStream in, String inName) {
        input = this.rt().createInstance(LocationAwareIStream:CLASSNAME);
        input.init(in);
        inputName = inName;
        tmp = this.rt().createInstance(String:CLASSNAME);
        eoi = this.rt().createInstance(Token:CLASSNAME);
        eoi.init(tmp, Token:EOI);
        return this;
    }
    [] __destruct() {
        input.destroy();
        tmp.destroy();
        eoi.destroy();
    }
    
    [int] hasNext() {
        return this._fillToken();
    }
    
    [__all__] next() {
        if (this._fillToken()) {
            Token ret = nextToken;
            nextToken = null;
            return Address:convert(ret);
        }
        return Address:convert(eoi);
    }
    [int] _fillToken() {
        if (nextToken) { return true; }
        startLine = input.getLine();
        startColumn = input.getColumn();
        return this._detectToken();
    }
    
    [] _consume() {
        curLine = input.getLine();
        curColumn = input.getColumn();
        tmp.printChar(input.readChar());
    }
    [] _skip() {
        curLine = input.getLine();
        curColumn = input.getColumn();
        input.readChar();
    }
    
    [int] _setNextToken(Token t, int type) {
        nextToken = t.init(tmp, type).setLocation(inputName, startLine, startColumn, curLine, curColumn);
        tmp.clear();
        return true;
    }
}
