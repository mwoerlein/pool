/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex;

use pool::generator::regex::token::Token;
use pool::generator::parser::ParseStack;

class Parser extends BaseParser {

    // symbols
    int EXPRESSION  := 0;    
    int ALTER       := 1;    
    int CONCAT      := 2;
    int ELEM        := 3;
    int EXPR        := 4;
    int CHARSET     := 5;
    
    [] initRules() {
        /*  0 */ this.addRule(Parser:EXPRESSION).symbol(Parser:ALTER);
        /*  1 */ this.addRule(Parser:EXPRESSION).symbol(Parser:CONCAT);
        /*  2 */ this.addRule(Parser:ALTER).symbol(Parser:CONCAT);
        /*  3 */ this.addRule(Parser:ALTER).symbol(Parser:ALTER).terminal(Token:PIPE).symbol(Parser:CONCAT);
        /*  4 */ this.addRule(Parser:CONCAT).symbol(Parser:ELEM);
        /*  5 */ this.addRule(Parser:CONCAT).symbol(Parser:CONCAT).symbol(Parser:ELEM);
        /*  6 */ this.addRule(Parser:ELEM).symbol(Parser:EXPR);
        /*  7 */ this.addRule(Parser:EXPR).symbol(Parser:EXPR).terminal(Token:QMARK);
        /*  8 */ this.addRule(Parser:EXPR).symbol(Parser:EXPR).terminal(Token:STAR);
        /*  9 */ this.addRule(Parser:EXPR).symbol(Parser:EXPR).terminal(Token:PLUS);
        /* 10 */ this.addRule(Parser:EXPR).terminal(Token:DOT);
        /* 11 */ this.addRule(Parser:EXPR).terminal(Token:CHAR);
        /* 12 */ this.addRule(Parser:EXPR).terminal(Token:OSBRACKET).symbol(Parser:CHARSET).terminal(Token:CSBRACKET);
        /* 13 */ this.addRule(Parser:EXPR).terminal(Token:OSBRACKET).terminal(Token:CFLEX).symbol(Parser:CHARSET).terminal(Token:CSBRACKET);
        /* 14 */ this.addRule(Parser:EXPR).terminal(Token:OBRACKET).symbol(Parser:ALTER).terminal(Token:CBRACKET);
        /* 15 */ this.addRule(Parser:CHARSET).terminal(Token:CHAR);
        /* 16 */ this.addRule(Parser:CHARSET).terminal(Token:CHAR).terminal(Token:MINUS).terminal(Token:CHAR);
        /* 17 */ this.addRule(Parser:CHARSET).symbol(Parser:CHARSET).terminal(Token:CHAR);
        /* 18 */ this.addRule(Parser:CHARSET).symbol(Parser:CHARSET).terminal(Token:CHAR).terminal(Token:MINUS).terminal(Token:CHAR);
    }

    [__any__] executeRule(int rule, ParseStack s) {
        __any__ result = null;
        
        // lists
        if (rule ==  0) { result = this.expression = s.at(0); }
        else if (rule ==  1) { result = this.expression = s.at(0); }
        else if (rule ==  2) { result = this.listAddNode(this.alter(), this.listToNode(s.at(0))); }
        else if (rule ==  3) { result = this.listAddNode(s.at(2), this.listToNode(s.at(0))); }
        else if (rule ==  4) { result = this.listAddNode(this.concat(), s.at(0)); }
        else if (rule ==  5) { result = this.listAddNode(s.at(1), s.at(0)); }
        
        // nodes
        else if (rule ==  6) { result = s.at(0); }
        else if (rule ==  7) { result = this.atMostOnce(s.at(1)); }
        else if (rule ==  8) { result = this.any(s.at(1)); }
        else if (rule ==  9) { result = this.atLeastOnce(s.at(1)); }
        else if (rule == 10) { result = this.all(); }
        else if (rule == 11) { result = this.single(this.toChar(s.at(0))); }
        else if (rule == 12) { result = this.csToNode(s.at(1)); }
        else if (rule == 13) { result = this.csToExclusiveNode(s.at(1)); }
        else if (rule == 14) { result = this.listToNode(s.at(1)); }
        
        // char sets
        else if (rule == 15) { result = this.csAddChar(this.cs(), this.toChar(s.at(0))); }
        else if (rule == 16) { result = this.csAddRange(this.cs(), this.toChar(s.at(2)), this.toChar(s.at(0))); }
        else if (rule == 17) { result = this.csAddChar(s.at(1), this.toChar(s.at(0))); }
        else if (rule == 18) { result = this.csAddRange(s.at(3), this.toChar(s.at(2)), this.toChar(s.at(0))); }
        
        // unknown rule
        else {}
        
        return result;
    }
    
    [int] goto(int state, int symbol) {
        if (state == 0) { // <EMPTY>
            if (symbol == Parser:EXPRESSION)    { return 1; }
            else if (symbol == Parser:ALTER)    { return 2; }
            else if (symbol == Parser:CONCAT)   { return 3; }
            else if (symbol == Parser:ELEM)     { return 4; }
            else if (symbol == Parser:EXPR)     { return 5; }
        } else if (state == 3) { // concat
            if (symbol == Parser:ELEM)          { return 10005; }
            else if (symbol == Parser:EXPR)     { return 14; }
        } else if (state == 11) { // alter '|'
            if (symbol == Parser:CONCAT)        { return 12; }
            else if (symbol == Parser:ELEM)     { return 13; }
            else if (symbol == Parser:EXPR)     { return 14; }
        } else if (state == 12) { // alter '|' concat
            if (symbol == Parser:ELEM)          { return 10005; }
            else if (symbol == Parser:EXPR)     { return 14; }

        } else if (state == 100) { // .. '('
            if (symbol == Parser:ALTER)         { return 101; }
            else if (symbol == Parser:CONCAT)   { return 102; }
            else if (symbol == Parser:ELEM)     { return 103; }
            else if (symbol == Parser:EXPR)     { return 104; }
        } else if (state == 102) { // .. '(' concat
            if (symbol == Parser:ELEM)          { return 10005; }
            else if (symbol == Parser:EXPR)     { return 104; }
        } else if (state == 111) { // .. '(' alter '|'
            if (symbol == Parser:CONCAT)        { return 112; }
            else if (symbol == Parser:ELEM)     { return 113; }
            else if (symbol == Parser:EXPR)     { return 114; }
        } else if (state == 112) { // .. '(' alter '|' concat
            if (symbol == Parser:ELEM)          { return 10005; }
            else if (symbol == Parser:EXPR)     { return 104; }
            
        } else if (state == 200) { // .. '['
            if (symbol == Parser:CHARSET)       { return 203; }
            
        } else if (state == 300) { // .. '[' '^'
            if (symbol == Parser:CHARSET)       { return 303; }
        }
        
        this.rt().out().printCString("missing goto ").printInt(state).printChar(' ').printInt(symbol).printNewline();
        return Parser:ERROR;
    }
    
    [int, int] action(int state, int type) {
        if (state == 0) { // <EMPTY>
            if (type == Token:DOT)              { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 1) { // expression
            if (type == Token:EOI)              { return [Parser:ACCEPT, 0]; }
        } else if (state == 2) { // alter
            if (type == Token:EOI)              { return [Parser:REDUCE, 0]; }
            else if (type == Token:PIPE)        { return [Parser:SHIFT, 11]; }
        } else if (state == 3) { // concat
            if (type == Token:EOI)              { return [Parser:REDUCE, 1]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 2]; }
            else if (type == Token:DOT)         { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 4) { // elem
            if (type == Token:EOI)              { return [Parser:REDUCE, 4]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 4]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 4]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 4]; }
        } else if (state == 5) { // expr
            if (type == Token:EOI)              { return [Parser:REDUCE, 6]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 6]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 6]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 6]; }
            else if (type == Token:QMARK)       { return [Parser:SHIFT_REDUCE, 7]; }
            else if (type == Token:STAR)        { return [Parser:SHIFT_REDUCE, 8]; }
            else if (type == Token:PLUS)        { return [Parser:SHIFT_REDUCE, 9]; }
        } else if (state == 11) { // alter '|'
            if (type == Token:DOT)              { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 12) { // alter '|' concat
            if (type == Token:EOI)              { return [Parser:REDUCE, 3]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 3]; }
            else if (type == Token:DOT)         { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 13) { // alter '|' elem
            if (type == Token:EOI)              { return [Parser:REDUCE, 4]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 4]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 4]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 4]; }
        } else if (state == 14) { // alter '|' expr
            if (type == Token:EOI)              { return [Parser:REDUCE, 6]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 6]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 6]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 6]; }
            else if (type == Token:QMARK)       { return [Parser:SHIFT_REDUCE, 7]; }
            else if (type == Token:STAR)        { return [Parser:SHIFT_REDUCE, 8]; }
            else if (type == Token:PLUS)        { return [Parser:SHIFT_REDUCE, 9]; }
            
        } else if (state == 100) { // .. '('
            if (type == Token:DOT)              { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 101) { // .. '(' alter
            if (type == Token:CBRACKET)         { return [Parser:SHIFT_REDUCE, 14]; }
            else if (type == Token:PIPE)        { return [Parser:SHIFT, 111]; }
        } else if (state == 102) { // .. '(' concat
            if (type == Token:CBRACKET)         { return [Parser:REDUCE, 2]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 2]; }
            else if (type == Token:DOT)         { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 103) { // .. '(' elem
            if (type == Token:CBRACKET)         { return [Parser:REDUCE, 4]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 4]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 4]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 4]; }
        } else if (state == 104) { // .. '(' expr
            if (type == Token:CBRACKET)         { return [Parser:REDUCE, 6]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 6]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 6]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 6]; }
            else if (type == Token:QMARK)       { return [Parser:SHIFT_REDUCE, 7]; }
            else if (type == Token:STAR)        { return [Parser:SHIFT_REDUCE, 8]; }
            else if (type == Token:PLUS)        { return [Parser:SHIFT_REDUCE, 9]; }
        } else if (state == 111) { // .. '(' alter '|'
            if (type == Token:DOT)              { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 112) { // .. '(' alter '|' concat
            if (type == Token:CBRACKET)         { return [Parser:REDUCE, 3]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 3]; }
            else if (type == Token:DOT)         { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR)        { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET)    { return [Parser:SHIFT, 100]; }
            else if (type == Token:OSBRACKET)   { return [Parser:SHIFT, 200]; }
        } else if (state == 113) { // .. '(' alter '|' elem
            if (type == Token:CBRACKET)         { return [Parser:REDUCE, 4]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 4]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 4]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 4]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 4]; }
        } else if (state == 114) { // .. '(' alter '|' expr
            if (type == Token:CBRACKET)         { return [Parser:REDUCE, 6]; }
            else if (type == Token:DOT)         { return [Parser:REDUCE, 6]; }
            else if (type == Token:CHAR)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:PIPE)        { return [Parser:REDUCE, 6]; }
            else if (type == Token:OBRACKET)    { return [Parser:REDUCE, 6]; }
            else if (type == Token:OSBRACKET)   { return [Parser:REDUCE, 6]; }
            else if (type == Token:QMARK)       { return [Parser:SHIFT_REDUCE, 7]; }
            else if (type == Token:STAR)        { return [Parser:SHIFT_REDUCE, 8]; }
            else if (type == Token:PLUS)        { return [Parser:SHIFT_REDUCE, 9]; }
            
        } else if (state == 200) { // .. '['
            if (type == Token:CHAR)             { return [Parser:SHIFT, 201]; }
            else if (type == Token:CFLEX)       { return [Parser:SHIFT, 300]; }
        } else if (state == 201) { // .. '[' CHAR
            if (type == Token:CHAR)             { return [Parser:REDUCE, 15]; }
            else if (type == Token:CSBRACKET)   { return [Parser:REDUCE, 15]; }
            else if (type == Token:MINUS)       { return [Parser:SHIFT, 202]; }
        } else if (state == 202) { // .. '[' CHAR MINUS
            if (type == Token:CHAR)             { return [Parser:SHIFT_REDUCE, 16]; }
        } else if (state == 203) { // .. '[' charset
            if (type == Token:CHAR)             { return [Parser:SHIFT, 204]; }
            else if (type == Token:CSBRACKET)   { return [Parser:SHIFT_REDUCE, 12]; }
        } else if (state == 204) { // .. '[' charset CHAR
            if (type == Token:CHAR)             { return [Parser:REDUCE, 17]; }
            else if (type == Token:CSBRACKET)   { return [Parser:REDUCE, 17]; }
            else if (type == Token:MINUS)       { return [Parser:SHIFT, 205]; }
        } else if (state == 205) { // .. '[' charset CHAR MINUS
            if (type == Token:CHAR)             { return [Parser:SHIFT_REDUCE, 18]; }
            
        } else if (state == 300) { // .. '[' '^'
            if (type == Token:CHAR)             { return [Parser:SHIFT, 301]; }
        } else if (state == 301) { // .. '[' '^' CHAR
            if (type == Token:CHAR)             { return [Parser:REDUCE, 15]; }
            else if (type == Token:CSBRACKET)   { return [Parser:REDUCE, 15]; }
            else if (type == Token:MINUS)       { return [Parser:SHIFT, 302]; }
        } else if (state == 302) { // .. '[' '^' CHAR MINUS
            if (type == Token:CHAR)             { return [Parser:SHIFT_REDUCE, 16]; }
        } else if (state == 303) { // .. '[' '^' charset
            if (type == Token:CHAR)             { return [Parser:SHIFT, 304]; }
            else if (type == Token:CSBRACKET)   { return [Parser:SHIFT_REDUCE, 13]; }
        } else if (state == 304) { // .. '[' '^' charset CHAR
            if (type == Token:CHAR)             { return [Parser:REDUCE, 17]; }
            else if (type == Token:CSBRACKET)   { return [Parser:REDUCE, 17]; }
            else if (type == Token:MINUS)       { return [Parser:SHIFT, 305]; }
        } else if (state == 305) { // .. '[' '^' charset CHAR MINUS
            if (type == Token:CHAR)             { return [Parser:SHIFT_REDUCE, 18]; }
        }
        
        // goto reduce targets
        else if (state == 10000) { return [Parser:REDUCE,  0]; } // expression: alter
        else if (state == 10001) { return [Parser:REDUCE,  1]; } // expression: concat
        else if (state == 10002) { return [Parser:REDUCE,  2]; } // alter: concat
        else if (state == 10003) { return [Parser:REDUCE,  3]; } // alter: alter PIPE concat
        else if (state == 10004) { return [Parser:REDUCE,  4]; } // concat: elem
        else if (state == 10005) { return [Parser:REDUCE,  5]; } // concat: concat elem
        else if (state == 10006) { return [Parser:REDUCE,  6]; } // elem: expr
        else if (state == 10007) { return [Parser:REDUCE,  7]; } // expr: expr QMARK
        else if (state == 10008) { return [Parser:REDUCE,  8]; } // expr: expr STAR
        else if (state == 10009) { return [Parser:REDUCE,  9]; } // expr: expr PLUS
        else if (state == 10010) { return [Parser:REDUCE, 10]; } // expr: DOT
        else if (state == 10011) { return [Parser:REDUCE, 11]; } // expr: CHAR
        else if (state == 10012) { return [Parser:REDUCE, 12]; } // expr: OSBRACKET charset CSBRACKET
        else if (state == 10013) { return [Parser:REDUCE, 13]; } // expr: OSBRACKET CFLEX charset CSBRACKET
        else if (state == 10014) { return [Parser:REDUCE, 14]; } // expr: OBRACKET alter CBRACKET
        else if (state == 10015) { return [Parser:REDUCE, 15]; } // charset: CHAR
        else if (state == 10016) { return [Parser:REDUCE, 16]; } // charset: CHAR MINUS CHAR
        else if (state == 10017) { return [Parser:REDUCE, 17]; } // charset: charset CHAR
        else if (state == 10018) { return [Parser:REDUCE, 18]; } // charset: charset CHAR MINUS CHAR
        
        return [Parser:ERROR, 0];
    }
}
