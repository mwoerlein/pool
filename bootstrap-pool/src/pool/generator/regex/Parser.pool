/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex;

use pool::generator::regex::token::Token;
use pool::generator::parser::ParseStack;

class Parser extends BaseParser {

    int EXPRESSION := 0;
    int ALTER := 1;
    int CONCAT := 2;
    int ELEM := 3;
    int EXPR := 4;
    int CHARSET := 5;

    [] __initRules() {
        this.addRule(Parser:EXPRESSION).symbol(Parser:ALTER);
        this.addRule(Parser:EXPRESSION).symbol(Parser:CONCAT);
        this.addRule(Parser:ALTER).symbol(Parser:CONCAT);
        this.addRule(Parser:ALTER).symbol(Parser:ALTER).terminal(Token:PIPE).symbol(Parser:CONCAT);
        this.addRule(Parser:CONCAT).symbol(Parser:ELEM);
        this.addRule(Parser:CONCAT).symbol(Parser:CONCAT).symbol(Parser:ELEM);
        this.addRule(Parser:ELEM).symbol(Parser:EXPR);
        this.addRule(Parser:EXPR).symbol(Parser:EXPR).terminal(Token:QMARK);
        this.addRule(Parser:EXPR).symbol(Parser:EXPR).terminal(Token:STAR);
        this.addRule(Parser:EXPR).symbol(Parser:EXPR).terminal(Token:PLUS);
        this.addRule(Parser:EXPR).terminal(Token:DOT);
        this.addRule(Parser:EXPR).terminal(Token:CHAR);
        this.addRule(Parser:EXPR).terminal(Token:OSBRACKET).symbol(Parser:CHARSET).terminal(Token:CSBRACKET);
        this.addRule(Parser:EXPR).terminal(Token:OSBRACKET).terminal(Token:CFLEX).symbol(Parser:CHARSET).terminal(Token:CSBRACKET);
        this.addRule(Parser:EXPR).terminal(Token:OBRACKET).symbol(Parser:ALTER).terminal(Token:CBRACKET);
        this.addRule(Parser:CHARSET).terminal(Token:CHAR);
        this.addRule(Parser:CHARSET).terminal(Token:CHAR).terminal(Token:MINUS).terminal(Token:CHAR);
        this.addRule(Parser:CHARSET).symbol(Parser:CHARSET).terminal(Token:CHAR);
        this.addRule(Parser:CHARSET).symbol(Parser:CHARSET).terminal(Token:CHAR).terminal(Token:MINUS).terminal(Token:CHAR);
    }

    [__any__] __executeRule(int rule, ParseStack s) {
        __any__ result = null;
        if (rule == 0) { result = this.expression = s.at(0); }
        else if (rule == 1) { result = this.expression = s.at(0); }
        else if (rule == 2) { result = this.listAddNode(this.alter(), this.listToNode(s.at(0))); }
        else if (rule == 3) { result = this.listAddNode(s.at(2), this.listToNode(s.at(0))); }
        else if (rule == 4) { result = this.listAddNode(this.concat(), s.at(0)); }
        else if (rule == 5) { result = this.listAddNode(s.at(1), s.at(0)); }
        else if (rule == 6) { result = s.at(0); }
        else if (rule == 7) { result = this.atMostOnce(s.at(1)); }
        else if (rule == 8) { result = this.any(s.at(1)); }
        else if (rule == 9) { result = this.atLeastOnce(s.at(1)); }
        else if (rule == 10) { result = this.all(); }
        else if (rule == 11) { result = this.single(this.toChar(s.at(0))); }
        else if (rule == 12) { result = this.csToNode(s.at(1)); }
        else if (rule == 13) { result = this.csToExclusiveNode(s.at(1)); }
        else if (rule == 14) { result = this.listToNode(s.at(1)); }
        else if (rule == 15) { result = this.csAddChar(this.cs(), this.toChar(s.at(0))); }
        else if (rule == 16) { result = this.csAddRange(this.cs(), this.toChar(s.at(2)), this.toChar(s.at(0))); }
        else if (rule == 17) { result = this.csAddChar(s.at(1), this.toChar(s.at(0))); }
        else if (rule == 18) { result = this.csAddRange(s.at(3), this.toChar(s.at(2)), this.toChar(s.at(0))); }

        return result;
    }

    [int] __goto(int state, int symbol) {
        if (state == 0) {
            if (symbol == Parser:EXPRESSION) { return 1; }
            else if (symbol == Parser:EXPR) { return 2; }
            else if (symbol == Parser:ELEM) { return 3; }
            else if (symbol == Parser:CONCAT) { return 4; }
            else if (symbol == Parser:ALTER) { return 5; }
        } else if (state == 4) {
            if (symbol == Parser:EXPR) { return 2; }
            else if (symbol == Parser:ELEM) { return 23; }
        } else if (state == 6) {
            if (symbol == Parser:EXPR) { return 2; }
            else if (symbol == Parser:ELEM) { return 3; }
            else if (symbol == Parser:CONCAT) { return 7; }
        } else if (state == 7) {
            if (symbol == Parser:EXPR) { return 2; }
            else if (symbol == Parser:ELEM) { return 23; }
        } else if (state == 8) {
            if (symbol == Parser:EXPR) { return 9; }
            else if (symbol == Parser:ELEM) { return 10; }
            else if (symbol == Parser:CONCAT) { return 11; }
            else if (symbol == Parser:ALTER) { return 12; }
        } else if (state == 11) {
            if (symbol == Parser:EXPR) { return 9; }
            else if (symbol == Parser:ELEM) { return 23; }
        } else if (state == 13) {
            if (symbol == Parser:EXPR) { return 9; }
            else if (symbol == Parser:ELEM) { return 10; }
            else if (symbol == Parser:CONCAT) { return 14; }
        } else if (state == 14) {
            if (symbol == Parser:EXPR) { return 9; }
            else if (symbol == Parser:ELEM) { return 23; }
        } else if (state == 15) {
            if (symbol == Parser:CHARSET) { return 16; }
        } else if (state == 17) {
            if (symbol == Parser:CHARSET) { return 18; }
        }

        return Parser:ERROR;
    }

    [int, int] __action(int state, int type) {
        if (state == 0) {
            if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 1) {
            if (type == Token:EOI) { return [Parser:ACCEPT, 0]; }
        } else if (state == 2) {
            if (type == Token:EOI) { return [Parser:REDUCE, 6]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 6]; }
            else if (type == Token:DOT) { return [Parser:REDUCE, 6]; }
            else if (type == Token:CHAR) { return [Parser:REDUCE, 6]; }
            else if (type == Token:OBRACKET) { return [Parser:REDUCE, 6]; }
            else if (type == Token:OSBRACKET) { return [Parser:REDUCE, 6]; }
            else if (type == Token:QMARK) { return [Parser:SHIFT_REDUCE, 7]; }
            else if (type == Token:STAR) { return [Parser:SHIFT_REDUCE, 8]; }
            else if (type == Token:PLUS) { return [Parser:SHIFT_REDUCE, 9]; }
        } else if (state == 3) {
            if (type == Token:EOI) { return [Parser:REDUCE, 4]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 4]; }
            else if (type == Token:DOT) { return [Parser:REDUCE, 4]; }
            else if (type == Token:CHAR) { return [Parser:REDUCE, 4]; }
            else if (type == Token:OBRACKET) { return [Parser:REDUCE, 4]; }
            else if (type == Token:OSBRACKET) { return [Parser:REDUCE, 4]; }
        } else if (state == 4) {
            if (type == Token:EOI) { return [Parser:REDUCE, 1]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 2]; }
            else if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 5) {
            if (type == Token:EOI) { return [Parser:REDUCE, 0]; }
            else if (type == Token:PIPE) { return [Parser:SHIFT, 6]; }
        } else if (state == 6) {
            if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 7) {
            if (type == Token:EOI) { return [Parser:REDUCE, 3]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 3]; }
            else if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 8) {
            if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 9) {
            if (type == Token:CBRACKET) { return [Parser:REDUCE, 6]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 6]; }
            else if (type == Token:DOT) { return [Parser:REDUCE, 6]; }
            else if (type == Token:CHAR) { return [Parser:REDUCE, 6]; }
            else if (type == Token:OBRACKET) { return [Parser:REDUCE, 6]; }
            else if (type == Token:OSBRACKET) { return [Parser:REDUCE, 6]; }
            else if (type == Token:QMARK) { return [Parser:SHIFT_REDUCE, 7]; }
            else if (type == Token:STAR) { return [Parser:SHIFT_REDUCE, 8]; }
            else if (type == Token:PLUS) { return [Parser:SHIFT_REDUCE, 9]; }
        } else if (state == 10) {
            if (type == Token:CBRACKET) { return [Parser:REDUCE, 4]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 4]; }
            else if (type == Token:DOT) { return [Parser:REDUCE, 4]; }
            else if (type == Token:CHAR) { return [Parser:REDUCE, 4]; }
            else if (type == Token:OBRACKET) { return [Parser:REDUCE, 4]; }
            else if (type == Token:OSBRACKET) { return [Parser:REDUCE, 4]; }
        } else if (state == 11) {
            if (type == Token:CBRACKET) { return [Parser:REDUCE, 2]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 2]; }
            else if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 12) {
            if (type == Token:CBRACKET) { return [Parser:SHIFT_REDUCE, 14]; }
            else if (type == Token:PIPE) { return [Parser:SHIFT, 13]; }
        } else if (state == 13) {
            if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 14) {
            if (type == Token:CBRACKET) { return [Parser:REDUCE, 3]; }
            else if (type == Token:PIPE) { return [Parser:REDUCE, 3]; }
            else if (type == Token:DOT) { return [Parser:SHIFT_REDUCE, 10]; }
            else if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 11]; }
            else if (type == Token:OBRACKET) { return [Parser:SHIFT, 8]; }
            else if (type == Token:OSBRACKET) { return [Parser:SHIFT, 15]; }
        } else if (state == 15) {
            if (type == Token:CHAR) { return [Parser:SHIFT, 19]; }
            else if (type == Token:CFLEX) { return [Parser:SHIFT, 17]; }
        } else if (state == 16) {
            if (type == Token:CHAR) { return [Parser:SHIFT, 21]; }
            else if (type == Token:CSBRACKET) { return [Parser:SHIFT_REDUCE, 12]; }
        } else if (state == 17) {
            if (type == Token:CHAR) { return [Parser:SHIFT, 19]; }
        } else if (state == 18) {
            if (type == Token:CHAR) { return [Parser:SHIFT, 21]; }
            else if (type == Token:CSBRACKET) { return [Parser:SHIFT_REDUCE, 13]; }
        } else if (state == 19) {
            if (type == Token:CHAR) { return [Parser:REDUCE, 15]; }
            else if (type == Token:CSBRACKET) { return [Parser:REDUCE, 15]; }
            else if (type == Token:MINUS) { return [Parser:SHIFT, 20]; }
        } else if (state == 20) {
            if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 16]; }
        } else if (state == 21) {
            if (type == Token:CHAR) { return [Parser:REDUCE, 17]; }
            else if (type == Token:CSBRACKET) { return [Parser:REDUCE, 17]; }
            else if (type == Token:MINUS) { return [Parser:SHIFT, 22]; }
        } else if (state == 22) {
            if (type == Token:CHAR) { return [Parser:SHIFT_REDUCE, 18]; }
        } else if (state == 23) {
            return [Parser:REDUCE, 5];
        }

        return [Parser:ERROR, 0];
    }

}
