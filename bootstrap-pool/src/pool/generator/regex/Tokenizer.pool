/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
generator = parsergen
[source]
mimetype = text/x-pool-grammar
name = ./src/pool/generator/regex/Parser.gram
*/
namespace pool::generator::regex;

class Tokenizer extends pool::generator::tokenizer::Tokenizer {

    int T_ERROR := -2;
    int T_INLINE_5 := 1;
    int T_INLINE_8 := 2;
    int T_INLINE_9 := 3;
    int T_INLINE_10 := 4;
    int T_INLINE_11 := 5;
    int T_INLINE_12 := 6;
    int T_INLINE_14 := 7;
    int T_INLINE_15 := 8;
    int T_INLINE_16 := 9;
    int T_INLINE_17 := 10;
    int T_INLINE_18 := 11;
    int T_CHAR := 0;

    [sys::stream::OStream] debugSymbol(int symbol, sys::stream::OStream stream) {
        if (symbol == Tokenizer:T_EOI) { stream.printCString("EOI"); }
        else if (symbol == Tokenizer:T_ERROR) { stream.printCString("ERROR"); }
        else if (symbol == Tokenizer:T_INLINE_5) { stream.printCString("INLINE_5"); }
        else if (symbol == Tokenizer:T_INLINE_8) { stream.printCString("INLINE_8"); }
        else if (symbol == Tokenizer:T_INLINE_9) { stream.printCString("INLINE_9"); }
        else if (symbol == Tokenizer:T_INLINE_10) { stream.printCString("INLINE_10"); }
        else if (symbol == Tokenizer:T_INLINE_11) { stream.printCString("INLINE_11"); }
        else if (symbol == Tokenizer:T_INLINE_12) { stream.printCString("INLINE_12"); }
        else if (symbol == Tokenizer:T_INLINE_14) { stream.printCString("INLINE_14"); }
        else if (symbol == Tokenizer:T_INLINE_15) { stream.printCString("INLINE_15"); }
        else if (symbol == Tokenizer:T_INLINE_16) { stream.printCString("INLINE_16"); }
        else if (symbol == Tokenizer:T_INLINE_17) { stream.printCString("INLINE_17"); }
        else if (symbol == Tokenizer:T_INLINE_18) { stream.printCString("INLINE_18"); }
        else if (symbol == Tokenizer:T_CHAR) { stream.printCString("CHAR"); }
        return stream;
    }

    [int] _detectToken() {
        int state = 0;
        while (!input.isEmpty()) {
            int c = input.peekChar();
            if (state == 0) {
                if (((c >= 0) && (c <= 39)) || (c == 44) || ((c >= 48) && (c <= 62)) || ((c >= 64) && (c <= 90)) || ((c >= 95) && (c <= 123)) || ((c >= 125) && (c <= 255))) { this._consume(); return this._buildNextToken(Tokenizer:T_CHAR); }
                else if (c == 40) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_16); }
                else if (c == 41) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_17); }
                else if (c == 42) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_9); }
                else if (c == 43) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_10); }
                else if (c == 45) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_18); }
                else if (c == 46) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_11); }
                else if (c == 63) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_8); }
                else if (c == 91) { this._consume(); state = 1; }
                else if (c == 92) { this._consume(); state = 2; }
                else if (c == 93) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_14); }
                else if (c == 124) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_5); }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 1) {
                if (c == 94) { this._consume(); return this._buildNextToken(Tokenizer:T_INLINE_15); }
                else { return this._buildNextToken(Tokenizer:T_INLINE_12); }
            } else if (state == 2) {
                if (((c >= 40) && (c <= 43)) || ((c >= 45) && (c <= 47)) || (c == 63) || ((c >= 91) && (c <= 94)) || (c == 110) || (c == 114) || (c == 116) || (c == 124)) { this._consume(); return this._buildNextToken(Tokenizer:T_CHAR); }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else {
                this.rt().err().printCString("Unexpected state: ").printInt(state).printNewline();
                return false;
            }
        }

        if (state == 1) { return this._buildNextToken(Tokenizer:T_INLINE_12); }
        else if (state == 2) { return this._buildNextToken(Tokenizer:T_ERROR); }
        return false;
    }
}
