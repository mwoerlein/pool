/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex;

class Tokenizer extends pool::generator::tokenizer::Tokenizer {

    int T_ERROR := -2;
    int T_CHAR := 0;
    int T_OBRACKET := 1;
    int T_CBRACKET := 2;
    int T_OSBRACKET := 3;
    int T_CSBRACKET := 4;
    int T_QMARK := 5;
    int T_STAR := 6;
    int T_PLUS := 7;
    int T_MINUS := 8;
    int T_CFLEX := 9;
    int T_PIPE := 10;
    int T_DOT := 11;

    [sys::stream::OStream] debugSymbol(int symbol, sys::stream::OStream stream) {
        if (symbol == Tokenizer:T_EOI) { stream.printCString("EOI"); }
        else if (symbol == Tokenizer:T_ERROR) { stream.printCString("ERROR"); }
        else if (symbol == Tokenizer:T_CHAR) { stream.printCString("CHAR"); }
        else if (symbol == Tokenizer:T_OBRACKET) { stream.printCString("OBRACKET"); }
        else if (symbol == Tokenizer:T_CBRACKET) { stream.printCString("CBRACKET"); }
        else if (symbol == Tokenizer:T_OSBRACKET) { stream.printCString("OSBRACKET"); }
        else if (symbol == Tokenizer:T_CSBRACKET) { stream.printCString("CSBRACKET"); }
        else if (symbol == Tokenizer:T_QMARK) { stream.printCString("QMARK"); }
        else if (symbol == Tokenizer:T_STAR) { stream.printCString("STAR"); }
        else if (symbol == Tokenizer:T_PLUS) { stream.printCString("PLUS"); }
        else if (symbol == Tokenizer:T_MINUS) { stream.printCString("MINUS"); }
        else if (symbol == Tokenizer:T_CFLEX) { stream.printCString("CFLEX"); }
        else if (symbol == Tokenizer:T_PIPE) { stream.printCString("PIPE"); }
        else if (symbol == Tokenizer:T_DOT) { stream.printCString("DOT"); }
        return stream;
    }

    [int] _detectToken() {
        int state = 0;
        while (!input.isEmpty()) {
            int c = input.peekChar();
            if (state == 0) {
                if (((c >= 0) && (c <= 39)) || (c == 44) || ((c >= 48) && (c <= 62)) || ((c >= 64) && (c <= 90)) || ((c >= 95) && (c <= 123)) || ((c >= 125) && (c <= 255))) { this._consume(); state = 1; }
                else if (c == 40) { this._consume(); state = 2; }
                else if (c == 41) { this._consume(); state = 3; }
                else if (c == 42) { this._consume(); state = 4; }
                else if (c == 43) { this._consume(); state = 5; }
                else if (c == 45) { this._consume(); state = 6; }
                else if (c == 46) { this._consume(); state = 7; }
                else if (c == 63) { this._consume(); state = 8; }
                else if (c == 91) { this._consume(); state = 9; }
                else if (c == 92) { this._consume(); state = 10; }
                else if (c == 93) { this._consume(); state = 11; }
                else if (c == 94) { this._consume(); state = 12; }
                else if (c == 124) { this._consume(); state = 13; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 1) {
                { return this._buildNextToken(Tokenizer:T_CHAR); }
            } else if (state == 2) {
                { return this._buildNextToken(Tokenizer:T_OBRACKET); }
            } else if (state == 3) {
                { return this._buildNextToken(Tokenizer:T_CBRACKET); }
            } else if (state == 4) {
                { return this._buildNextToken(Tokenizer:T_STAR); }
            } else if (state == 5) {
                { return this._buildNextToken(Tokenizer:T_PLUS); }
            } else if (state == 6) {
                { return this._buildNextToken(Tokenizer:T_MINUS); }
            } else if (state == 7) {
                { return this._buildNextToken(Tokenizer:T_DOT); }
            } else if (state == 8) {
                { return this._buildNextToken(Tokenizer:T_QMARK); }
            } else if (state == 9) {
                { return this._buildNextToken(Tokenizer:T_OSBRACKET); }
            } else if (state == 10) {
                if (((c >= 40) && (c <= 43)) || ((c >= 45) && (c <= 47)) || (c == 63) || ((c >= 91) && (c <= 94)) || (c == 110) || (c == 114) || (c == 116) || (c == 124)) { this._consume(); state = 14; }
                else { return this._buildNextToken(Tokenizer:T_ERROR); }
            } else if (state == 11) {
                { return this._buildNextToken(Tokenizer:T_CSBRACKET); }
            } else if (state == 12) {
                { return this._buildNextToken(Tokenizer:T_CFLEX); }
            } else if (state == 13) {
                { return this._buildNextToken(Tokenizer:T_PIPE); }
            } else if (state == 14) {
                { return this._buildNextToken(Tokenizer:T_CHAR); }
            } else {
                this.rt().err().printCString("Unexpected state: ").printInt(state).printNewline();
                return false;
            }
        }

        if (state == 1) { return this._buildNextToken(Tokenizer:T_CHAR); }
        else if (state == 2) { return this._buildNextToken(Tokenizer:T_OBRACKET); }
        else if (state == 3) { return this._buildNextToken(Tokenizer:T_CBRACKET); }
        else if (state == 4) { return this._buildNextToken(Tokenizer:T_STAR); }
        else if (state == 5) { return this._buildNextToken(Tokenizer:T_PLUS); }
        else if (state == 6) { return this._buildNextToken(Tokenizer:T_MINUS); }
        else if (state == 7) { return this._buildNextToken(Tokenizer:T_DOT); }
        else if (state == 8) { return this._buildNextToken(Tokenizer:T_QMARK); }
        else if (state == 9) { return this._buildNextToken(Tokenizer:T_OSBRACKET); }
        else if (state == 10) { return this._buildNextToken(Tokenizer:T_ERROR); }
        else if (state == 11) { return this._buildNextToken(Tokenizer:T_CSBRACKET); }
        else if (state == 12) { return this._buildNextToken(Tokenizer:T_CFLEX); }
        else if (state == 13) { return this._buildNextToken(Tokenizer:T_PIPE); }
        else if (state == 14) { return this._buildNextToken(Tokenizer:T_CHAR); }
        return false;
    }
}
