/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex;

class Tokenizer extends pool::generator::tokenizer::Tokenizer {

    int T_CHAR := 0;
    int T_OBRACKET := 1;
    int T_CBRACKET := 2;
    int T_OSBRACKET := 3;
    int T_CSBRACKET := 4;
    int T_QMARK := 5;
    int T_STAR := 6;
    int T_PLUS := 7;
    int T_MINUS := 8;
    int T_CFLEX := 9;
    int T_PIPE := 10;
    int T_DOT := 11;
    int T_OTHER := 12;

    [sys::stream::OStream] debugSymbol(int symbol, sys::stream::OStream stream) {
        if (symbol == Tokenizer:T_EOI) { stream.printCString("EOI"); }
        else if (symbol == Tokenizer:T_CHAR) { stream.printCString("CHAR"); }
        else if (symbol == Tokenizer:T_OBRACKET) { stream.printCString("OBRACKET"); }
        else if (symbol == Tokenizer:T_CBRACKET) { stream.printCString("CBRACKET"); }
        else if (symbol == Tokenizer:T_OSBRACKET) { stream.printCString("OSBRACKET"); }
        else if (symbol == Tokenizer:T_CSBRACKET) { stream.printCString("CSBRACKET"); }
        else if (symbol == Tokenizer:T_QMARK) { stream.printCString("QMARK"); }
        else if (symbol == Tokenizer:T_STAR) { stream.printCString("STAR"); }
        else if (symbol == Tokenizer:T_PLUS) { stream.printCString("PLUS"); }
        else if (symbol == Tokenizer:T_MINUS) { stream.printCString("MINUS"); }
        else if (symbol == Tokenizer:T_CFLEX) { stream.printCString("CFLEX"); }
        else if (symbol == Tokenizer:T_PIPE) { stream.printCString("PIPE"); }
        else if (symbol == Tokenizer:T_DOT) { stream.printCString("DOT"); }
        else if (symbol == Tokenizer:T_OTHER) { stream.printCString("OTHER"); }
        return stream;
    }

    [int] _detectToken() {
        int state = 0;
        while (!input.isEmpty()) {
            int c = input.peekChar();
            if (state == 0) {
                if (c == '(') { this._consume(); return this._buildNextToken(Tokenizer:T_OBRACKET); }
                else if (c == ')') { this._consume(); return this._buildNextToken(Tokenizer:T_CBRACKET); }
                else if (c == '[') { this._consume(); return this._buildNextToken(Tokenizer:T_OSBRACKET); }
                else if (c == ']') { this._consume(); return this._buildNextToken(Tokenizer:T_CSBRACKET); }
                else if (c == '?') { this._consume(); return this._buildNextToken(Tokenizer:T_QMARK); }
                else if (c == '*') { this._consume(); return this._buildNextToken(Tokenizer:T_STAR); }
                else if (c == '+') { this._consume(); return this._buildNextToken(Tokenizer:T_PLUS); }
                else if (c == '-') { this._consume(); return this._buildNextToken(Tokenizer:T_MINUS); }
                else if (c == '^') { this._consume(); return this._buildNextToken(Tokenizer:T_CFLEX); }
                else if (c == '|') { this._consume(); return this._buildNextToken(Tokenizer:T_PIPE); }
                else if (c == '.') { this._consume(); return this._buildNextToken(Tokenizer:T_DOT); }
                else if (c == '\\') { this._consume(); state = 1; }
                else { this._consume(); return this._buildNextToken(Tokenizer:T_CHAR); }
            } else if (state == 1) {
                if (((c >= '(') && (c <= '+')) || ((c >= '-') && (c <= '/')) || (c == '?') || ((c >= '[') && (c <= '^')) || (c == 'n') || (c == 'r') || (c == 't') || (c == '|')) { this._consume(); return this._buildNextToken(Tokenizer:T_CHAR); }
                else { this._consume(); return this._buildNextToken(Tokenizer:T_OTHER); }
            } else {
                this.rt().err().printCString("Unexpected state: ").printInt(state).printNewline();
                return false;
            }
        }

        if (state == 1) { return this._error("Unterminated escape sequence"); }
        return false;
    }
}
