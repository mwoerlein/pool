/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex::token;

class Tokenizer extends pool::generator::tokenizer::Tokenizer {

    [int] _detectToken() {
        int state = 0;
        while (!input.isEmpty()) {
            int c = input.peekChar();
            if (state == 0) {
                
                if (c == '(') { this._consume(); return this._buildToken(Token:OBRACKET); }
                else if (c == ')') { this._consume(); return this._buildToken(Token:CBRACKET); }
                else if (c == '[') { this._consume(); return this._buildToken(Token:OSBRACKET); }
                else if (c == ']') { this._consume(); return this._buildToken(Token:CSBRACKET); }
                else if (c == '?') { this._consume(); return this._buildToken(Token:QMARK); }
                else if (c == '*') { this._consume(); return this._buildToken(Token:STAR); }
                else if (c == '+') { this._consume(); return this._buildToken(Token:PLUS); }
                else if (c == '-') { this._consume(); return this._buildToken(Token:MINUS); }
                else if (c == '^') { this._consume(); return this._buildToken(Token:CFLEX); }
                else if (c == '|') { this._consume(); return this._buildToken(Token:PIPE); }
                else if (c == '.') { this._consume(); return this._buildToken(Token:DOT); }
                else if (c == '\\') { this._consume(); state = 1; }
                else { this._consume(); return this._buildToken(Token:CHAR); }
                
            } else if (state == 1) {

                if ((c == 'n') || (c == 'r') || (c == 't') || (c == '\\') 
                    || (c == '(') || (c == ')') || (c == '[') || (c == ']')
                    || (c == '?') || (c == '*') || (c == '+') || (c == '-')
                    || (c == '^') || (c == '|') || (c == '.') || (c == '/')
                 ) { this._consume(); return this._buildToken(Token:CHAR); }
                else { this._consume(); return this._buildToken(Token:OTHER); }
                
            } else {
                this.rt().err().printCString("Unexpected state: ").printInt(state).printNewline();
                return false;
            }
        }
        
        return false;
    }

    [int] _buildToken(int type) {
        Token t = this.rt().createInstance(Token:CLASSNAME);
        return this._setNextToken(t.token(), type);
    }

}
