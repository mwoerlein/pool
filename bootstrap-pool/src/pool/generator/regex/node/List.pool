/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex::node;

use pool::generator::regex::fa::NFA;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::utils::Bitset;
use sys::stream::OStream;

class List extends Node, AnyList {
    
    int KIND_ALTERNATIVE    := 0;
    int KIND_CONCAT         := 1;
    
    int kind;
    int _hash;
    
    [] __destruct() { this.destroyAll(); }
    
    [List] init(int kind) { this.kind = kind; _hash = kind; return this; }
    [List] addNode(Node node) { this.add(node); _hash = Bitset:xor(_hash, node.hash()); return this; }
    
    [AnyIterator] nodes() { return this.iterator(); }
    
    [int] hash() { return _hash; }
    [int] equals(__any__ obj) {
        List l = this.rt().cast(List:CLASSNAME, obj);
        if (l && (this.kind == l.kind) && (this.size() == l.size())) {
            AnyIterator tit = this.nodes();
            AnyIterator lit = l.nodes();
            while (tit.hasNext()) {
                Node tn = tit.next();
                Node ln = lit.next();
                if (!tn.equals(ln)) {
                    tit.destroy();
                    lit.destroy();
                    return false;
                }
            }
            tit.destroy();
            lit.destroy();
            return true;
        }
        return false;
    }

    [OStream] printToStream(OStream stream) {
        if (this.size() == 0) { return stream; }
        if (this.size() == 1) { return stream.print(this.first()); }
        
        stream.printChar('(');
        
        AnyIterator it = this.nodes();
        if (kind == List:KIND_ALTERNATIVE) {
            if (it.hasNext()) { stream.print(it.next()); }
            while (it.hasNext()) { stream.printChar('|').print(it.next()); }
        } else {
            while (it.hasNext()) { stream.print(it.next()); }
        }
        it.destroy();
        
        return stream.printChar(')');
    }
    
    [NFA] toNFA() {
        NFA start = this.createOwn(NFA:CLASSNAME);
        NFA terminal = start.createOwn(NFA:CLASSNAME);
        start.setTerminal(terminal.setTerminal(terminal));

        AnyIterator it = this.nodes();
        if (!it.hasNext()) { start.addEps(terminal); }
        else if (kind == List:KIND_ALTERNATIVE) {
            while (it.hasNext()) {
                Node node = it.next();
                NFA n = node.toNFA();
                start.own(n);
                start.addEps(n);
                n.getTerminal().addEps(terminal);
            }
        } else {
            NFA cur = start;
            while (it.hasNext()) {
                Node node = it.next();
                NFA n = node.toNFA();
                cur.own(n);
                cur.addEps(n);
                cur = n.getTerminal();
            }
            cur.addEps(terminal);
        }
        it.destroy();
        
        return start;
    }
}
