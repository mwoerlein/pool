/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex::node;

use pool::generator::regex::fa::NFA;

use sys::core::utils::Bitset;
use sys::stream::OStream;

class Repeat extends Node {
    int KIND_ANY            := 0;
    int KIND_AT_LEAST_ONCE  := 1;
    int KIND_AT_MOST_ONCE   := 2;
    
    int kind;
    Node inner;
    
    [Repeat] init(int kind, Node inner) {
        this.kind = kind;
        this.inner = this.own(inner);
        return this;
    }
    
    [Node] getInner() { return inner; }
    
    [int] hash() { return Bitset:lrotate(this.inner.hash(), kind); }
    [int] equals(__any__ obj) {
        Repeat r = this.rt().cast(Repeat:CLASSNAME, obj);
        if (r && (this.kind == r.kind)) {
            return this.inner.equals(r.inner);
        }
        return false;
    }

    [OStream] printToStream(OStream stream) {
        stream.print(inner);
        
        if (kind == Repeat:KIND_ANY) { return stream.printChar('*'); }
        if (kind == Repeat:KIND_AT_LEAST_ONCE) { return stream.printChar('+'); }
        // KIND_AT_MOST_ONCE
        return stream.printChar('?');
    }
    
    [NFA] toNFA() {
        NFA start = this.createOwn(NFA:CLASSNAME);
        NFA terminal = start.createOwn(NFA:CLASSNAME);
        start.setTerminal(terminal.setTerminal(terminal));

        NFA n = inner.toNFA();
        NFA t = n.getTerminal();
        start.own(n);
        start.addEps(n);
        t.addEps(terminal);

        if (kind != Repeat:KIND_AT_MOST_ONCE) { t.addEps(n); }
        if (kind != Repeat:KIND_AT_LEAST_ONCE) { start.addEps(terminal); } 
        
        return start;
    }
}
