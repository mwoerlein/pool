/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex::node;

use pool::generator::CharSet;
use pool::generator::regex::fa::NFA;

use sys::stream::OStream;

class CharClass extends Node, CharSet {

    int exclusive;
    
    [CharClass] setExclusive() { this.exclusive = true; return this; }
    [int] isExclusive() { return this.exclusive; }
 
    [int] hash() { return this._hashCharSet() + exclusive; }
    
    [int] equals(__any__ obj) {
        CharClass c = this.rt().cast(CharClass:CLASSNAME, obj);
        if (c) {
            return (this.exclusive == c.exclusive) && this._equalsCharSet(c.charset());
        }
        return false;
    }
    
    [OStream] printToStream(OStream stream) {
        if (!this.exclusive && this.isAll()) {
            return stream.printChar('.');
        }
        int lc = this.getLowestChar();
        int hc = this.getHighestChar();
        if (!this.exclusive) {
            if (lc == hc) {
                return this._formatChar(stream, lc);
            }
            stream.printChar('[');
        } else {
            stream.printChar('[').printChar('^');
        }
        
        int cur = lc;
        while (cur <= hc) {
            if (this.hasChar(cur)) {
                this._formatChar(stream, cur);
                if (this.hasChar(cur+1) && this.hasChar(cur+2)) {
                    // skip consecutive characters
                    while (this.hasChar(++cur)) {}
                    this._formatChar(stream.printChar('-'), --cur);
                }
            }
            cur++;
        }
        return stream.printChar(']');
    }
    
    [OStream] _formatChar(OStream stream, int c) {
        if ((c == '\\') || (c == '(') || (c == ')') || (c == '[') || (c == ']') || (c == '?') || (c == '*')
            || (c == '+') || (c == '-') || (c == '^') || (c == '|') || (c == '.') || (c == '/')) {
            return stream.printChar('\\').printChar(c);
        }
        if (c == '\n') { return stream.printChar('\\').printChar('n'); }
        if (c == '\r') { return stream.printChar('\\').printChar('r'); }
        if (c == '\t') { return stream.printChar('\\').printChar('t'); }
        return stream.printChar(c);
    }

    [NFA] toNFA() {
        NFA start = this.createOwn(NFA:CLASSNAME);
        
        NFA terminal = start.createOwn(NFA:CLASSNAME);
        start.setTerminal(terminal.setTerminal(terminal));
        
        CharSet cs = start.createOwn(CharSet:CLASSNAME);
        cs.setCharSet(this.charset());
        if (exclusive) { cs.flip(); }
        
        return start.setNext(cs, terminal);
    }
}
