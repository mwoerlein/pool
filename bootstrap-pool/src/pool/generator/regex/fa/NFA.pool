/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex::fa;

use pool::generator::CharSet;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMap;
use sys::core::anycollection::AnyMapEntryIterator;

use sys::core::String;
use sys::stream::OStream;

class NFA extends sys::core::Object {

    CharSet cs;
    NFA next;
    AnyList eps; // List<NFA>
    NFA terminal;

    [] __init() {
        eps = this.createOwn(AnyList:CLASSNAME);
        cs = null;
        next = null;
    }
    
    [NFA] setTerminal(NFA n) { this.terminal = n; return this; }
    [NFA] getTerminal() { return this.terminal; }
    [NFA] setNext(CharSet cs, NFA n) { this.cs = cs; this.next = n; return this; }
    [NFA] addEps(NFA n) { if (!eps.contains(n)) { eps.add(n); } return this; }
    
    [NFA] move(int c) {
        if (cs && cs.hasChar(c)) { return next; }
        return null;
    }
    
    [NFASet] epsClosure(NFASet set) {
        if (set.add(this)) {
            AnyIterator it = this.eps.iterator();
            while (it.hasNext()) {
                NFA next = it.next();
                next.epsClosure(set);
            }
            it.destroy();
        }
        return set;
    }
    
    // debug
    [OStream] dumpAsDot(OStream out) {
        out.printCString("digraph G {").printNewline();
        
        AnyList visited = this.rt().createInstance(AnyList:CLASSNAME);
        this._dumpAsDot(out, visited);
        visited.destroy();
        
        return out.printChar('}').printNewline();
    }
    
    [] _dumpAsDot(OStream out, AnyList visited) {
        if (!visited.contains(this)) {
            visited.add(this);
            out.printCString("    \"").printPtr(this.getAddress()).printChar('"');
            if (!next) {
                  out.printCString(" [color=gray, fontcolor=gray]");
            }
            out.printNewline();
            if (cs) { 
                String label = this.rt().createInstance(String:CLASSNAME);
                if (cs.hasChar(0)) { label.printChar('?'); } else { label.print(cs); }
                
                next._dumpAsDot(out, visited);
                out.printCString("    \"").printPtr(this.getAddress()).printChar('"')
                  .printCString(" -> \"").printPtr(next.getAddress()).printChar('"')
                  .printCString(" [label=");
                label.escapeToStream(out).printCString("]")
                  .printNewline();
                label.destroy();
            }
            AnyIterator it = this.eps.iterator();
            while (it.hasNext()) {
                NFA next = it.next();
                next._dumpAsDot(out, visited);
                out.printCString("    \"").printPtr(this.getAddress()).printChar('"')
                  .printCString(" -> \"").printPtr(next.getAddress()).printChar('"')
                  .printCString(" [color=gray]")
                  .printNewline();
            }
            it.destroy();
        }
    }
    
}
