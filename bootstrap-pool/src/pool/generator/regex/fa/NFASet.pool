/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::generator::regex::fa;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnySet;

class NFASet extends sys::core::Object {

    // TODO: find bug with "extends sys::core::anycollection::AnySet"
    AnySet _elements; // HashSet<NFA>

    [] __init() {
        _elements = this.createOwn(AnySet:CLASSNAME);
    }
    
    [int] add(NFA nfa) { return _elements.add(nfa); }
    [int] contains(NFA nfa) { return _elements.contains(nfa); }
    [AnyIterator] iterator() { return _elements.iterator(); }
    
    [int] size() { return _elements.size(); }
    [int] hash() { return _elements.hash(); }
    [int] equals(__any__ obj) {
        NFASet set = this.rt().cast(NFASet:CLASSNAME, obj);
        if (set) { return _elements.equals(set._elements); }
        return false;
    }

    [NFASet] move(int c) {
        NFASet ret = this.rt().createInstance(NFASet:CLASSNAME);
        AnyIterator nit = this.iterator();
        while (nit.hasNext()) {
            NFA n = nit.next();
            NFA next = n.move(c);
            if (next) { next.epsClosure(ret);}
        }
        nit.destroy();
        if (ret._elements.isEmpty()) {
            ret.destroy();
            return null;
        }
        return ret;
    }
}
