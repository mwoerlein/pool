/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::parser;

use pool::compiler::ast::Node;
use pool::compiler::ast::node::NodeList;
use pool::compiler::ast::node::NodeMap;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ArithAssignmentExprNode;
use pool::compiler::ast::node::expression::ArithBinaryExprNode;
use pool::compiler::ast::node::expression::ArithUnaryExprNode;
use pool::compiler::ast::node::expression::AssignmentExprNode;
use pool::compiler::ast::node::expression::ConstCStringExprNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::expression::ExpressionNode;
use pool::compiler::ast::node::expression::LogicalBinaryExprNode;
use pool::compiler::ast::node::expression::LogicalUnaryExprNode;
use pool::compiler::ast::node::expression::MethodCallExprNode;
use pool::compiler::ast::node::expression::NullExprNode;
use pool::compiler::ast::node::expression::SignExprNode;
use pool::compiler::ast::node::expression::ThisExprNode;
use pool::compiler::ast::node::expression::VariableExprNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::InstructionNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;
use pool::compiler::ast::node::reference::TypeRefNode;

use pool::generator::tokenizer::Token;

use sys::core::String;
use sys::store::StorageElement;
use sys::stream::IStream;
use sys::stream::OStream;

class BaseParser extends pool::generator::parser::Parser, sys::log::LoggerAware {
    
    TranslationUnitNode unit;
    
    [OStream] newError() { return this.error(); }
    
    [] parse(TranslationUnitNode unit) {
        this.unit = unit;
        IStream content = unit.getElement().getContent();
        Tokenizer in = this.rt().createInstance(Tokenizer:CLASSNAME);
        this._parse(in.init(content, unit.getName()));
        in.destroy();
        content.destroy();
        this.unit = null;
    }
    
    [NodeList] nodeList() { return this.rt().createInstance(NodeList:CLASSNAME); }
    [NodeList] addToNodeList(NodeList list, __any__ node) {
        if (node) { list.add(list.own(node)); }
        return list;
    }
    
    [NodeMap] nodeMap() { return this.rt().createInstance(NodeMap:CLASSNAME); }
    [NodeMap] addToNodeMap(NodeMap map, Token key, __any__ node) {
        if (node) {
            String k = map.createOwn(String:CLASSNAME);
            key.getValue().unescapeToStream(k.ostream());
            map.set(k, map.own(node));
        }
        return map;
    }
    
    // declarations
    [NamespaceDeclNode] namespaceDecl(ClassRefNode name, Token first, Token last) {
        NamespaceDeclNode node = this.rt().createInstance(NamespaceDeclNode:CLASSNAME);
        node.setName(name);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [UseStatementNode] useStatement(ClassRefNode name, Token alias, Token first, Token last) {
        UseStatementNode node = this.rt().createInstance(UseStatementNode:CLASSNAME);
        node.setName(name);
        if (alias) { node.setAlias(alias.getValue()); }
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [ClassDeclNode] newClassDecl() { return this.rt().createInstance(ClassDeclNode:CLASSNAME); }
    [ClassDeclNode] classDecl(ClassDeclNode node) { return node; }
    [ClassDeclNode] finalizeClassDecl(ClassDeclNode node, Token name, Token first, Token last) {
        node.setName(name.getValue());
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [StructDeclNode] newStructDecl() { return this.rt().createInstance(StructDeclNode:CLASSNAME); }
    [StructDeclNode] structDecl(StructDeclNode node) { return node; }
    [StructDeclNode] finalizeStructDecl(StructDeclNode node, Token name, Token first, Token last) {
        node.setName(name.getValue());
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [MethodDeclNode] methodDecl(Token name, NodeList params, NodeList returnTypes, Token first, Token last) {
        MethodDeclNode node = this.rt().createInstance(MethodDeclNode:CLASSNAME);
        node.setName(name.getValue()).setParameters(params).setReturnTypes(returnTypes);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [VariableDeclNode] variableDecl(Token name, TypeRefNode type) {
        VariableDeclNode node = this.rt().createInstance(VariableDeclNode:CLASSNAME);
        node.setName(name.getValue()).setType(type);
        node.setLocation(type.getFirstLine(), type.getFirstColumn(), name.getLastLine(), name.getLastColumn());
        return node;
    }
    
    // expressions
    [ExpressionNode] asExpr(__any__ node) { return this.rt().cast(ExpressionNode:CLASSNAME, node); }
    
    [ConstCStringExprNode] slStringExpr(Token t) { 
        ConstCStringExprNode node = this.createOwn(ConstCStringExprNode:CLASSNAME);
        t.getValue().unescapeToStream(node.getValue().ostream());
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [ConstCStringExprNode] mlStringExpr(Token t) { 
        ConstCStringExprNode node = this.createOwn(ConstCStringExprNode:CLASSNAME);
        String v = node.getValue();
        {
            IStream in = t.getValue().toIStream();
            // skip first line
            while (!in.isEmpty() && (in.readChar() != '\n')) {}
            int lines = t.getLastLine() - t.getFirstLine() - 1;
            while (lines > 0 && !in.isEmpty()) {
                int c = in.readChar();
                if (c == '\n') { lines--; }
                if (lines > 0) {
                    v.printChar(c);
                }
            }
            in.destroy();
        }
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [ConstIntExprNode] intExpr(Token t, Token sign) { 
        ConstIntExprNode node = this.createOwn(ConstIntExprNode:CLASSNAME);
        
        String v = t.getValue();
        int val = 0;
        if (v.cequals("true")) { val = 1; }
        else if (v.cequals("false")) { val = 0; }
        else if (v.at(0) == '\'') {
            String tmp = this.rt().createInstance(String:CLASSNAME);
            v._unescapeToStream(tmp.ostream(), '\'', '\\');
            if (tmp.length() == 1) {
                val = tmp.at(0);
                tmp.destroy();
            } else {
                tmp.destroy();
                this.newError().printCString("invalid character sequence: ").print(v);
            }
        } else { val = v.toInt(); }
        
        node.setValue(val);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        if (sign) {
            if (sign.getValue().at(0) == '-') {
                node.setValue(-val);
            }
            node.setFirstLocation(sign.getFirstLine(), sign.getFirstColumn());
        }
        return node;
    }

    [ThisExprNode] thisExpr(Token t) { 
        ThisExprNode node = this.createOwn(ThisExprNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }

    [NullExprNode] nullExpr(Token t) { 
        NullExprNode node = this.createOwn(NullExprNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }

    [VariableExprNode] variableExpr(Token name, ExpressionNode context) { 
        VariableExprNode node = this.createOwn(VariableExprNode:CLASSNAME);
        node.setName(name.getValue());
        node.setLocation(name.getFirstLine(), name.getFirstColumn(), name.getLastLine(), name.getLastColumn());
        if (context) {
            node.setContext(context);
            node.setFirstLocation(context.getFirstLine(), context.getFirstColumn());
        }
        return node;
    }

    [MethodCallExprNode] methodCallExpr(Token name, ExpressionNode context, Token last) { 
        MethodCallExprNode node = this.createOwn(MethodCallExprNode:CLASSNAME);
        node.setName(name.getValue());
        node.setLocation(name.getFirstLine(), name.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        if (context) {
            node.setContext(context);
            node.setFirstLocation(context.getFirstLine(), context.getFirstColumn());
        }
        return node;
    }
    
    [SignExprNode] signExpr(ExpressionNode expr, Token first) {
        SignExprNode node = this.createOwn(SignExprNode:CLASSNAME);
        node.setExpression(expr);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), expr.getLastLine(), expr.getLastColumn());
        return node;
    }
    
    [ArithBinaryExprNode] arithBinaryExpr(ExpressionNode left, ExpressionNode right) {
        ArithBinaryExprNode node = this.createOwn(ArithBinaryExprNode:CLASSNAME);
        node.setLeft(left).setRight(right);
        node.setLocation(left.getFirstLine(), left.getFirstColumn(), right.getLastLine(), right.getLastColumn());
        return node;
    }
    
    [ArithUnaryExprNode] arithUnaryExpr(VariableExprNode var, Token first, Token last) {
        ArithUnaryExprNode node = this.createOwn(ArithUnaryExprNode:CLASSNAME);
        node.setVariable(var);
        node.setLocation(var.getFirstLine(), var.getFirstColumn(), var.getLastLine(), var.getLastColumn());
        if (first) { node.setFirstLocation(first.getFirstLine(), first.getFirstColumn()); }
        if (last) { node.setFirstLocation(last.getLastLine(), last.getLastColumn()); }
        return node;
    }
    
    [LogicalBinaryExprNode] logicalBinaryExpr(ExpressionNode left, ExpressionNode right) {
        LogicalBinaryExprNode node = this.createOwn(LogicalBinaryExprNode:CLASSNAME);
        node.setLeft(left).setRight(right);
        node.setLocation(left.getFirstLine(), left.getFirstColumn(), right.getLastLine(), right.getLastColumn());
        return node;
    }
    
    [LogicalUnaryExprNode] logicalUnaryExpr(ExpressionNode expr, Token first, Token last) {
        LogicalUnaryExprNode node = this.createOwn(LogicalUnaryExprNode:CLASSNAME);
        node.setExpression(expr);
        node.setLocation(expr.getFirstLine(), expr.getFirstColumn(), expr.getLastLine(), expr.getLastColumn());
        if (first) { node.setFirstLocation(first.getFirstLine(), first.getFirstColumn()); }
        if (last) { node.setFirstLocation(last.getLastLine(), last.getLastColumn()); }
        return node;
    }
    
    [AssignmentExprNode] assignmentExpr(VariableExprNode var, ExpressionNode value) {
        AssignmentExprNode node = this.createOwn(AssignmentExprNode:CLASSNAME);
        node.setVariable(var).setValue(value);  
        node.setLocation(var.getFirstLine(), var.getFirstColumn(), value.getLastLine(), value.getLastColumn());
        return node;
    }
    
    [ArithAssignmentExprNode] arithAssignmentExpr(VariableExprNode var, ExpressionNode value) {
        ArithAssignmentExprNode node = this.createOwn(ArithAssignmentExprNode:CLASSNAME);
        node.setVariable(var).setValue(value);
        node.setLocation(var.getFirstLine(), var.getFirstColumn(), value.getLastLine(), value.getLastColumn());
        return node;
    }
    
    // instructions
    [InstructionNode] asInst(__any__ node) { return this.rt().cast(InstructionNode:CLASSNAME, node); }
    
    [BlockInstNode] blockInst() { return this.rt().createInstance(BlockInstNode:CLASSNAME); }
    [BlockInstNode] addInstToBlock(BlockInstNode block, InstructionNode inst) { return block.addInstruction(inst); }
    
    [ExpressionInstNode] expressionInst(ExpressionNode expr) {
        ExpressionInstNode node = this.rt().createInstance(ExpressionInstNode:CLASSNAME);
        node.setExpression(expr);
        node.setLocation(expr.getFirstLine(), expr.getFirstColumn(), expr.getLastLine(), expr.getLastColumn());
        return node;
    }
    
    [ReturnInstNode] returnInst(Token first, Token last) {
        ReturnInstNode node = this.rt().createInstance(ReturnInstNode:CLASSNAME);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [ReturnInstNode] returnExprInst(Token first, ExpressionNode value) {
        ReturnInstNode node = this.rt().createInstance(ReturnInstNode:CLASSNAME);
        NodeList values = this.nodeList();
        values.add(values.own(value));
        node.setValues(values);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), value.getLastLine(), value.getLastColumn());
        return node;
    }
    
    [VariableInitInstNode] variableInit(VariableDeclNode var, ExpressionNode init) {
        VariableInitInstNode node = this.rt().createInstance(VariableInitInstNode:CLASSNAME);
        NodeList vars = this.nodeList();
        vars.add(vars.own(var));
        node.setVariables(vars).setInitializer(init);
        node.setLocation(var.getFirstLine(), var.getFirstColumn(), init.getLastLine(), init.getLastColumn());
        return node;
    }
    
    [VariableInitInstNode] multiVariableInit(NodeList vars, ExpressionNode init, Token first) {
        VariableInitInstNode node = this.rt().createInstance(VariableInitInstNode:CLASSNAME);
        node.setVariables(vars).setInitializer(init);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), init.getLastLine(), init.getLastColumn());
        return node;
    }
    
    [VariableInitInstNode] markVarInitGlobal(VariableInitInstNode node) { return node.setGlobal(); }

    [InlinePasmInstNode] inlinePasm(ConstCStringExprNode pasm, Token first, Token last) {
        InlinePasmInstNode node = this.rt().createInstance(InlinePasmInstNode:CLASSNAME);
        node.setPasm(pasm);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }

    [WhileInstNode] whileInst(ExpressionNode cond, BlockInstNode block  , Token first, Token last) {
        WhileInstNode node = this.rt().createInstance(WhileInstNode:CLASSNAME);
        node.setCondition(cond).setBlock(block);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }

    [IfInstNode] ifInst(Token first, Token last) {
        IfInstNode node = this.rt().createInstance(IfInstNode:CLASSNAME);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }

    [IfInstNode] ifCascadeInst(Token first, IfInstNode cascade) {
        IfInstNode node = this.rt().createInstance(IfInstNode:CLASSNAME);
        node.setFalseBlock(this.blockInst().addInstruction(cascade.instruction()));
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), cascade.getLastLine(), cascade.getLastColumn());
        return node;
    }
    
    // references
    [TypeRefNode] asRef(__any__ node) { return this.rt().cast(TypeRefNode:CLASSNAME, node); }

    [AllRefNode] allRef(Token t) {
        AllRefNode node = this.rt().createInstance(AllRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [AnyRefNode] anyRef(Token t) {
        AnyRefNode node = this.rt().createInstance(AnyRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [ClassRefNode] classRef(Token id) {
        ClassRefNode node = this.createOwn(ClassRefNode:CLASSNAME);
        node.setName(id.getValue());
        node.setLocation(id.getFirstLine(), id.getFirstColumn(), id.getLastLine(), id.getLastColumn());
        return node;
    }
    
    [ClassRefNode] appendToClassRef(ClassRefNode node, Token id) {
        int line = node.getLastLine(); 
        int end = node.getLastColumn();
        node.getName().printChar(':').printChar(':').print(id.getValue());
        node.setLastLocation(id.getLastLine(), id.getLastColumn());
        if ((id.getFirstLine() != line) || (id.getFirstColumn() != end + 3)) {
            node.debugToStream(this.newError().printCString("non-consecutive full qualified name: "));
        }
        return node;
    }
    
    [CStringRefNode] cstringRef(Token t) {
        CStringRefNode node = this.rt().createInstance(CStringRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [IntRefNode] intRef(Token t) {
        IntRefNode node = this.rt().createInstance(IntRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
}
