/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::parser;

use pool::compiler::ast::Node;
use pool::compiler::ast::node::NodeList;
use pool::compiler::ast::node::NodeMap;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::StringNode;
use pool::compiler::ast::node::declaration::FullQualifiedNameNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ExpressionNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::InstructionNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;
use pool::compiler::ast::node::reference::TypeRefNode;

use pool::generator::tokenizer::Token;

use sys::core::String;
use sys::stream::IStream;
use sys::stream::OStream;

class BaseParser extends pool::generator::parser::Parser {
    
    TranslationUnitNode unit;
    
    [OStream] newError() { return this.rt().err(); }
    
    [Node] parse(IStream input, String inputName) {
        TranslationUnitNode ret = unit = this.rt().createInstance(TranslationUnitNode:CLASSNAME);
        Tokenizer in = this.rt().createInstance(Tokenizer:CLASSNAME);
        this._parse(in.init(input, inputName));
        in.destroy();
        unit = null;
        return ret.node();
    }
    
    [NodeList] nodeList() { return this.rt().createInstance(NodeList:CLASSNAME); }
    [NodeList] addToNodeList(NodeList list, __any__ node) {
        if (node) { list.add(list.own(node)); }
        return list;
    }
    
    [NodeMap] nodeMap() { return this.rt().createInstance(NodeMap:CLASSNAME); }
    [NodeMap] addToNodeMap(NodeMap map, Token key, __any__ node) {
        // TODO clone key
        if (node) { map.set(map.own(key.getValue()), map.own(node)); }
        return map;
    }
    
    [StringNode] slString(Token t) { 
        StringNode node = this.createOwn(StringNode:CLASSNAME);
        t.getValue().unescapeToStream(node.getValue().ostream());
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [StringNode] mlString(Token t) { 
        StringNode node = this.createOwn(StringNode:CLASSNAME);
        node.setValue(t.getValue()); //TODO: remove first and last line;
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [FullQualifiedNameNode] fqn(Token id) { 
        FullQualifiedNameNode fqn = this.createOwn(FullQualifiedNameNode:CLASSNAME);
        fqn.setName(id.getValue());
        fqn.setLocation(id.getFirstLine(), id.getFirstColumn(), id.getLastLine(), id.getLastColumn());
        return fqn;
    }
    
    [FullQualifiedNameNode] fqnAppend(FullQualifiedNameNode fqn, Token id) {
        fqn.appendName(id.getValue());
        // TODO: validate continuity of fqn
        fqn.setLastLocation(id.getLastLine(), id.getLastColumn());
        return fqn;
    }
    
    // declarations
    [NamespaceDeclNode] namespaceDecl(FullQualifiedNameNode fqn, Token first, Token last) {
        NamespaceDeclNode node = this.rt().createInstance(NamespaceDeclNode:CLASSNAME);
        node.setName(fqn);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [UseStatementNode] useStatement(FullQualifiedNameNode fqn, Token alias, Token first, Token last) {
        UseStatementNode node = this.rt().createInstance(UseStatementNode:CLASSNAME);
        node.setName(fqn);
        if (alias) { node.setAlias(alias.getValue()); }
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [ClassDeclNode] newClassDecl() { return this.rt().createInstance(ClassDeclNode:CLASSNAME); }
    [ClassDeclNode] classDecl(ClassDeclNode node) { return node; }
    [ClassDeclNode] finalizeClassDecl(ClassDeclNode node, Token name, Token first, Token last) {
        node.setName(name.getValue());
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [StructDeclNode] newStructDecl() { return this.rt().createInstance(StructDeclNode:CLASSNAME); }
    [StructDeclNode] structDecl(StructDeclNode node) { return node; }
    [StructDeclNode] finalizeStructDecl(StructDeclNode node, Token name, Token first, Token last) {
        node.setName(name.getValue());
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [MethodDeclNode] methodDecl(Token name, NodeList params, NodeList returnTypes, Token first, Token last) {
        MethodDeclNode node = this.rt().createInstance(MethodDeclNode:CLASSNAME);
        node.setName(name.getValue()).setParameters(params).setReturnTypes(returnTypes);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [VariableDeclNode] variableDecl(Token name, TypeRefNode type) {
        VariableDeclNode node = this.rt().createInstance(VariableDeclNode:CLASSNAME);
        node.setName(name.getValue()).setType(type);
        node.setLocation(type.getFirstLine(), type.getFirstColumn(), name.getLastLine(), name.getLastColumn());
        return node;
    }
    
    // expressions
    [ExpressionNode] expression() { return this.rt().createInstance(ExpressionNode:CLASSNAME); }
    
    // instructions
    [InstructionNode] asInst(__any__ node) { return this.rt().cast(InstructionNode:CLASSNAME, node); }
    
    [BlockInstNode] blockInst() { return this.rt().createInstance(BlockInstNode:CLASSNAME); }
    [BlockInstNode] addInstToBlock(BlockInstNode block, InstructionNode inst) { return block.addInstruction(inst); }
    
    [ExpressionInstNode] expressionInst(ExpressionNode expr) {
        ExpressionInstNode node = this.rt().createInstance(ExpressionInstNode:CLASSNAME);
        node.setExpression(expr);
        node.setLocation(expr.getFirstLine(), expr.getFirstColumn(), expr.getLastLine(), expr.getLastColumn());
        return node;
    }
    
    [ReturnInstNode] returnInst(Token first, Token last) {
        ReturnInstNode node = this.rt().createInstance(ReturnInstNode:CLASSNAME);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }
    
    [ReturnInstNode] returnExprInst(Token first, ExpressionNode value) {
        ReturnInstNode node = this.rt().createInstance(ReturnInstNode:CLASSNAME);
        NodeList values = this.nodeList();
        values.add(value);
        node.setValues(values);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), value.getLastLine(), value.getLastColumn());
        return node;
    }
    
    [VariableInitInstNode] variableInit(VariableDeclNode var, ExpressionNode init) {
        VariableInitInstNode node = this.rt().createInstance(VariableInitInstNode:CLASSNAME);
        NodeList vars = this.nodeList();
        vars.add(var);
        node.setVariables(vars).setInitializer(init);
        node.setLocation(var.getFirstLine(), var.getFirstColumn(), init.getLastLine(), init.getLastColumn());
        return node;
    }
    
    [VariableInitInstNode] multiVariableInit(NodeList vars, ExpressionNode init, Token first) {
        VariableInitInstNode node = this.rt().createInstance(VariableInitInstNode:CLASSNAME);
        node.setVariables(vars).setInitializer(init);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), init.getLastLine(), init.getLastColumn());
        return node;
    }

    [InlinePasmInstNode] inlinePasm(StringNode pasm, Token first, Token last) {
        InlinePasmInstNode node = this.rt().createInstance(InlinePasmInstNode:CLASSNAME);
        node.setPasm(pasm);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }

    [WhileInstNode] whileInst(ExpressionNode cond, BlockInstNode block  , Token first, Token last) {
        WhileInstNode node = this.rt().createInstance(WhileInstNode:CLASSNAME);
        node.setCondition(cond).setBlock(block);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }

    [IfInstNode] ifInst(Token first, Token last) {
        IfInstNode node = this.rt().createInstance(IfInstNode:CLASSNAME);
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), last.getLastLine(), last.getLastColumn());
        return node;
    }

    [IfInstNode] ifCascadeInst(Token first, IfInstNode cascade) {
        IfInstNode node = this.rt().createInstance(IfInstNode:CLASSNAME);
        node.setFalseBlock(this.blockInst().addInstruction(cascade.instruction()));
        node.setLocation(first.getFirstLine(), first.getFirstColumn(), cascade.getLastLine(), cascade.getLastColumn());
        return node;
    }
    
    // references
    [AllRefNode] allRef(Token t) {
        AllRefNode node = this.rt().createInstance(AllRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [AnyRefNode] anyRef(Token t) {
        AnyRefNode node = this.rt().createInstance(AnyRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [ClassRefNode] classRef(FullQualifiedNameNode fqn) {
        ClassRefNode node = this.rt().createInstance(ClassRefNode:CLASSNAME);
        node.setName(fqn);
        node.setLocation(fqn.getFirstLine(), fqn.getFirstColumn(), fqn.getLastLine(), fqn.getLastColumn());
        return node;
    }
    
    [CStringRefNode] cstringRef(Token t) {
        CStringRefNode node = this.rt().createInstance(CStringRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
    [IntRefNode] intRef(Token t) {
        IntRefNode node = this.rt().createInstance(IntRefNode:CLASSNAME);
        node.setLocation(t.getFirstLine(), t.getFirstColumn(), t.getLastLine(), t.getLastColumn());
        return node;
    }
    
}
