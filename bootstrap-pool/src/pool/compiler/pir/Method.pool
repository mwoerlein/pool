/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::pir;

use pool::compiler::ast::Type;
use pool::compiler::ast::scope::InstanceScope;
use pool::compiler::ast::scope::MethodScope;
use pool::compiler::ast::scope::VariableScope;

use sys::core::String;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::stream::OStream;

class Method extends sys::core::Object {

    MethodScope _scope;
    
    AnyList _parameterLocations; // List<Location>
    AnyList _returnLocations; // List<Location>
    AnyList _tempLocations; // List<Location>
    AnyList _constLocations; // List<Location>
    
    AnyList _blocks; // List<BasicBlock>
    
    // caches
    BasicBlock _entry;
    BasicBlock _exit;
    
    Location _this;
    Location _zeroConst;
    Location _oneConst;
    Value _null;
    
    [Method] init(MethodScope scope) {
        _parameterLocations = this.createOwn(AnyList:CLASSNAME);
        _returnLocations = this.createOwn(AnyList:CLASSNAME);
        _tempLocations = this.createOwn(AnyList:CLASSNAME);
        _constLocations = this.createOwn(AnyList:CLASSNAME);
        _blocks = this.createOwn(AnyList:CLASSNAME);
        
        _scope = scope;
        _null = this.createOwn(Value:CLASSNAME);
        _null.initNull();
        
        _entry = this.newBasicBlock();
        _exit = this.newBasicBlock();
        
        InstanceScope is = this.rt().cast(InstanceScope:CLASSNAME, scope.getParent());
        if (is) {
            _this = this.createOwn(Location:CLASSNAME);
            _this.init(Location:KIND_THIS, 0, is.type());
        }
        {
            AnyMapEntryIterator it = scope.getParameters().entries();
            while (it.hasNext()) {
                [VariableScope vs, Type type] := it.nextPair();
                vs.setPirLocation(this._newLocation(Location:KIND_PARAM, type, _parameterLocations));
            }
            it.destroy();
        }
        {
            AnyIterator it = scope.getReturnTypes().iterator();
            while (it.hasNext()) {
                Type type := it.next();
                this._newLocation(Location:KIND_RETURN, type, _returnLocations);
            }
            it.destroy();
        }
        
        scope.setPirMethod(this);
    }
    
    [MethodScope] getMethodScope() { return _scope; }
    
    [Location] getParam(int id) { return _parameterLocations.at(id); }
    [Location] getRet(int id) { return _returnLocations.at(id); }
    [Location] getTemp(int id) { return _tempLocations.at(id); }
    [Location] newTemp(Type type) { return this._newLocation(Location:KIND_TEMP, type, _tempLocations); }
    [Location] newConst(int value, Type type) {
        Location loc = _constLocations.createOwn(Location:CLASSNAME);
        loc.init(Location:KIND_CONST, value, type);
        _constLocations.add(loc);
        return loc;
    }
    
    [Location] getThis() { return _this; }
    [Location] getZeroConst(Factory f) {
        if (!_zeroConst) {
            _zeroConst = this.newConst(0, f.getIntType().type());
        }
        return _zeroConst;
    }
    [Location] getOneConst(Factory f) {
        if (!_oneConst) {
            _oneConst = this.newConst(1, f.getIntType().type());
        }
        return _oneConst;
    }
    
    [AnyList] params() { return _parameterLocations; }
    [AnyList] returns() { return _returnLocations; }
    [AnyList] temps() { return _tempLocations; }
    
    [Value] getNull() { return _null; }
    
    [Value] getNumber(int n) {
        Value ret = this.createOwn(Value:CLASSNAME);
        return ret.initNumber(n);
    }
    
    [Value] getString(String value) {
        Value ret = this.createOwn(Value:CLASSNAME);
        return ret.initString(_scope.getClassDeclNode().getClassScope().stringId(value, null));
    }
    
    [AnyIterator] blocks() { return _blocks.iterator(); }
    [BasicBlock] getEntryBlock() { return _entry; }
    [BasicBlock] getExitBlock() { return _exit; }
    [BasicBlock] newBasicBlock() {
        BasicBlock bb = _blocks.createOwn(BasicBlock:CLASSNAME);
        bb.init(this, _blocks.size());
        _blocks.add(bb);
        return bb;
    }

    [Location] _newLocation(int kind, Type type, AnyList list) {
        Location loc = list.createOwn(Location:CLASSNAME);
        loc.init(kind, list.size(), type);
        list.add(loc);
        return loc;
    }
}
