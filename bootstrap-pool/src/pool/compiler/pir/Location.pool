/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::pir;

use pool::compiler::ast::Type;

use sys::stream::OStream;

class Location extends sys::core::Object {
    
    int KIND_THIS   := 0;
    int KIND_PARAM  := 1;
    int KIND_RETURN := 2;
    int KIND_SPILL  := 3;
    int KIND_TEMP   := 4;
    int KIND_CONST  := 5;
    
    int _kind;
    int _id;
    Type _type;
    
    [Location] init(int kind, int id, Type type) {  _kind = kind; _type = type; _id = id; return this; }
    [int] getId() { return _id; }
    [Type] getType() { return _type; }
    
    [int] isThis() { return _kind == Location:KIND_THIS; }
    [int] isParam() { return _kind == Location:KIND_PARAM; }
    [int] isReturn() { return _kind == Location:KIND_RETURN; }
    [int] isSpill() { return _kind == Location:KIND_SPILL; }
    [int] isTemp() { return _kind == Location:KIND_TEMP; }
    [int] isConst() { return _kind == Location:KIND_CONST; }
    
    [OStream] printToStream(OStream stream) {
        if (_kind == Location:KIND_THIS) {
            return stream.printChar('<').print(_type).printCString(">this");
        }
        if (_kind == Location:KIND_PARAM) {
            return stream.printChar('<').print(_type).printCString(">param(").printInt(_id).printChar(')');
        }
        if (_kind == Location:KIND_RETURN) {
            return stream.printChar('<').print(_type).printCString(">return(").printInt(_id).printChar(')');
        }
        if (_kind == Location:KIND_SPILL) {
            return stream.printChar('<').print(_type).printCString(">spill(").printInt(_id).printChar(')');
        }
        if (_kind == Location:KIND_TEMP) {
            return stream.printChar('<').print(_type).printCString(">temp(").printInt(_id).printChar(')');
        }
        if (_kind == Location:KIND_CONST) {
            return stream.printChar('<').print(_type).printCString(">const(").printInt(_id).printChar(')');
        }
        return stream.printCString("UNKNOWN LOCATION");
    }

}
