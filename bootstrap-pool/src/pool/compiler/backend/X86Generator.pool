/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::backend;

use pool::asm::CompilationUnit;
use pool::asm::Parser;
use pool::asm::ast::CommentNode;
use pool::asm::ast::DefinitionNode;
use pool::asm::ast::EmptyNode;
use pool::asm::ast::InstructionNode;
use pool::asm::ast::LabelNode;
use pool::asm::ast::NodeList;
use pool::asm::ast::OperandNode;
use pool::asm::ast::operand::FormulaNode;
use pool::asm::ast::operand::NumberNode;
use pool::asm::ast::operand::RegisterNode;
use pool::asm::ast::operand::StringNode;
use pool::asm::ast::operand::IdentifierNode;
use pool::asm::ast::operand::IndirectNode;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;

use pool::compiler::ast::scope::ClassScope;
use pool::compiler::ast::scope::InstanceScope;
use pool::compiler::ast::scope::MethodScope;
use pool::compiler::ast::scope::VariableScope;

use pool::compiler::pir::BasicBlock;
use pool::compiler::pir::Location;
use pool::compiler::pir::Method;
use pool::compiler::pir::Value;

use pool::compiler::pir::statement::ArithOpStatement;
use pool::compiler::pir::statement::AsmStatement;
use pool::compiler::pir::statement::AssignStatement;
use pool::compiler::pir::statement::CallStatement;
use pool::compiler::pir::statement::CondStatement;
use pool::compiler::pir::statement::GlobalCallStatement;
use pool::compiler::pir::statement::GetStatement;
use pool::compiler::pir::statement::MoveStatement;
use pool::compiler::pir::statement::SetStatement;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMap;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::runtime::ClassTableEntry;
use sys::stream::IStream;
use sys::stream::OStream;

class X86Generator extends sys::log::LoggerAware, pool::compiler::pir::statement::Visitor {
    Parser _parser;
    CompilationUnit _unit;
    NodeList _nodes;
    ClassScope _classScope;
    ClassDeclNode _class;
    MethodScope _methodScope;
    MethodDeclNode _method;
    
    String _minus;
    int _resolveClasses;
    AnyMap _done;
    AnyList _todo;
    
    [] __init() {
        _minus = this.createOwn(String:CLASSNAME);
        _minus.printChar('-');
        _done = this.createOwn(AnyMap:CLASSNAME);
        _done.init(13);
        _todo = this.createOwn(AnyList:CLASSNAME);
    }
    [X86Generator] setParser(Parser parser) { _parser = parser; return this; }
    [X86Generator] setResolveClasses(int resolve) { _resolveClasses = resolve; return this; }

    [] generateClass(ClassDeclNode node, CompilationUnit unit) {
        _class = node;
        _unit = unit;
        _nodes = unit.getNodeList();
        _classScope = node.getClassScope();
        InstanceScope _instanceScope = node.getInstanceScope();
        
        if (!_classScope || _classScope.getState() < ClassScope:STATE_PIR_GENERATED) {
            this.error().print(node.getName()).printCString(": intermediate representation must be generated before assembly generation!");
            return;
        }

        // header
        this._newline();
        this._comment().printCString(" class ").print(_class.getName());
        this._label().print(this._classStart());
        this._long(this._number(sys::runtime::ClassDescriptor:MAGIC));
        this._longI(0);
        this._long(this._constStringOffset(_classScope.stringId(_classScope.getFullQualifiedName(), null)));
        this._long(this._classOffset(this._classTabs()));       // class tabs offset
        this._long(this._classOffset(this._virtMethodTabs()));  // virt method tabs offset
        this._long(this._classOffset(this._methodDeclTab()));   // method decl tab offset
        this._long(this._classOffset(this._instanceStart()));   // instance template offset
        this._long(this._instanceOffset(this._instanceEnd()));  // instance size
        this._long(this._instanceOffset(                        // Object handle offset in instance
            this._instanceHandle(_classScope.getFirstSuper())
        ));
        this._long(this._instanceOffset(                        // <class> handle offset in instance
            this._instanceHandle(_classScope)
        ));
        this._long(this._classOffset(this._classEnd()));        // <class> size
        this._long(this._number(_resolveClasses));              // resolved

        this._long(this._number(sys::memory::MemoryInfo:NONE)); // dynamic memory info "NONE"
        this._longI(0);                                         // dynamic next class desc
        this._longI(0);                                         // reserved
        this._longI(0);                                         // reserved
        this._newline();

        // dependent classes
        this._comment().printCString(" class tab");
        this._label().print(this._classTabs());
        this._comment().printCString(" used in hierarchy");
        {
            AnyIterator it = _classScope.getSupers();
            while (it.hasNext()) {
                ClassScope super = it.next();
                this._local(
                    this._classTabOffset(super),
                    this._classOffset(this._classTab(super))
                );
                this._label().print(this._classTab(super));
                if (_resolveClasses) {
                    this._long(this._classTabDesc(super));
                } else {
                    this._longI(0);  // @class-desc filled on class loading
                }
                this._long(this._constStringOffset(_classScope.stringId(super.getFullQualifiedName(), null)));
                this._long(this._classOffset(this._virtMethodTab(super)));     // virt method tab offset in description
                this._long(this._instanceOffset(this._instanceHandle(super))); // handle offset in instance
            }
            it.destroy();
        }
        this._comment().printCString(" used globally");
        {
            AnyIterator it = _classScope.getGloballyRequiredClasses();
            while (it.hasNext()) {
                ClassScope scope = it.next();
                if (!_classScope.hasSuper(scope)) {
                    this._local(
                        this._classTabOffset(scope),
                        this._classOffset(this._classTab(scope))
                    );
                    this._label().print(this._classTab(scope));
                    if (_resolveClasses) {
                        this._long(this._classTabDesc(scope));
                    } else {
                        this._longI(0);  // @class-desc filled on class loading
                    }
                    this._long(this._constStringOffset(_classScope.stringId(scope.getFullQualifiedName(), null)));
                    this._longI(0); // no vtab offset in description
                    this._longI(0); // no handle offset in instance
                }
            }
            it.destroy();
        }
        this._comment().printCString(" used unresolved");
        {
            AnyIterator it = _classScope.getUsedClasses();
            while (it.hasNext()) {
                ClassScope scope = it.next();
                if (!_classScope.hasSuper(scope) && !_classScope.hasGloballyRequiredClass(scope)) {
                    this._local(
                        this._classTabOffset(scope),
                        this._classOffset(this._classTab(scope))
                    );
                    this._label().print(this._classTab(scope));
                    this._longI(ClassTableEntry:DO_NOT_RESOLVE); // mark as pseudo dependency
                    this._long(this._constStringOffset(_classScope.stringId(scope.getFullQualifiedName(), null)));
                    this._longI(0); // no vtab offset in description
                    this._longI(0); // no handle offset in instance
                }
            }
            it.destroy();
        }
        this._comment().printCString(" class tab end");
        this._longI(0);
        this._longI(0);
        this._longI(0);
        this._longI(0);
        this._newline();
    
        // vtabs
        this._comment().printCString(" virtual method tabs");
        this._label().print(this._virtMethodTabs());
        {
            AnyIterator it = _classScope.getSupers();
            while (it.hasNext()) {
                ClassScope super = it.next();
                this._label().print(this._virtMethodTab(super));
                {
                    AnyIterator mit = super.getInstanceScope().getMethods();
                    while (mit.hasNext()) {
                        MethodDeclNode methodDecl = _instanceScope.getOwnMethod(mit.next()).getMethodDeclNode();
                        this._comment().print(methodDecl);
                        this._long(this._number(4 * methodDecl.getIndex()));
                        this._long(this._classTabOffset(methodDecl.getScope().getClassDeclNode().getClassScope()));
                    }
                    mit.destroy();
                }
            }
            it.destroy();
        }
        this._newline();

        // methods tab
        this._comment().printCString(" method decl tab");
        this._label().print(this._methodDeclTab());
        {
            AnyIterator it = _class.getMethods().iterator();
            while (it.hasNext()) {
                MethodDeclNode method = it.next();
                if (method.isAbstract() || method.isNaked()) {
                    this._longI(0);
                } else {
                    this._long(this._classOffset(this._methodDecl(method)));
                }
            }
            it.destroy();
        }
        this._newline();

        // constants
        this._comment().printCString(" constants");
        // generate constants
        {
            AnyIterator it = _classScope.getClassDeclNode().getConsts().iterator();
            while (it.hasNext()) {
                VariableInitInstNode node = it.next();
                ConstIntExprNode constInt = this.rt().cast(ConstIntExprNode:CLASSNAME, node.getInitializer());
                if (constInt) {
                    VariableDeclNode decl = node.getVariables().first();
                    this._newline();
                    this._comment().printCString(" int ").print(decl.getName());
                    this._local(
                        this._constInt(decl),
                        this._number(constInt.getValue())
                    );
                }
            }
            it.destroy();
        }
        // inject strings
        {
            AnyMapEntryIterator it = _classScope.strings();
            while (it.hasNext()) {
                [String string, String id] = it.nextPair();
                this._newline();
                this._comment().printCString(" string ").print(id);
                this._local(this._constStringOffset(id), this._classOffset(this._constString(id)));
                this._label().print(this._constString(id));
                this._inst1(".asciz", this._string(string));
            }
            it.destroy();
        }
        this._newline();

        // instance template
        this._comment().printCString(" instance template");
        this._label().print(this._instanceStart());
        this._longI(0); // @class-desc
        this._longI(0); // @meminfo
        
        // generate handles
        {
            AnyIterator it = _classScope.getSupers();
            while (it.hasNext()) {
                ClassScope super = it.next();
                int isSelf = _classScope.equals(super);
                this._label().print(this._instanceHandle(super));
                this._longI(0); // _call_entry
                this._longI(0); // @inst
                this._longI(0); // vtab-offset
                
                AnyIterator sit = super.getSupers();
                while (sit.hasNext()) {
                    ClassScope ssuper = sit.next();
                    if (isSelf) {
                        this._local(
                            this._instanceHandleVarsOffset(ssuper),
                            this._offset(this._instanceHandle(super), this._instanceHandleVars(ssuper))
                        );
                        this._label().print(this._instanceHandleVars(ssuper));
                    }
                    this._long(this._instanceOffset(this._instanceVars(ssuper))); // @Super-Obj-Vars
                }
                sit.destroy();
            }
            it.destroy();
        }
        this._newline();
        
        // generate instance vars
        {
            AnyIterator it = _classScope.getSupers();
            while (it.hasNext()) {
                ClassScope super = it.next();
                int isSelf = _classScope.equals(super);
                this._label().print(this._instanceVars(super));
                
                AnyIterator vit = super.getClassDeclNode().getVariables().iterator();
                while (vit.hasNext()) {
                    VariableDeclNode var = vit.next();
                    this._comment().printCString(" variable ").print(var.getName());
                    //if (isSelf || !_resolveClasses) {
                        this._local(
                            this._instanceVarOffset(super, var),
                            this._offset(this._instanceVars(super), this._instanceVar(super, var))
                        );
                    //}
                    this._label().print(this._instanceVar(super, var));
                    this._longI(0); // TODO: prepare variable according to var.getResolvedType().getSizeOfVariable()
                }
                vit.destroy();
            }
            it.destroy();
        }
        this._label().print(this._instanceEnd());
        this._newline();
    
        // methods
        this._comment().printCString(" method definitions");
        {
            AnyIterator it = _class.getMethods().iterator();
            while (it.hasNext()) {
                this.generateMethod(it.next());
            }
            it.destroy();
        }
        
        this._label().print(this._classEnd());
        this._newline();
    }

    [] generateMethod(MethodDeclNode method) {
        this._newline();
        this._comment().printCString(" method ").print(method.getName());
        if (method.isAbstract()) { return; }
        if (method.isEntry()) {
            this._local(this._id("_entry_class_desc"), this._classStart());
            this._local(this._id("_entry_global_func"), this._methodDecl(method));
        }
        if (!method.isNaked()) {
            this._label().print(this._methodDecl(method));
        }
        _method = method;
        _methodScope = method.getMethodScope();
        {
            //*/
            // iterate blocks in traces
            _todo.add(_methodScope.getPirMethod().getEntryBlock());
            BasicBlock cur = null;
            int fallthrough = false;
            while (!_todo.isEmpty()) {
                BasicBlock cur = _todo.shift();
                if (!_done.has(cur)) {
                    do {
                        _done.set(cur, cur);
                        if (cur.hasCond()) { _todo.add(cur.getCondNext()); }
                        BasicBlock next = cur.getNext();
                        fallthrough = next && !_done.has(next);
                        this.generateBasicBlock(cur, fallthrough);
                        cur = next;
                    } while (fallthrough);
                }
            }
            _done.clear();
            /*/
            AnyIterator it = _methodScope.getPirMethod().blocks();
            while (it.hasNext()) { this.generateBasicBlock(it.next(), false); }
            it.destroy();
            //*/
        }
        _method = null;
        _methodScope = null;
    }
    
    [] generateBasicBlock(BasicBlock block, int fallthrough) {
        if (_method.isNaked()) {
            // generate no block header
        } else if (block.isEntry()) {
            this._inst1("pushl", this._reg("ebp"));
            this._inst2("movl", this._reg("esp"), this._reg("ebp"));
            AnyList temps = _methodScope.getPirMethod().temps();
            if (!temps.isEmpty()) {
                // TODO: prepare variables according to var.getResolvedType().getSizeOfVariable()
                this._inst2("subl", this._number(4*temps.size()), this._reg("esp"));
            }
            // treat all registers callee save until register allocation (#11) and enhanced inline asm (#14)
            this._inst0("pushad");
        } else {
            this._label().print(this._methodDeclBlock(_method, block));
        }
        
        // statements
        block.accept(this.visitor());
        
        if (_method.isNaked()) {
            // generate no block footer
        } else if (block.isExit()) {
            this._inst0("popad");
            this._inst0("leave");
            this._inst0("ret");
        } else {
            if (block.hasCond()) {
                [CondStatement cond, BasicBlock condNext] = block.getCond();
                this._inst2("movl", this._location(cond.getLeft()), this._reg("eax"));
                this._inst2("cmpl", this._location(cond.getRight()), this._reg("eax"));
                OperandNode next = this._methodDeclBlock(_method, condNext);
                if (cond.isEq()) { this._inst1("je", next); }
                else if (cond.isNeq()) { this._inst1("jne", next); }
                else if (cond.isLt()) { this._inst1("jl", next); }
                else if (cond.isLe()) { this._inst1("jle", next); }
                else if (cond.isGt()) { this._inst1("jg", next); }
                else if (cond.isGe()) { this._inst1("jge", next); }
            }
            if (!fallthrough) {
                this._inst1("jmp", this._methodDeclBlock(_method, block.getNext()));
            }
        }
    }
    
    // Statements
    [] visitArithOp(ArithOpStatement stmt) {
        OperandNode dest = this._location(stmt.getDest());
        if (stmt.isAdd()) {
            this._inst2("movl", this._location(stmt.getLeft()), this._reg("eax"));
            this._inst2("addl", this._location(stmt.getRight()), this._reg("eax"));
            this._inst2("movl", this._reg("eax"), dest);
        } else if (stmt.isSub()) {
            this._inst2("movl", this._location(stmt.getLeft()), this._reg("eax"));
            this._inst2("subl", this._location(stmt.getRight()), this._reg("eax"));
            this._inst2("movl", this._reg("eax"), dest);
        } else if (stmt.isMul()) {
            this._inst2("movl", this._location(stmt.getLeft()), this._reg("eax"));
            if (stmt.getRight().isConst()) {
                //this._inst2("movl", this._location(stmt.getRight()), this._reg("ebx"));
                //this._inst1("imull", this._reg("ebx")); // %eax * %ebx => %edx:%eax
                //this._inst2("imull", this._reg("ebx"), this._reg("eax")); // %eax * %ebx => %eax (truncated)
                this._inst3("imull", this._reg("eax"), this._location(stmt.getRight()), this._reg("eax")); // %eax * CONST => %eax (truncated)
            } else {
                //this._inst1("imull", this._location(stmt.getRight())); // %eax * right-side => %edx:%eax
                this._inst2("imull", this._location(stmt.getRight()), this._reg("eax")); // %eax * right-side => %eax (truncated)
            }
            this._inst2("movl", this._reg("eax"), dest);
        } else if (stmt.isDiv()) {
            this._inst2("movl", this._location(stmt.getLeft()), this._reg("eax"));
            this._inst0("cdq");
            this._inst2("movl", this._location(stmt.getRight()), this._reg("ebx"));
            this._inst1("idiv", this._reg("ebx"));  // %edx:%eax / %ebx => %eax remainer %edx
            this._inst2("movl", this._reg("eax"), dest);
        } else if (stmt.isMod()) {
            this._inst2("movl", this._location(stmt.getLeft()), this._reg("eax"));
            this._inst0("cdq");
            this._inst2("movl", this._location(stmt.getRight()), this._reg("ebx"));
            this._inst1("idiv", this._reg("ebx"));  // %edx:%eax / %ebx => %eax remainer %edx
            this._inst2("movl", this._reg("edx"), dest);
        }
    }

    [] visitAsm(AsmStatement stmt) {
        {
            AnyMapEntryIterator it = stmt.getIn().entries();
            while (it.hasNext()) {
                [String reg, Location loc] = it.nextPair();
                this._inst2("movl", this._location(loc), this._reg(reg.toCString()));
            }
            it.destroy();
        }
        { // parse asm
            String s = this.rt().createInstance(String:CLASSNAME);
            // TODO: fix pasm parser to parse single lines without newlines
            s.assignString(stmt.getPasm()); s.printNewline();
            this._comment().printCString(" vvv inline asm");
            IStream in = s.toIStream();
            _parser.parse(in, _method.getName(), _unit);
            in.destroy();
            s.destroy();
            this._comment().printCString(" ^^^ inline asm");
        }
        {
            AnyMapEntryIterator it = stmt.getOut().entries();
            while (it.hasNext()) {
                [String reg, Location loc] = it.nextPair();
                this._inst2("movl", this._reg(reg.toCString()), this._location(loc));
            }
            it.destroy();
        }
    }
    [] visitAssign(AssignStatement stmt) {
        Value v = stmt.getValue();
        OperandNode dest = this._location(stmt.getDest());
        if (v.isNumber()) {
            this._inst2("movl", this._number(v.getNumber()), dest);
        } else if (v.isString()) {
            this._inst2("movl", this._indirectBD(this._reg("ebp"), this._number(8)), this._reg("eax"));
            this._inst2("addl", this._constStringOffset(v.getString()), this._reg("eax"));
            this._inst2("movl", this._reg("eax"), dest);
        } else { // if (v.isNull()) {
            this._inst2("movl", this._number(0), dest);
        }
    }
    [] visitCall(CallStatement stmt) {
        AnyList rets = stmt.getRets();
        AnyList params = stmt.getParams();
        if (!rets.isEmpty()) {
            // TODO: prepare variables according to var.getResolvedType().getSizeOfVariable()
            this._inst2("subl", this._number(4*rets.size()), this._reg("esp"));
        }
        {
            AnyIterator it = params.iterator();
            this._pushAllReverse(it);
            it.destroy();
        }

        this._inst2("movl", this._location(stmt.getContext()), this._reg("eax"));
        this._inst1("pushl", this._reg("eax"));
        this._inst1("pushl", this._number(8*stmt.getMethod().getIndex()));
        this._inst1("call", this._indirectB(this._reg("eax")));
        this._inst2("addl", this._number(8 + 4*params.size()), this._reg("esp"));

        if (!rets.isEmpty()) {
            AnyIterator it = rets.iterator();
            while (it.hasNext()) {
                this._inst1("popl", this._location(it.next()));
            }
            it.destroy();
        }
    }
    [] visitGlobalCall(GlobalCallStatement stmt) {
        AnyList rets = stmt.getRets();
        AnyList params = stmt.getParams();
        if (!rets.isEmpty()) {
            // TODO: prepare variables according to var.getResolvedType().getSizeOfVariable()
            this._inst2("subl", this._number(4*rets.size()), this._reg("esp"));
        }
        {
            AnyIterator it = params.iterator();
            this._pushAllReverse(it);
            it.destroy();
        }
        MethodScope ms = stmt.getMethod();
    
        // method @class-desc => %eax
        this._inst2("movl", this._indirectBD(this._reg("ebp"), this._number(8)), this._reg("eax"));
        this._inst2("movl",
            this._indirectBD(this._reg("eax"), this._classTabOffset(ms.isGlobalMethod())),
            this._reg("eax")
        );
        // method table => %ebx
        this._inst2("movl", this._reg("eax"), this._reg("ebx"));
        this._inst2("addl",
            this._indirectBD(this._reg("ebx"), this._number(20)),
            this._reg("ebx")
        );
        // method offset => %ebx
        this._inst2("movl",
            this._indirectBD(this._reg("ebx"), this._number(4*ms.getMethodDeclNode().getIndex())),
            this._reg("ebx")
        );
        // @method => %ebx
        this._inst2("addl", this._reg("eax"), this._reg("ebx"));
        this._inst1("pushl", this._number(0));
        this._inst1("pushl", this._reg("eax"));
        this._inst1("call", this._reg("ebx"));
        this._inst2("addl", this._number(8 + 4*params.size()), this._reg("esp"));

        if (!rets.isEmpty()) {
            AnyIterator it = rets.iterator();
            while (it.hasNext()) {
                this._inst1("popl", this._location(it.next()));
            }
            it.destroy();
        }
    }
    [] visitGet(GetStatement stmt) {
        OperandNode dest = this._location(stmt.getDest());
        VariableScope vs = stmt.getVariableContext();
        InstanceScope is = vs.getParent().isInstance();
        if (is) {
            ClassScope cs = is.getClassScope();
            this._inst2("movl", this._location(stmt.getContext()), this._reg("eax"));
            this._inst2("movl",
                this._indirectBD(this._reg("eax"), this._instanceHandleVarsOffset(cs)),
                this._reg("ebx")
            );
            this._inst2("addl", this._indirectBD(this._reg("eax"), this._number(4)), this._reg("ebx"));
            this._inst2("movl",
                this._indirectBD(this._reg("ebx"), this._instanceVarOffset(vs.getClassDeclNode().getClassScope(), vs.getVariableDeclNode())),
                this._reg("eax")
            );
            this._inst2("movl", this._reg("eax"), dest);
        } else { // struct access
            this._inst2("movl", this._location(stmt.getContext()), this._reg("ebx"));
            this._inst2("movl",
                this._indirectBD(this._reg("ebx"), this._number(vs.getStructOffset())),
                this._reg("eax")
            );
            this._inst2("movl", this._reg("eax"), dest);
        }
    }
    [] visitMove(MoveStatement stmt) {
        this._inst2("movl", this._location(stmt.getSrc()), this._reg("eax"));
        this._inst2("movl", this._reg("eax"), this._location(stmt.getDest()));
    }
    [] visitSet(SetStatement stmt) {
        OperandNode src = this._location(stmt.getSrc());
        VariableScope vs = stmt.getVariableContext();
        InstanceScope is = vs.getParent().isInstance();
        if (is) {
            ClassScope cs = is.getClassScope();
            this._inst2("movl", this._location(stmt.getContext()), this._reg("eax"));
            this._inst2("movl",
                this._indirectBD(this._reg("eax"), this._instanceHandleVarsOffset(cs)),
                this._reg("ebx")
            );
            this._inst2("addl", this._indirectBD(this._reg("eax"), this._number(4)), this._reg("ebx"));
            this._inst2("movl", src, this._reg("eax"));
            this._inst2("movl",
                this._reg("eax"),
                this._indirectBD(this._reg("ebx"), this._instanceVarOffset(cs, vs.getVariableDeclNode()))
            );
        } else { // struct access
            this._inst2("movl", this._location(stmt.getContext()), this._reg("ebx"));
            this._inst2("movl", src, this._reg("eax"));
            this._inst2("movl",
                this._reg("eax"),
                this._indirectBD(this._reg("ebx"), this._number(vs.getStructOffset()))
            );
        }
    }

    [] _pushAllReverse(AnyIterator it) {
        if (!it.hasNext()) {
            return;
        }
        Location loc = it.next();
        this._pushAllReverse(it);
        this._inst1("pushl", this._location(loc));
    }
    
    // HELPER
    [OperandNode] _classStart() { return this._id1(_classScope.getGlobalPrefix()); }
    [OperandNode] _classEnd() { return this._id2(_classScope.getLocalPrefix(), "_end"); }
    [OperandNode] _classTabs() { return this._id2(_classScope.getLocalPrefix(), "_cts"); }
    [OperandNode] _classTab(ClassScope cs) {
        return this._id3(_classScope.getLocalPrefix(), "_ct", cs.getLocalPrefix());
    }
    [OperandNode] _classTabDesc(ClassScope cs) { return this._id1(cs.getGlobalPrefix()); }
    [OperandNode] _classTabOffset(ClassScope cs) {
        return this._id3(_classScope.getLocalPrefix(), "_cto", cs.getLocalPrefix());
    }

    [OperandNode] _constInt(VariableDeclNode decl) {
        return this._id3(_classScope.getGlobalPrefix(), "_coi_", decl.getName());
    }
    [OperandNode] _constString(String stringId) {
        return this._id3(_classScope.getLocalPrefix(), "_cos_", stringId);
    }
    [OperandNode] _constStringOffset(String stringId) {
        return this._id3(_classScope.getGlobalPrefix(), "_coso_", stringId);
    }
    
    [OperandNode] _methodDeclTab() { return this._id2(_classScope.getLocalPrefix(), "_mdt"); }
    [OperandNode] _methodDecl(MethodDeclNode decl) {
        return this._id3(decl.getScope().getClassDeclNode().getClassScope().getLocalPrefix(), "_md_", decl.getName());
    }
    [OperandNode] _methodDeclOffset(MethodDeclNode decl) {
        return this._id3(decl.getScope().getClassDeclNode().getClassScope().getGlobalPrefix(), "_mdo_", decl.getName());
    }
    [OperandNode] _methodDeclBlock(MethodDeclNode decl, BasicBlock block) {
        IdentifierNode idNode = this.createOwn(IdentifierNode:CLASSNAME);
        idNode.getIdentifier().print(_classScope.getLocalPrefix())
            .printCString("_md_").print(decl.getName())
            .printCString("_bb_").printInt(block.getId());
        return idNode.operand();
    }
    [OperandNode] _virtMethodTabs() { return this._id2(_classScope.getLocalPrefix(), "_mts"); }
    [OperandNode] _virtMethodTab(ClassScope cs) {
        return this._id3(_classScope.getLocalPrefix(), "_mt", cs.getLocalPrefix());
    }

    [OperandNode] _instanceStart() { return this._id2(_classScope.getLocalPrefix(), "_tpl"); }
    [OperandNode] _instanceEnd() { return this._id2(_classScope.getLocalPrefix(), "_tpl_end"); }
    [OperandNode] _instanceHandle(ClassScope cs) {
        return this._id3(_classScope.getLocalPrefix(), "_tpl_h", cs.getLocalPrefix());
    }
    [OperandNode] _instanceHandleVars(ClassScope cs) {
        return this._id3(_classScope.getLocalPrefix(), "_tpl_hv", cs.getLocalPrefix());
    }
    [OperandNode] _instanceHandleVarsOffset(ClassScope cs) {
        return this._id3(_classScope.getGlobalPrefix(), "_tpl_hvo", cs.getGlobalPrefix());
    }
    [OperandNode] _instanceVars(ClassScope cs) {
        return this._id3(_classScope.getLocalPrefix(), "_tpl_vs", cs.getLocalPrefix());
    }
    [OperandNode] _instanceVar(ClassScope cs, VariableDeclNode decl) {
        return this._id5(_classScope.getLocalPrefix(), "_tpl_v", cs.getLocalPrefix(), "_", decl.getName());
    }
    [OperandNode] _instanceVarOffset(ClassScope cs, VariableDeclNode decl) {
        return this._id5(_classScope.getLocalPrefix(), "_i", cs.getLocalPrefix(), "_", decl.getName());
    }

    [OperandNode] _classOffset(OperandNode end) { return this._offset(this._classStart(), end); }
    [OperandNode] _instanceOffset(OperandNode end) { return this._offset(this._instanceStart(), end); }

    [OStream] _comment() {
        CommentNode commentNode = this.rt().createInstance(CommentNode:CLASSNAME);
        _nodes.add(commentNode.node());
        return commentNode.getComment().ostream();
    }

    [OStream] _label() {
        LabelNode labelNode = this.rt().createInstance(LabelNode:CLASSNAME);
        _nodes.add(labelNode.node());
        return labelNode.getLabel().ostream();
    }
    
    [] _byteI(int i) { this._inst1(".byte", this._number(i)); }
    [] _longI(int i) { this._inst1(".long", this._number(i)); }
    [] _long(OperandNode value) { this._inst1(".long", value); }
    
    [] _local(OperandNode id, OperandNode value) {
        IdentifierNode idNode = this.rt().cast(IdentifierNode:CLASSNAME, id);
        if (!idNode) { return; }
        
        DefinitionNode defNode = this.rt().createInstance(DefinitionNode:CLASSNAME);
        defNode.initDefinition(idNode.getIdentifier(), value);
        _nodes.add(defNode.node());
    }
    
    [] _newline() {
        EmptyNode emptyNode = this.rt().createInstance(EmptyNode:CLASSNAME);
        _nodes.add(emptyNode.node());
    }
    
    [] _inst0(cstring inst) {
        InstructionNode instNode = this.rt().createInstance(InstructionNode:CLASSNAME);
        instNode.setCOperation(inst);
        _nodes.add(instNode.node());
    }
    
    [] _inst1(cstring inst, OperandNode op1) {
        InstructionNode instNode = this.rt().createInstance(InstructionNode:CLASSNAME);
        instNode.setCOperation(inst).setOperand1(op1);
        _nodes.add(instNode.node());
    }
    
    [] _inst2(cstring inst, OperandNode op1, OperandNode op2) {
        InstructionNode instNode = this.rt().createInstance(InstructionNode:CLASSNAME);
        instNode.setCOperation(inst).setOperand1(op1).setOperand2(op2);
        _nodes.add(instNode.node());
    }
    
    [] _inst3(cstring inst, OperandNode op1, OperandNode op2, OperandNode op3) {
        InstructionNode instNode = this.rt().createInstance(InstructionNode:CLASSNAME);
        instNode.setCOperation(inst).setOperand1(op1).setOperand2(op2).setOperand3(op3);
        _nodes.add(instNode.node());
    }
    
    [OperandNode] _number(int value) {
        NumberNode numberNode = this.createOwn(NumberNode:CLASSNAME);
        return numberNode.setOperand(value).operand();
    }
    
    [OperandNode] _string(String value) {
        StringNode stringNode = this.createOwn(StringNode:CLASSNAME);
        return stringNode.setOperand(value).operand();
    }
    
    [OperandNode] _reg(cstring reg) {
        RegisterNode regNode = this.createOwn(RegisterNode:CLASSNAME);
        return regNode.setCRegister(reg).operand();
    }
    
    [OperandNode] _indirectB(OperandNode base) {
        IndirectNode indNode = this.createOwn(IndirectNode:CLASSNAME);
        return indNode.setBase(base).operand();
    }
    
    [OperandNode] _indirectBD(OperandNode base, OperandNode displacement) {
        IndirectNode indNode = this.createOwn(IndirectNode:CLASSNAME);
        return indNode.setBase(base).setDisplacement(displacement).operand();
    }
    
    [OperandNode] _location(Location l) {
        int offset = 0;
        if (l.isConst())  { return this._number(l.getId()); }
        // TODO: prepare offsets according to variable sizes
        if (l.isParam())  { offset = 16 + 4*l.getId(); }
        if (l.isReturn()) { offset = 16 + 4*_methodScope.getPirMethod().params().size() + 4*l.getId(); }
        if (l.isTemp())   { offset = -4 - 4*l.getId(); }
        if (l.isThis())   { offset = 12; }
        return this._indirectBD(this._reg("ebp"), this._number(offset));
    }
    
    [OperandNode] _offset(OperandNode start, OperandNode end) {
         FormulaNode formulaNode = this.createOwn(FormulaNode:CLASSNAME);
         return formulaNode.initFormula(end, _minus, start).operand();
    }
    
    [OperandNode] _id(cstring identifier) {
         IdentifierNode idNode = this.createOwn(IdentifierNode:CLASSNAME);
         idNode.getIdentifier().printCString(identifier);
         return idNode.operand();
    }
    
    [OperandNode] _id1(String prefix) {
         IdentifierNode idNode = this.createOwn(IdentifierNode:CLASSNAME);
         idNode.getIdentifier().print(prefix);
         return idNode.operand();
    }
    
    [OperandNode] _id2(String prefix, cstring postfix) {
         IdentifierNode idNode = this.createOwn(IdentifierNode:CLASSNAME);
         idNode.getIdentifier().print(prefix).printCString(postfix);
         return idNode.operand();
    }
    
    [OperandNode] _id3(String prefix, cstring sep, String postfix) {
         IdentifierNode idNode = this.createOwn(IdentifierNode:CLASSNAME);
         idNode.getIdentifier().print(prefix).printCString(sep).print(postfix);
         return idNode.operand();
    }
    
    [OperandNode] _id5(String prefix, cstring sep1, String infix, cstring sep2, String postfix) {
         IdentifierNode idNode = this.createOwn(IdentifierNode:CLASSNAME);
         idNode.getIdentifier().print(prefix)
            .printCString(sep1).print(infix)
            .printCString(sep2).print(postfix);
         return idNode.operand();
    }
    
}
