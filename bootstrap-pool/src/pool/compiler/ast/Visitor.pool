/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ArithAssignmentExprNode;
use pool::compiler::ast::node::expression::ArithBinaryExprNode;
use pool::compiler::ast::node::expression::ArithUnaryExprNode;
use pool::compiler::ast::node::expression::AssignmentExprNode;
use pool::compiler::ast::node::expression::ConstCStringExprNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::expression::LogicalBinaryExprNode;
use pool::compiler::ast::node::expression::LogicalUnaryExprNode;
use pool::compiler::ast::node::expression::MethodCallExprNode;
use pool::compiler::ast::node::expression::NullExprNode;
use pool::compiler::ast::node::expression::SignExprNode;
use pool::compiler::ast::node::expression::ThisExprNode;
use pool::compiler::ast::node::expression::VariableExprNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;

use sys::core::String;
use sys::stream::OStream;

class Visitor extends sys::log::LoggerAware {

    int indent; // = 0

    [int] visit(Node node) { return node.accept(this.visitor()); }

    // declarations
    [int] visitTranslationUnit(TranslationUnitNode node) {
        int success = true;
        success = node.getNamespace().accept(this.visitor()) && success;
        success = node.getUses().acceptAll(this.visitor()) && success;
        success = node.getClasses().acceptAll(this.visitor()) && success;
        success = node.getStructs().acceptAll(this.visitor()) && success;
        return success;
    }
    [int] visitNamespaceDecl(NamespaceDeclNode node) { return true; }
    [int] visitUseStatement(UseStatementNode node) {
        return node.getName().accept(this.visitor());
    }
    [int] visitClassDecl(ClassDeclNode node) {
        int success = true;
        success = node.getExtends().acceptAll(this.visitor()) && success;
        success = node.getConsts().acceptAll(this.visitor()) && success;
        success = node.getVariables().acceptAll(this.visitor()) && success;
        success = node.getMethods().acceptAll(this.visitor()) && success;
        return success;
    }
    [int] visitStructDecl(StructDeclNode node) {
        int success = true;
        success = node.getConsts().acceptAll(this.visitor()) && success;
        success = node.getVariables().acceptAll(this.visitor()) && success;
        return success;
    }
    [int] visitMethodDecl(MethodDeclNode node) {
        int success = true;
        success = node.getReturnTypes().acceptAll(this.visitor()) && success;
        success = node.getParameters().acceptAll(this.visitor()) && success;
        if (!node.isAbstract()) { success = node.getBody().accept(this.visitor()) && success; }
        return success;
    }
    [int] visitVariableDecl(VariableDeclNode node) {
        return node.getTypeRef().accept(this.visitor());
    }
    
    // instructions
    [int] visitBlockInst(BlockInstNode node) {
        return node.getInstructions().acceptAll(this.visitor());
    }
    [int] visitExpressionInst(ExpressionInstNode node) {
        return node.getExpression().accept(this.visitor());
    }
    [int] visitIfInst(IfInstNode node) {
        int success = true;
        success = node.getCondition().accept(this.visitor()) && success;
        if (node.hasTrueBlock()) { success = node.getTrueBlock().accept(this.visitor()) && success; }
        if (node.hasFalseBlock()) { success = node.getFalseBlock().accept(this.visitor()) && success; }
        return success;
    }
    [int] visitInlinePasmInst(InlinePasmInstNode node) {
        int success = true;
        if (node.hasIn()) { success = node.getIn().acceptAll(this.visitor()) && success; }
        if (node.hasOut()) { success = node.getOut().acceptAll(this.visitor()) && success; }
        return success;
    }
    [int] visitReturnInst(ReturnInstNode node) {
        return !node.hasValues() || node.getValues().acceptAll(this.visitor());
    }
    [int] visitVariableInitInst(VariableInitInstNode node) {
        int success = true;
        success = node.getVariables().acceptAll(this.visitor()) && success;
        success = node.getInitializer().accept(this.visitor()) && success;
        return success;
    }
    [int] visitWhileInst(WhileInstNode node) {
        int success = true;
        success = node.getCondition().accept(this.visitor()) && success;
        success = node.getBlock().accept(this.visitor()) && success;
        return success;
    }
    
    // expressions
    [int] visitArithAssignmentExpr(ArithAssignmentExprNode node) {
        int success = true;
        success = node.getVariable().accept(this.visitor()) && success;
        success = node.getValue().accept(this.visitor()) && success;
        return success;
    }
    [int] visitArithBinaryExpr(ArithBinaryExprNode node) {
        int success = true;
        success = node.getLeft().accept(this.visitor()) && success;
        success = node.getRight().accept(this.visitor()) && success;
        return success;
    }
    [int] visitArithUnaryExpr(ArithUnaryExprNode node) {
        return node.getVariable().accept(this.visitor());
    }
    [int] visitAssignmentExpr(AssignmentExprNode node) {
        int success = true;
        success = node.getVariable().accept(this.visitor()) && success;
        success = node.getValue().accept(this.visitor()) && success;
        return success;
    }
    [int] visitConstCStringExpr(ConstCStringExprNode node) { return true; }
    [int] visitConstIntExpr(ConstIntExprNode node) { return true; }
    [int] visitLogicalBinaryExpr(LogicalBinaryExprNode node) {
        int success = true;
        success = node.getLeft().accept(this.visitor()) && success;
        success = node.getRight().accept(this.visitor()) && success;
        return success;
    }
    [int] visitLogicalUnaryExpr(LogicalUnaryExprNode node) {
        return node.getExpression().accept(this.visitor());
    }
    [int] visitMethodCallExpr(MethodCallExprNode node) {
        int success = true;
        if (node.hasContext()) { success = node.getContext().accept(this.visitor()) && success; }
        if (node.hasParameters()) { success = node.getParameters().acceptAll(this.visitor()) && success; }
        return success;
    }
    [int] visitNullExpr(NullExprNode node) { return true; }
    [int] visitSignExpr(SignExprNode node) {
        return node.getExpression().accept(this.visitor());
    }
    [int] visitThisExpr(ThisExprNode node) { return true; }
    [int] visitVariableExpr(VariableExprNode node) {
        return !node.hasContext() || node.getContext().accept(this.visitor());
    }
    
    // references
    [int] visitAllRef(AllRefNode node) { return true; }
    [int] visitAnyRef(AnyRefNode node) { return true; }
    [int] visitClassRef(ClassRefNode node) { return true; }
    [int] visitCStringRef(CStringRefNode node) { return true; }
    [int] visitIntRef(IntRefNode node) { return true; }

    [] _traceStart(String fqn, cstring step) {
        if (!this.hasLogLevel(sys::log::Logger:TRACE)) { return; }
        OStream line = this.trace().printCString("    ");
        int i = 0;
        while (i++ < indent) { line.printChar('#'); }
        line.print(fqn).printChar(':').printChar(' ').printCString(step);
        indent++;
    }

    [] _traceStop(String fqn, cstring step) {
        if (!this.hasLogLevel(sys::log::Logger:TRACE)) { return; }
        indent--;
        OStream line = this.trace().printCString("    ");
        int i = 0;
        while (i++ < indent) { line.printChar('#'); }
        line.print(fqn).printChar(':').printChar(' ').printCString(step);
    }
    
    // TODO: remove with implicit cast
    [Visitor] visitor() { return this; }
}
