/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::scope;

use pool::compiler::ast::NamedType;
use pool::compiler::ast::Scope;
use pool::compiler::ast::node::declaration::ClassDeclNode;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMap;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::stream::OStream;

class ClassScope extends NamedType, Scope {

    ClassDeclNode _classDecl;
    
    AnyMap _supers;  // HashMap<String, ClassScope>
    AnyMap _required;  // HashMap<String, ClassScope>

    [] __init() {
        this._initScope();
        this._initClassScope();
    }
    
    [] _initClassScope() {
        _supers = this.createOwn(AnyMap:CLASSNAME);
        _required = this.createOwn(AnyMap:CLASSNAME);
    }
    
    [ClassScope] setClassDeclNode(ClassDeclNode classDecl) { _classDecl = classDecl; return this; }
    [ClassDeclNode] getClassDeclNode() { return _classDecl; }
    [InstanceScope] getInstanceScope() { return _classDecl.getInstanceScope(); }
    
    [] addSuper(ClassScope super) { _supers.set(super.getFullQualifiedName(), super); }
    [] registerSupersFromScope(ClassScope source) {
        AnyMapEntryIterator it := source._supers.entries();
        while (it.hasNext()) {
            [String id, ClassScope cs] := it.nextPair();
            _supers.set(id, cs);
        }
        it.destroy();
    }
    [int] hasSuper(ClassScope super) { return _supers.has(super.getFullQualifiedName()); }
    [AnyIterator] getSupers() { return _supers.values(); }
    
    [] markAsGloballyRequired(ClassScope required) { _required.set(required.getFullQualifiedName(), required); }
    [int] hasGloballyRequiredClass(ClassScope scope) { return _required.has(scope.getFullQualifiedName()); }
    [AnyIterator] getGloballyRequiredClasses() { return _required.values(); }
    
    [int] isBool() { return false; }
    
    [OStream] printDebugName(OStream stream) {
        return stream.printCString("ClassScope of ").print(_classDecl);
    }

}
