/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::scope;

use pool::compiler::ast::NamedType;
use pool::compiler::ast::Scope;
use pool::compiler::ast::node::declaration::ClassDeclNode;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMap;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::utils::FullQualifiedNameIterator;
use sys::stream::OStream;

class ClassScope extends NamedType, Scope {

    ClassDeclNode _classDecl;
    
    AnyMap _supers;  // HashMap<String, ClassScope>
    AnyMap _required;  // HashMap<String, ClassScope>
    AnyMap _usedClasses;  // HashMap<String, ClassScope>
    AnyMap _strings;  // HashMap<String, String>
    
    String _localPrefix;
    String _globalPrefix;

    [] __init() {
        this._initScope();
        this._initClassScope();
    }
    
    [] _initClassScope() {
        _supers = this.createOwn(AnyMap:CLASSNAME);
        _required = this.createOwn(AnyMap:CLASSNAME);
        _usedClasses = this.createOwn(AnyMap:CLASSNAME);
        _strings = this.createOwn(AnyMap:CLASSNAME);
        
        _localPrefix = this.createOwn(String:CLASSNAME);
        _globalPrefix = this.createOwn(String:CLASSNAME);
    }
    
    [NamedType] initPrefixes(String fqn) {
        FullQualifiedNameIterator parts = this.rt().createInstance(FullQualifiedNameIterator:CLASSNAME);
        parts.init(fqn.toIStream());
        while (parts.hasNext()) {
            _globalPrefix.printChar('_').print(parts.next());
        }
        parts.destroy();
        _localPrefix.printChar('_')._printUInt(fqn.hash(), 16, 8);
        return this.setFullQualifiedName(fqn);
    }
    [String] getLocalPrefix() { return _localPrefix; }
    [String] getGlobalPrefix() { return _globalPrefix; }
    
    [ClassScope] setClassDeclNode(ClassDeclNode classDecl) { _classDecl = classDecl; return this; }
    [ClassDeclNode] getClassDeclNode() { return _classDecl; }
    [InstanceScope] getInstanceScope() { return _classDecl.getInstanceScope(); }
    
    [] addSuper(ClassScope super) { _supers.set(super.getFullQualifiedName(), super); }
    [] registerSupersFromScope(ClassScope source) {
        AnyMapEntryIterator it := source._supers.entries();
        while (it.hasNext()) {
            [String id, ClassScope cs] := it.nextPair();
            _supers.set(id, cs);
        }
        it.destroy();
    }
    [int] hasSuper(ClassScope super) { return _supers.has(super.getFullQualifiedName()); }
    [AnyIterator] getSupers() { return _supers.values(); }
    [ClassScope] getFirstSuper() { return _supers.first(); }
    
    [] markAsGloballyRequired(ClassScope required) { _required.set(required.getFullQualifiedName(), required); }
    [int] hasGloballyRequiredClass(ClassScope scope) { return _required.has(scope.getFullQualifiedName()); }
    [AnyIterator] getGloballyRequiredClasses() { return _required.values(); }
    
    [] markAsUsed(ClassScope scope) { _usedClasses.set(scope.getFullQualifiedName(), scope); }
    [int] hasUsedClass(ClassScope scope) { return _usedClasses.has(scope.getFullQualifiedName()); }
    [AnyIterator] getUsedClasses() { return _usedClasses.values(); }
    
    [String] stringId(String value, String seed) {
        String id = _strings.get(value);
        if (!id) {
            if (seed) {
                id = seed;
            } else {
                id = this.createOwn(String:CLASSNAME);
                id.printCString("string_").printInt(_strings.size());
            }
            _strings.set(value, id);
        }
        return id;
    }
    [AnyMapEntryIterator] strings() { return _strings.entries(); }
    
    [ClassScope] isClass() { return this; }
    [int] isBool() { return false; }
    
    [OStream] printDebugName(OStream stream) {
        return stream.printCString("ClassScope of ").print(_classDecl);
    }

}
