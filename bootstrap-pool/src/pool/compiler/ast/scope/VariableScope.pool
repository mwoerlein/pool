/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::scope;

use pool::compiler::ast::Scope;
use pool::compiler::ast::node::expression::ExpressionNode;
use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::pir::Location as PirLocation;

use sys::stream::OStream;

class VariableScope extends Scope {

    VariableDeclNode _variableDecl;
    ExpressionNode _finalInitializer;
    int _structOffset;
    PirLocation _pirLocation;
    
    [VariableScope] setVariableDeclNode(VariableDeclNode variableDecl) { _variableDecl = variableDecl; return this; }
    [VariableDeclNode] getVariableDeclNode() { return _variableDecl; }
    [VariableScope] setFinalInitializer(ExpressionNode expr) { _finalInitializer = expr; return this; }
    [ExpressionNode] getFinalInitializer() { return _finalInitializer; }
    
    [VariableScope] setStructOffset(int offset) { _structOffset = offset; return this; }
    [int] getStructOffset() { return _structOffset; }
    
    [VariableScope] setPirLocation(PirLocation l) { _pirLocation = l; return this; }
    [PirLocation] getPirLocation() { return _pirLocation; }

    [VariableScope] isVariable() { return this; }
    
    [OStream] printDebugName(OStream stream) {
        stream.printCString("VariableScope of ").print(_variableDecl);
        MethodDeclNode m = this.getMethodDeclNode();
        ClassDeclNode c = this.getClassDeclNode();
        if (m) { stream.printCString(" in ").print(m); }
        else if (c) { stream.printCString(" in ").print(c); }
        return stream;
    }

}
