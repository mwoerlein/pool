/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::scope;

use pool::compiler::ast::Scope;
use pool::compiler::ast::Type;
use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;

use pool::compiler::pir::Method as PirMethod;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMap;
use sys::stream::OStream;

class MethodScope extends Scope {

    MethodDeclNode _methodDecl;
    /* method ID for virtual method calls */
    int _index;
    AnyMap _parameters; //AnyMap<VariableScope, Type>
    AnyList _returnTypes; //AnyList<Type>
    PirMethod _pirMethod;
    MethodScope _mainScope;

    [] __init() {
        this._initScope();
        this._initMethodScope();
    }
    
    [] _initMethodScope() {
        _index = -1;
        _parameters = this.createOwn(AnyMap:CLASSNAME);
        _parameters.init(5);
        _returnTypes = this.createOwn(AnyList:CLASSNAME);
    }
    
    [MethodScope] setMainMethodScope(MethodScope scope) { _mainScope = scope; return this; }
    [MethodScope] getMainMethodScope() { if (_mainScope) { return _mainScope; } return this; }
    [MethodScope] setMethodDeclNode(MethodDeclNode methodDecl) { _methodDecl = methodDecl; return this; }
    [MethodDeclNode] getMethodDeclNode() {
        if (_mainScope) { return _mainScope.getMethodDeclNode(); }
        return _methodDecl;
    }
    
    [MethodScope] setIndex(int i) { _index = i; return this; }
    [int] getIndex() { return _index; }
    
    [MethodScope] addParameter(VariableScope var, Type type) { _parameters.set(var, type); return this; }
    [AnyMap] getParameters() { if (_mainScope) { return _mainScope.getParameters(); } return _parameters; }
    
    [MethodScope] addReturnType(Type type) { _returnTypes.add(type); return this; }
    [AnyList] getReturnTypes() { if (_mainScope) { return _mainScope.getReturnTypes(); } return _returnTypes; }

    [MethodScope] setPirMethod(PirMethod m) { _pirMethod = this.own(m); return this; }
    [PirMethod] getPirMethod() { if (_mainScope) { return _mainScope.getPirMethod(); } return _pirMethod; }

    [MethodScope] isMethod() { return this; }
    [InstanceScope] isInstanceMethod() { return _parent.isInstance(); }
    [ClassScope] isGlobalMethod() { return _parent.isClass(); }
    
    [OStream] printDebugName(OStream stream) {
        stream.printCString("MethodScope of ").print(_methodDecl);
        ClassDeclNode c = this.getClassDeclNode();
        if (c) { stream.printCString(" in ").print(c); }
        return stream;
    }

}
