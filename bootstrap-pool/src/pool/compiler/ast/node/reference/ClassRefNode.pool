/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::node::reference;

use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::expression::ExpressionNode;

use sys::core::String;
use sys::stream::OStream;

class ClassRefNode extends TypeRefNode, ExpressionNode {

    String _name;
    String _lastPart;

    [] __init() {
        _name = this.createOwn(String:CLASSNAME);
        _lastPart = this.createOwn(String:CLASSNAME);
    }
    
    [ClassRefNode] initName(String part) {
        _name.assignString(part);
        _lastPart.assignString(part);
        return this;
    }
    [ClassRefNode] appendName(String part) {
        _name.printChar(':').printChar(':').print(part);
        _lastPart.assignString(part);
        return this;
    }
    [String] getName() { return _name; }
    [String] getLastPart() { return _lastPart; }
    
    [int] isFullQualified() { return !_name.equals(_lastPart); }
    
    // TYPE_REF_NODE
    [ClassRefNode] asClassRef() { return this; }
    
    // NODE
    [int] accept(Visitor visitor) { return visitor.visitClassRef(this); }
    [OStream] printDebugName(OStream stream) {
        return stream.printCString("type-<").print(_name).printChar('>');
    }
}
