/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::node::declaration;

use pool::compiler::ast::Node;
use pool::compiler::ast::Scope;
use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::NodeList;
use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::scope::MethodScope;

use sys::core::String;
use sys::stream::OStream;

class MethodDeclNode extends Node {

    int KIND_NORMAL     := 0;
    int KIND_ABSTRACT   := 1;
    int KIND_NAKED      := 2;
    int KIND_ENTRY      := 3;
    
    MethodScope _scope;
    
    String _name;
    NodeList _parameters; //NodeList<VariableDeclNode>
    NodeList _returnTypes; //NodeList<TypeRefNode>
    BlockInstNode _body;
    
    int _kind;
    int _global;
    /* method ID for global method calls on class descriptors */
    int _index;

    [] __init() {
        _name = this.createOwn(String:CLASSNAME);
        _index = -1;
    }
    
    [MethodDeclNode] setMethodScope(MethodScope scope) { _scope = scope; return this; }
    [MethodScope] getMethodScope() { return _scope; }
    [Scope] getScope() { if (_scope) { return _scope.scope(); } return null; }
    
    [MethodDeclNode] setName(String name) { _name.assignString(name); return this; }
    [String] getName() { return _name; }
    
    [MethodDeclNode] setParameters(NodeList parameters) { _parameters = this.own(parameters); return this; }
    [NodeList] getParameters() { return _parameters; }
    
    [MethodDeclNode] setReturnTypes(NodeList returnTypes) { _returnTypes = this.own(returnTypes); return this; }
    [NodeList] getReturnTypes() { return _returnTypes; }
    
    [MethodDeclNode] setBody(BlockInstNode body) { _body = this.own(body); return this; }
    [BlockInstNode] getBody() { return _body; }
    
    [MethodDeclNode] setAbstract() { _kind = MethodDeclNode:KIND_ABSTRACT; return this; }
    [MethodDeclNode] setNaked() { _kind = MethodDeclNode:KIND_NAKED; return this; }
    [MethodDeclNode] setEntry() { _kind = MethodDeclNode:KIND_ENTRY; return this; }
    
    [int] isNormal() { return _kind == MethodDeclNode:KIND_NORMAL; }
    [int] isAbstract() { return _kind == MethodDeclNode:KIND_ABSTRACT; }
    [int] isNaked() { return _kind == MethodDeclNode:KIND_NAKED; }
    [int] isEntry() { return _kind == MethodDeclNode:KIND_ENTRY; }
    
    [MethodDeclNode] setGlobal() { _global = true; return this; }
    [int] isGlobal() { return _global; }
    
    [MethodDeclNode] setIndex(int i) { _index = i; return this; }
    [int] getIndex() { return _index; }
    
    // NODE
    [int] accept(Visitor visitor) { return visitor.visitMethodDecl(this); }
    [OStream] printDebugName(OStream stream) {
        return stream.printCString("method-<").print(_name).printChar('>');
    }
}
