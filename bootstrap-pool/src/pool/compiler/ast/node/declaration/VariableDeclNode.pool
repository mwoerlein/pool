/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::node::declaration;

use pool::compiler::ast::Node;
use pool::compiler::ast::Scope;
use pool::compiler::ast::Type;
use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::reference::TypeRefNode;
use pool::compiler::ast::scope::VariableScope;

use sys::core::String;
use sys::stream::OStream;

class VariableDeclNode extends Node {

    VariableScope _scope;
    
    String _name;
    TypeRefNode _typeRef;

    [] __init() {
        _name = this.createOwn(String:CLASSNAME);
    }
    
    [VariableDeclNode] setVariableScope(VariableScope scope) { _scope = scope; return this; }
    [VariableScope] getVariableScope() { return _scope; }
    [Scope] getScope() { if (_scope) { return _scope.scope(); } return null; }
    
    Type _resolvedType;
    [VariableDeclNode] setResolvedType(Type type) { _resolvedType = type; return this; }
    [Type] getResolvedType() { return _resolvedType; }
    [int] isResolved() { return !!_resolvedType; }
    
    [VariableDeclNode] setName(String name) { _name.assignString(name); return this; }
    [VariableDeclNode] setCName(cstring name) { _name.assignCString(name); return this; }
    [String] getName() { return _name; }
    
    [VariableDeclNode] setTypeRef(TypeRefNode type) { _typeRef = this.own(type); return this; }
    [TypeRefNode] getTypeRef() { return _typeRef; }
    
    // NODE
    [int] accept(Visitor visitor) { return visitor.visitVariableDecl(this); }
    [OStream] printDebugName(OStream stream) {
        return stream.printCString("variable-<").print(_name).printChar('>');
    }
}
