/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::node::expression;

use pool::compiler::ast::Visitor;
use pool::compiler::ast::scope::VariableScope;
use pool::compiler::ast::node::reference::ClassRefNode;
use sys::core::String;
use sys::stream::OStream;

class VariableExprNode extends ExpressionNode {

    String _name;
    ExpressionNode _context;
    VariableScope _resolvedVariable;

    [] __init() {
        _name = this.createOwn(String:CLASSNAME);
    }
    
    [VariableExprNode] setName(String name) { _name.assignString(name); return this; }
    [String] getName() { return _name; }
    [VariableExprNode] setResolvedVariable(VariableScope scope) { _resolvedVariable = scope; return this; }
    [VariableScope] getResolvedVariable() { return _resolvedVariable; }
    
    [VariableExprNode] setContext(ExpressionNode context) { _context = this.own(context); return this; }
    [ExpressionNode] getContext() { return _context; }
    [int] hasContext() { return !!_context; }
    [int] contextIsGlobal() {
        // TODO: use resolved type of context instead of guessing from node type
        if (this.rt().cast(ClassRefNode:CLASSNAME, _context)) {
            return true;
        }
        return false;
    }
    
    // NODE
    [int] accept(Visitor visitor) { return visitor.visitVariableExpr(this); }
    [OStream] printDebugName(OStream stream) {
        return stream.printCString("variable-<").print(_name).printChar('>');
    }
}
