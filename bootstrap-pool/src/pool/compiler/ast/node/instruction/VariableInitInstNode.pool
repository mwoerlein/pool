/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::node::instruction;

use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::NodeList;
use pool::compiler::ast::node::declaration::VariableDeclNode;
use pool::compiler::ast::node::expression::ExpressionNode;
use sys::stream::OStream;

class VariableInitInstNode extends InstructionNode {

    NodeList _variables; //NodeList<VariableDeclNode>
    ExpressionNode _initializer;
    int _final;
    int _global;

    [VariableInitInstNode] setVariables(NodeList variables) { _variables = this.own(variables); return this; }
    [NodeList] getVariables() { return _variables; }
    
    [VariableInitInstNode] setInitializer(ExpressionNode expr) { _initializer = this.own(expr); return this; }
    [ExpressionNode] getInitializer() { return _initializer; }
    
    [VariableInitInstNode] setFinal() { _final = true; return this; }
    [int] isFinal() { return _final; }
    
    [VariableInitInstNode] setGlobal() { _global = true; return this; }
    [int] isGlobal() { return _global; }
    
    // NODE
    [int] accept(Visitor visitor) { return visitor.visitVariableInitInst(this); }
    [OStream] printDebugName(OStream stream) {
        stream.printCString("variable-init-<");
        {
            sys::core::anycollection::AnyIterator it = _variables.iterator();
            if (it.hasNext()) {
                VariableDeclNode d = it.next();
                stream.print(d.getName());
            } 
            while (it.hasNext()) {
                VariableDeclNode d = it.next();
                stream.printChar(',').print(d.getName());
            }
            it.destroy();
        }
        return stream.printChar('>');
    }
}
