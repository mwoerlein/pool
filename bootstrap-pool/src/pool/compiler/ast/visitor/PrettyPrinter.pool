/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::visitor;

use pool::compiler::ast::Node;
use pool::compiler::ast::Visitor;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;

use sys::stream::OStream;

class PrettyPrinter extends Visitor {

    // declarations
    [int] visitTranslationUnit(TranslationUnitNode node) {
        this.debugNode(node.node());
        
        node.getNamespace().accept(this.visitor());
        node.getUses().acceptAll(this.visitor());
        node.getClasses().acceptAll(this.visitor());
        node.getStructs().acceptAll(this.visitor());
        
        return true;
    }

    [int] visitClassDecl(ClassDeclNode node) {
        this.debugNode(node.node());
        
        node.getExtends().acceptAll(this.visitor());
        node.getConsts().acceptAll(this.visitor());
        node.getVariables().acceptAll(this.visitor());
        node.getMethods().acceptAll(this.visitor());
        
        return true;
    }

    [int] visitStructDecl(StructDeclNode node) {
        this.debugNode(node.node());
        
        node.getConsts().acceptAll(this.visitor());
        node.getVariables().acceptAll(this.visitor());
        
        return true;
    }
    
    [int] visitMethodDecl(MethodDeclNode node) {
        this.debugNode(node.node());
        
        node.getReturnTypes().acceptAll(this.visitor());
        node.getParameters().acceptAll(this.visitor());
        if (!node.isAbstract()) {
            node.getBody().accept(this.visitor());
        }
        
        return true;
    }
    
    [int] visitVariableDecl(VariableDeclNode node) {
        this.debugNode(node.node());
        
        node.getType().accept(this.visitor());
        
        return true;
    }

    [int] visitNamespaceDecl(NamespaceDeclNode node) { return this.debugNode(node.node()); }
    [int] visitUseStatement(UseStatementNode node) { return this.debugNode(node.node()); }
    
    // instructions
    [int] visitBlockInst(BlockInstNode node) { return this.debugNode(node.node()); }
    [int] visitVariableInitInst(VariableInitInstNode node) { return this.debugNode(node.node()); }
    
    // references
    [int] visitAllRef(AllRefNode node) { return this.debugNode(node.node()); }
    [int] visitAnyRef(AnyRefNode node) { return this.debugNode(node.node()); }
    [int] visitClassRef(ClassRefNode node) { return this.debugNode(node.node()); }
    [int] visitCStringRef(CStringRefNode node) { return this.debugNode(node.node()); }
    [int] visitIntRef(IntRefNode node) { return this.debugNode(node.node()); }
    
    [int] debugNode(Node node) {
        node.debugToStream(this.rt().out()).printNewline();
        return true;
    }
}
