/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::visitor;

use pool::compiler::ast::Node;
use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::NodeList;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ArithAssignmentExprNode;
use pool::compiler::ast::node::expression::ArithBinaryExprNode;
use pool::compiler::ast::node::expression::ArithUnaryExprNode;
use pool::compiler::ast::node::expression::AssignmentExprNode;
use pool::compiler::ast::node::expression::ConstCStringExprNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::expression::ExpressionNode;
use pool::compiler::ast::node::expression::LogicalBinaryExprNode;
use pool::compiler::ast::node::expression::LogicalUnaryExprNode;
use pool::compiler::ast::node::expression::MethodCallExprNode;
use pool::compiler::ast::node::expression::NullExprNode;
use pool::compiler::ast::node::expression::SignExprNode;
use pool::compiler::ast::node::expression::ThisExprNode;
use pool::compiler::ast::node::expression::VariableExprNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;
use pool::compiler::ast::node::reference::TypeRefNode;
use pool::storage::Mimetype;
use pool::storage::PoolStorage;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::String;
use sys::runtime::Runtime;
use sys::stream::OStream;

class PrettyPrinter extends Visitor {

    PoolStorage _out;
    OStream _element;
    int _indent;
    
    [PrettyPrinter] setStorage(PoolStorage out) { _out = this.own(out); return this; }
    
    // declarations
    [int] visitTranslationUnit(TranslationUnitNode node) {
        _indent = 0;
        _element = _out.writeElement(node.getName(), Mimetype:POOL_SRC, node.getElement().propertyContainer());
        if (!_element) { return false; }
        
        node.getNamespace().accept(this.visitor());
        this.indent().printNewline();
        node.getUses().acceptAll(this.visitor());
        this.indent().printNewline();
        node.getClasses().acceptAll(this.visitor());
        node.getStructs().acceptAll(this.visitor());
        
        return true;
    }
    
    [int] visitNamespaceDecl(NamespaceDeclNode node) {
        this.indent().printCString("namespace ").print(node.getName().getName()).printChar(';').printNewline();
        return true;
    }
    
    [int] visitUseStatement(UseStatementNode node) {
        OStream line = this.indent().printCString("use ").print(node.getName().getName());
        if (node.hasAlias()) {
            line.printCString(" as ").print(node.getAlias());
        }
        line.printChar(';').printNewline();
        return true;
    }
    
    [int] visitClassDecl(ClassDeclNode node) {
        Runtime rt = this.rt();
        OStream line = this.indent().printCString("class ").print(node.getName());

        if (!node.getExtends().isEmpty()) {
            line.printCString(" extends");
            AnyIterator it = node.getExtends().iterator();
            if (it.hasNext()) {
                line.printChar(' ');
                TypeRefNode c = it.next();
                c.accept(this.visitor());
            }
            while (it.hasNext()) {
                line.printChar(',').printChar(' ');
                TypeRefNode c = it.next();
                c.accept(this.visitor());
            }
            it.destroy();
        }
        
        this.startBlock(line);
        
        if (!node.getConsts().isEmpty()) {
            this.indent().printNewline();
            this.indent().printCString("// constants").printNewline();
            node.getConsts().acceptAll(this.visitor());
        }
        if (!node.getVariables().isEmpty()) {
            this.indent().printNewline();
            this.indent().printCString("// variables").printNewline();
            node.getVariables().acceptAll(this.visitor());
        }
        if (!node.getMethods().isEmpty()) {
            this.indent().printNewline();
            this.indent().printCString("// methods").printNewline();
            node.getMethods().acceptAll(this.visitor());
        }
        
        this.endBlock();
        
        return true;
    }
    
    [int] visitStructDecl(StructDeclNode node) {
        OStream line = this.indent().printCString("struct ").print(node.getName());
        
        this.startBlock(line);
        
        if (!node.getConsts().isEmpty()) {
            this.indent().printNewline();
            this.indent().printCString("// constants").printNewline();
            node.getConsts().acceptAll(this.visitor());
        }
        if (!node.getVariables().isEmpty()) {
            this.indent().printNewline();
            this.indent().printCString("// variables").printNewline();
            node.getVariables().acceptAll(this.visitor());
        }
        
        this.endBlock();
    }
    
    [int] visitMethodDecl(MethodDeclNode node) {
        OStream line = this.indent();
        if (node.isAbstract()) { line.printCString("abstract "); }
        if (node.isEntry()) { line.printCString("__entry__ "); }
        if (node.isNaked()) { line.printCString("__naked__ "); }
        if (node.isGlobal()) { line.printCString("global "); }
        
        line.printChar('[');
        {
            AnyIterator it = node.getReturnTypes().iterator();
            if (it.hasNext()) {
                TypeRefNode c = it.next();
                c.accept(this.visitor());
            }
            while (it.hasNext()) {
                line.printChar(',').printChar(' ');
                TypeRefNode c = it.next();
                c.accept(this.visitor());
            }
            it.destroy();
        }
        line.printChar(']').printChar(' ').print(node.getName()).printChar('(');
        {
            AnyIterator it = node.getParameters().iterator();
            if (it.hasNext()) {
                this.printVariableDecl(it.next());
            }
            while (it.hasNext()) {
                line.printChar(',').printChar(' ');
                this.printVariableDecl(it.next());
            }
            it.destroy();
        }
        line.printChar(')');
        if (node.isAbstract()) {
            line.printChar(';').printNewline();
        } else if (node.getBody().getInstructions().isEmpty()) {
            line.printChar(' ').printChar('{').printChar('}').printNewline();
        } else {
            this.startBlock(line);
            node.getBody().getInstructions().acceptAll(this.visitor());
            this.endBlock();
        }
        
        this.indent().printNewline();
        return true;
    }
    
    [int] visitVariableDecl(VariableDeclNode node) {
        this.indent();
        this.printVariableDecl(node).printChar(';').printNewline();
        return true;
    }
    
    // instructions
    [int] visitBlockInst(BlockInstNode node) {
        if (node.getInstructions().isEmpty()) {
            this.indent().printChar('{').printChar('}').printNewline();
        } else {
            this.startBlock(null);
            node.getInstructions().acceptAll(this.visitor());
            this.endBlock();
        }
        return true;
    }
    
    [int] visitExpressionInst(ExpressionInstNode node) {
        OStream line = this.indent();
        node.getExpression().accept(this.visitor());
        line.printChar(';').printNewline();
        return true;
    }
    
    [int] visitIfInst(IfInstNode node) {
        OStream line = this.indent().printCString("if (");
        node.getCondition().accept(this.visitor());
        line.printChar(')');
        
        if (node.hasTrueBlock()) {
            this.startBlock(line);
            node.getTrueBlock().getInstructions().acceptAll(this.visitor());
            if (node.hasFalseBlock()) {
                _indent -= 4;
                this.indent().printCString("} else {").printNewline();
                _indent += 4;
                node.getFalseBlock().getInstructions().acceptAll(this.visitor());
            }
            this.endBlock();
        } else {
            line.printCString(" {}");
            if (node.hasFalseBlock()) {
                line.printCString(" else");
                this.startBlock(line);
                node.getFalseBlock().getInstructions().acceptAll(this.visitor());
                this.endBlock();
            } else {
                line.printNewline();
            }
        }
        
        return true;
    }
    
    [int] visitInlinePasmInst(InlinePasmInstNode node) {
        this.indent().printCString("__pasm__(<\"").printNewline()
            .print(node.getPasm().getValue()).printNewline();
        this.indent().printCString("\">, {");
        if (node.hasIn()) {
            AnyMapEntryIterator it = node.getIn().entries();
            if (it.hasNext()) {
                [String key, ExpressionNode expr] = it.nextPair();
                key.escapeToStream(this.elem()).printChar(':').printChar(' ');
                expr.accept(this.visitor());
            }
            while (it.hasNext()) {
                this.elem().printChar(',').printChar(' ');
                [String key, ExpressionNode expr] = it.nextPair();
                key.escapeToStream(this.elem()).printChar(':').printChar(' ');
                expr.accept(this.visitor());
            }
            it.destroy();
        }
        this.elem().printCString("}, {");
        if (node.hasOut()) {
            AnyMapEntryIterator it = node.getOut().entries();
            if (it.hasNext()) {
                [String key, ExpressionNode expr] = it.nextPair();
                key.escapeToStream(this.elem()).printChar(':').printChar(' ');
                expr.accept(this.visitor());
            }
            while (it.hasNext()) {
                this.elem().printChar(',').printChar(' ');
                [String key, ExpressionNode expr] = it.nextPair();
                key.escapeToStream(this.elem()).printChar(':').printChar(' ');
                expr.accept(this.visitor());
            }
            it.destroy();
        }
        this.elem().printChar('}').printChar(')').printChar(';').printNewline();
        return true;
    }
    
    [int] visitReturnInst(ReturnInstNode node) {
        if (node.hasValues()) {
            NodeList values = node.getValues();
            int isTuple = values.size() > 1;
            OStream line = this.indent().printCString("return ");
            if (isTuple) { line.printChar('['); }
            {
                AnyIterator it = values.iterator();
                if (it.hasNext()) {
                    ExpressionNode e = it.next();
                    e.accept(this.visitor());
                }
                while (it.hasNext()) {
                    line.printChar(',').printChar(' ');
                    ExpressionNode e = it.next();
                    e.accept(this.visitor());
                }
                it.destroy();
            }
            if (isTuple) { line.printChar(']'); }
            line.printChar(';').printNewline();
        } else {
            this.indent().printCString("return;").printNewline();
        }
        return true;
    }

    [int] visitVariableInitInst(VariableInitInstNode node) {
        OStream line = this.indent();
        NodeList vars = node.getVariables();
        int isTuple = vars.size() > 1;
        
        if (node.isGlobal()) { line.printCString("global "); }
        if (isTuple) { line.printChar('['); }
        {
            AnyIterator it = vars.iterator();
            if (it.hasNext()) {
                this.printVariableDecl(it.next());
            }
            while (it.hasNext()) {
                line.printChar(',').printChar(' ');
                this.printVariableDecl(it.next());
            }
            it.destroy();
        }
        if (isTuple) { line.printChar(']'); }
        if (node.isFinal()) {
            line.printCString(" := ");
        } else {
            line.printCString(" = ");
        }
        node.getInitializer().accept(this.visitor());
        line.printChar(';').printNewline();
        return true;
    }

    [int] visitWhileInst(WhileInstNode node) {
        if (node.isPostTest()) {
            OStream line = this.indent().printCString("do");
            if (node.getBlock().getInstructions().isEmpty()) {
                line.printCString(" {}");
            } else {
                this.startBlock(line);
                node.getBlock().getInstructions().acceptAll(this.visitor());
                _indent -= 4;
                this.indent().printChar('}');
            }
            line = this.elem().printCString(" while (");
            node.getCondition().accept(this.visitor());
            line.printChar(')').printChar(';').printNewline();
        } else {
            OStream line = this.indent().printCString("while (");
            node.getCondition().accept(this.visitor());
            line.printChar(')');
            if (node.getBlock().getInstructions().isEmpty()) {
                line.printCString(" {}").printNewline();
            } else {
                this.startBlock(line);
                node.getBlock().getInstructions().acceptAll(this.visitor());
                this.endBlock();
            }
        }
        return true;
    }
    
    // expressions
    [int] visitArithAssignmentExpr(ArithAssignmentExprNode node) {
        OStream line = this.elem().printChar('(');
        node.getVariable().accept(this.visitor());
        if (node.isAdd())      { line.printChar(' ').printChar('+').printChar('=').printChar(' '); }
        else if (node.isSub()) { line.printChar(' ').printChar('-').printChar('=').printChar(' '); }
        else if (node.isMul()) { line.printChar(' ').printChar('*').printChar('=').printChar(' '); }
        else if (node.isDiv()) { line.printChar(' ').printChar('/').printChar('=').printChar(' '); }
        else if (node.isMod()) { line.printChar(' ').printChar('%').printChar('=').printChar(' '); }
        node.getValue().accept(this.visitor());
        line.printChar(')');
        return true;
    }
    
    [int] visitArithBinaryExpr(ArithBinaryExprNode node) {
        OStream line = this.elem().printChar('(');
        node.getLeft().accept(this.visitor());
        if (node.isAdd())      { line.printChar(' ').printChar('+').printChar(' '); }
        else if (node.isSub()) { line.printChar(' ').printChar('-').printChar(' '); }
        else if (node.isMul()) { line.printChar(' ').printChar('*').printChar(' '); }
        else if (node.isDiv()) { line.printChar(' ').printChar('/').printChar(' '); }
        else if (node.isMod()) { line.printChar(' ').printChar('%').printChar(' '); }
        node.getRight().accept(this.visitor());
        line.printChar(')');
        return true;
    }
    
    [int] visitArithUnaryExpr(ArithUnaryExprNode node) {
        OStream line = this.elem().printChar('(');
        if (node.isPreInc())       { line.printChar('+').printChar('+'); node.getVariable().accept(this.visitor()); }
        else if (node.isPreDec())  { line.printChar('-').printChar('-'); node.getVariable().accept(this.visitor()); }
        else if (node.isPostInc()) { node.getVariable().accept(this.visitor()); line.printChar('+').printChar('+'); }
        else if (node.isPostDec()) { node.getVariable().accept(this.visitor()); line.printChar('-').printChar('-'); }
        line.printChar(')');
        return true;
    }
    
    [int] visitAssignmentExpr(AssignmentExprNode node) {
        OStream line = this.elem().printChar('(');
        node.getVariable().accept(this.visitor());
        line.printChar(' ').printChar('=').printChar(' ');
        node.getValue().accept(this.visitor());
        line.printChar(')');
        return true;
    }
    
    [int] visitConstCStringExpr(ConstCStringExprNode node) {
        node.getValue().escapeToStream(this.elem());
        return true;
    }
    
    [int] visitConstIntExpr(ConstIntExprNode node) {
        this.elem().printInt(node.getValue());
        return true;
    }
    
    [int] visitLogicalBinaryExpr(LogicalBinaryExprNode node) {
        OStream line = this.elem().printChar('(');
        node.getLeft().accept(this.visitor());
        if (node.isAnd())      { line.printChar(' ').printChar('&').printChar('&').printChar(' '); }
        else if (node.isOr())  { line.printChar(' ').printChar('|').printChar('|').printChar(' '); }
        else if (node.isEq())  { line.printChar(' ').printChar('=').printChar('=').printChar(' '); }
        else if (node.isNeq()) { line.printChar(' ').printChar('!').printChar('=').printChar(' '); }
        else if (node.isLt())  { line.printChar(' ').printChar('<').printChar(' '); }
        else if (node.isLe())  { line.printChar(' ').printChar('<').printChar('=').printChar(' '); }
        else if (node.isGt())  { line.printChar(' ').printChar('>').printChar(' '); }
        else if (node.isGe())  { line.printChar(' ').printChar('>').printChar('=').printChar(' '); }
        node.getRight().accept(this.visitor());
        line.printChar(')');
        return true;
    }
    
    [int] visitLogicalUnaryExpr(LogicalUnaryExprNode node) {
        OStream line = this.elem().printChar('(');
        if (node.isNot()) { line.printChar('!'); node.getExpression().accept(this.visitor()); }
        line.printChar(')');
        return true;
    }
    
    [int] visitMethodCallExpr(MethodCallExprNode node) {
        OStream line = this.elem();
        if (node.hasContext()) {
            node.getContext().accept(this.visitor());
            if (node.contextIsGlobal()) {
                line.printChar(':');
            } else {
                line.printChar('.');
            }
        }
        line.print(node.getName()).printChar('(');
        if (node.hasParameters()) {
            AnyIterator it = node.getParameters().iterator();
            if (it.hasNext()) {
                ExpressionNode e = it.next();
                e.accept(this.visitor());
            }
            while (it.hasNext()) {
                line.printChar(',').printChar(' ');
                ExpressionNode e = it.next();
                e.accept(this.visitor());
            }
            it.destroy();
        }
        line.printChar(')');
        return true;
    }
    
    [int] visitNullExpr(NullExprNode node) {
        this.elem().printCString("null");
        return true;
    }
    
    [int] visitSignExpr(SignExprNode node) {
        OStream line = this.elem().printChar('(');
        if (node.isPlus()) { line.printChar('+'); node.getExpression().accept(this.visitor()); }
        else if (node.isMinus()) { line.printChar('-'); node.getExpression().accept(this.visitor()); }
        line.printChar(')');
        return true;
    }
    
    [int] visitThisExpr(ThisExprNode node) {
        this.elem().printCString("this");
        return true;
    }
    
    [int] visitVariableExpr(VariableExprNode node) {
        OStream line = this.elem();
        if (node.hasContext()) {
            node.getContext().accept(this.visitor());
            if (node.contextIsGlobal()) {
                line.printChar(':');
            } else {
                line.printChar('.');
            }
        }
        line.print(node.getName());
        return true;
    }
    
    // references
    [int] visitAllRef(AllRefNode node) { this.elem().printCString("__all__"); return true; }
    [int] visitAnyRef(AnyRefNode node) { this.elem().printCString("__any__"); return true; }
    [int] visitClassRef(ClassRefNode node) { this.elem().print(node.getName()); return true; }
    [int] visitCStringRef(CStringRefNode node) { this.elem().printCString("cstring"); return true; }
    [int] visitIntRef(IntRefNode node) { this.elem().printCString("int"); return true; }
    
    [int] debugNode(Node node) {
        node.debugToStream(this.rt().out()).printNewline();
        return true;
    }
    
    // helper
    [OStream] printVariableDecl(VariableDeclNode node) {
        node.getType().accept(this.visitor());
        return this.elem().printChar(' ').print(node.getName());
    }
    
    [OStream] elem() { return _element; }
    
    [OStream] indent() {
        OStream line = this.elem();
        int i = _indent;
        while (i-- > 0) {
            line.printChar(' ');
        }
        return line;
    }
    
    [] startBlock(OStream line) {
        if (line) {
            line.printChar(' ').printChar('{').printNewline();
        } else {
            this.indent().printChar('{').printNewline();
        }
        _indent += 4;
    }
    
    [] endBlock() {
        _indent -= 4;
        this.indent().printChar('}').printNewline();
    }
    
}
