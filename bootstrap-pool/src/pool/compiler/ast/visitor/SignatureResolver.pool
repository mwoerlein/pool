/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::visitor;

use pool::compiler::ast::Node;
use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::NodeList;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ArithAssignmentExprNode;
use pool::compiler::ast::node::expression::ArithBinaryExprNode;
use pool::compiler::ast::node::expression::ArithUnaryExprNode;
use pool::compiler::ast::node::expression::AssignmentExprNode;
use pool::compiler::ast::node::expression::ConstCStringExprNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::expression::ExpressionNode;
use pool::compiler::ast::node::expression::LogicalBinaryExprNode;
use pool::compiler::ast::node::expression::LogicalUnaryExprNode;
use pool::compiler::ast::node::expression::MethodCallExprNode;
use pool::compiler::ast::node::expression::NullExprNode;
use pool::compiler::ast::node::expression::SignExprNode;
use pool::compiler::ast::node::expression::ThisExprNode;
use pool::compiler::ast::node::expression::VariableExprNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;
use pool::compiler::ast::node::reference::TypeRefNode;

use pool::compiler::ast::NamedType;
use pool::compiler::ast::Scope;
use pool::compiler::ast::Type;
use pool::compiler::ast::TypeManager;
use pool::compiler::ast::scope::BlockScope;
use pool::compiler::ast::scope::ClassScope;
use pool::compiler::ast::scope::InstanceScope;
use pool::compiler::ast::scope::MethodScope;
use pool::compiler::ast::scope::StructScope;
use pool::compiler::ast::scope::UnitScope;
use pool::compiler::ast::scope::VariableScope;

use pool::storage::Mimetype;
use pool::storage::PoolStorage;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::String;
use sys::stream::OStream;

/**
 * Prepare signatures of classes/structs (recursively)
 * - determine and connect class hierarchy
 * - collect inherited and own constants
 * - collect inherited and own variables
 * - collect inherited and own methods
 * - collect parameter/return types of methods
 * - build scope hierarchy
 *
 * error detection:
 * - cyclic class structures
 * (- invalid method overwrites, in future version)
 */
class SignatureResolver extends Visitor {

    Scope _curScope;
    
    // declarations
    [int] visitTranslationUnit(TranslationUnitNode node) {
        this.crit().print(node.getName()).printCString(": SignatureResolver only works for classes/structs, not for translation units!");
        return false;
    }
    
    [int] visitClassDecl(ClassDeclNode node) {
        Scope tmpScope := _curScope;
        ClassScope cs := node.getClassScope();
        if (!cs || cs.getState() < Scope:STATE_TYPE_REFERENCES_RESOLVED) {
            this.error().print(node.getName()).printCString(": references must be resolved before resolving signature!");
            return false;
        }
        if (cs.getState() >= Scope:STATE_SIGNATURE_RESOLVED) {
            return true;
        }
        // validate hierarchy and collect inherited classes/methods/variables/constants
        if (cs.getState() < Scope:STATE_SIGNATURE_COLLECTED && !this._collectSignature(cs)) {
            return false;
        }
        
        // descent into referenced classes/structs and finalize scope hierarchy
        this._traceStart(cs.getFullQualifiedName(), "resolving class signature");
        cs.setState(Scope:STATE_RESOLVING_SCOPES);
        
        _curScope = cs.scope();
        node.getExtends().acceptAll(this.visitor());
        node.getConsts().acceptAll(this.visitor());
        
        _curScope = cs.getInstanceScope().scope();
        node.getVariables().acceptAll(this.visitor());
        node.getMethods().acceptAll(this.visitor());
        
        cs.setState(Scope:STATE_SIGNATURE_RESOLVED);
        this._traceStop(cs.getFullQualifiedName(), "resolved class signature");
        
        // DEBUG
        /*{
            {
                AnyIterator sit = cs.getSupers();
                this.debug().print(cs.getFullQualifiedName()).printCString(": supers");
                while (sit.hasNext()) { this.debug().printCString("   ").print(sit.next()); }
                sit.destroy();
            }
            {
                AnyIterator it = cs.getMethods();
                this.debug().print(cs.getFullQualifiedName()).printCString(": global methods");
                while (it.hasNext()) { this.debug().printCString("   ").print(it.next()); }
                it.destroy();
            }
            {
                AnyIterator it = is.getMethods();
                this.debug().print(cs.getFullQualifiedName()).printCString(": methods");
                while (it.hasNext()) { this.debug().printCString("   ").print(it.next()); }
                it.destroy();
            }
            {
                AnyIterator it = cs.getVariables();
                this.debug().print(cs.getFullQualifiedName()).printCString(": constants");
                while (it.hasNext()) { this.debug().printCString("   ").print(it.next()); }
                it.destroy();
            }
            {
                AnyIterator it = is.getVariables();
                this.debug().print(cs.getFullQualifiedName()).printCString(": variables");
                while (it.hasNext()) { this.debug().printCString("   ").print(it.next()); }
                it.destroy();
            }
        }*/
        
        _curScope = tmpScope;
        return true;
    }
    
    [int] visitStructDecl(StructDeclNode node) {
        Scope tmpScope := _curScope;
        StructScope ss := node.getStructScope();
        if (!ss || ss.getState() < Scope:STATE_TYPE_REFERENCES_RESOLVED) {
            this.error().print(node.getName()).printCString(": references must be resolved before resolving signature!");
            return false;
        }
        if (ss.getState() >= Scope:STATE_RESOLVING_SCOPES) {
            return true;
        }
        
        this._traceStart(ss.getFullQualifiedName(), "resolving struct signature");
        
        ss.setState(Scope:STATE_RESOLVING_SCOPES);
        
        // descent into referenced classes/structs and register own constants/variables
        _curScope = ss.scope();
        node.getConsts().acceptAll(this.visitor());
        {
            int sizeOf = 0;
            AnyIterator it := node.getVariables().iterator();
            while (it.hasNext()) {
                VariableDeclNode vn := it.next();
                vn.accept(this.visitor());
                vn.getVariableScope().setStructOffset(sizeOf);
                sizeOf += vn.getTypeRef().getResolvedType().getSizeOfVariable(); 
            }
            it.destroy();
            ss.setSizeof(sizeOf);
        }
        
        ss.setState(Scope:STATE_SIGNATURE_RESOLVED);
        this._traceStop(ss.getFullQualifiedName(), "resolved struct signature");
        
        // DEBUG
        /*{
            {
                AnyIterator it = ss.getVariables();
                this.debug().print(ss.getFullQualifiedName()).printCString(": variables");
                while (it.hasNext()) { this.debug().printCString("   ").print(it.next()); }
                it.destroy();
            }
            this.debug().print(ss.getFullQualifiedName()).printCString(": sizeof ").printInt(ss.getSizeof());
        }*/
        
        _curScope = tmpScope;
        return true;
    }

    [int] visitMethodDecl(MethodDeclNode node) {
        Scope tmpScope := _curScope;
        _curScope = node.getScope();
        MethodScope ms = node.getMethodScope();
        Visitor me = this.visitor();
        int success = true;
        
        {
            AnyIterator it = node.getReturnTypes().iterator();
            while (it.hasNext()) {
                TypeRefNode ref = it.next();
                success = ref.accept(me) && success;
                ms.addReturnType(this._classToInstance(ref.getResolvedType()));
            }
            it.destroy();
        }
        {
            AnyIterator it = node.getParameters().iterator();
            while (it.hasNext()) {
                VariableDeclNode varDeclNode = it.next();
                if (varDeclNode.accept(me)) {
                    ms.addParameter(
                        varDeclNode.getVariableScope(),
                        this._classToInstance(varDeclNode.getTypeRef().getResolvedType())
                    );
                } else {
                    success = false;
                }
            }
            it.destroy();
        }
        if (!node.isAbstract()) { success = node.getBody().accept(me) && success; }
        
        _curScope = tmpScope;
        return success;
    }
    
    [int] visitVariableDecl(VariableDeclNode node) {
        if (!node.getScope()) {
            _curScope.registerVariable(node);
        }
        if (_curScope.isBlock()) {
            // Dive into variable declarations scopes only within methods/blocks.
            // Do not change scope for const/instance variables. 
            _curScope = node.getScope();
        }
        return node.getTypeRef().accept(this.visitor());
    }
    
    // instructions
    [int] visitBlockInst(BlockInstNode node) {
        Scope tmpScope := _curScope;
        _curScope = _curScope.createBlockScope(node).scope();
        
        int success = true;
        success = node.getInstructions().acceptAll(this.visitor()) && success;
        
        _curScope = tmpScope;
        return success;
    }
    [int] visitExpressionInst(ExpressionInstNode node) {
        node.setScope(_curScope);
        
        return node.getExpression().accept(this.visitor());
    }
    [int] visitIfInst(IfInstNode node) {
        node.setScope(_curScope);
        
        int success = true;
        success = node.getCondition().accept(this.visitor()) && success;
        if (node.hasTrueBlock()) { success = node.getTrueBlock().accept(this.visitor()) && success; }
        if (node.hasFalseBlock()) { success = node.getFalseBlock().accept(this.visitor()) && success; }
        return success;
    }
    [int] visitInlinePasmInst(InlinePasmInstNode node) {
        node.setScope(_curScope);
        
        int success = true;
        if (node.hasIn()) { success = node.getIn().acceptAll(this.visitor()) && success; }
        if (node.hasOut()) { success = node.getOut().acceptAll(this.visitor()) && success; }
        return success;
    }
    [int] visitReturnInst(ReturnInstNode node) {
        node.setScope(_curScope);
        
        return !node.hasValues() || node.getValues().acceptAll(this.visitor());
    }
    [int] visitVariableInitInst(VariableInitInstNode node) {
        node.setScope(_curScope);
        
        int success = true;
        success = node.getInitializer().accept(this.visitor()) && success;
        // variable declarations *after* initializers to make them not accessible *in* initializers
        success = node.getVariables().acceptAll(this.visitor()) && success;
        return success;
    }
    [int] visitWhileInst(WhileInstNode node) {
        node.setScope(_curScope);
        
        int success = true;
        success = node.getCondition().accept(this.visitor()) && success;
        success = node.getBlock().accept(this.visitor()) && success;
        return success;
    }
    
    // expressions
    [int] visitArithAssignmentExpr(ArithAssignmentExprNode node) {
        node.setScope(_curScope);
        
        int success = true;
        success = node.getVariable().accept(this.visitor()) && success;
        success = node.getValue().accept(this.visitor()) && success;
        return success;
    }
    [int] visitArithBinaryExpr(ArithBinaryExprNode node) {
        node.setScope(_curScope);
        
        int success = true;
        success = node.getLeft().accept(this.visitor()) && success;
        success = node.getRight().accept(this.visitor()) && success;
        return success;
    }
    [int] visitArithUnaryExpr(ArithUnaryExprNode node) {
        node.setScope(_curScope);
        
        return node.getVariable().accept(this.visitor());
    }
    [int] visitAssignmentExpr(AssignmentExprNode node) {
        node.setScope(_curScope);
        
        int success = true;
        success = node.getVariable().accept(this.visitor()) && success;
        success = node.getValue().accept(this.visitor()) && success;
        return success;
    }
    [int] visitConstCStringExpr(ConstCStringExprNode node) {
        node.setScope(_curScope);
        return true;
    }
    [int] visitConstIntExpr(ConstIntExprNode node) {
        node.setScope(_curScope);
        return true;
    }
    [int] visitLogicalBinaryExpr(LogicalBinaryExprNode node) {
        node.setScope(_curScope);
        
        int success = true;
        success = node.getLeft().accept(this.visitor()) && success;
        success = node.getRight().accept(this.visitor()) && success;
        return success;
    }
    [int] visitLogicalUnaryExpr(LogicalUnaryExprNode node) {
        node.setScope(_curScope);
        
        return node.getExpression().accept(this.visitor());
    }
    [int] visitMethodCallExpr(MethodCallExprNode node) {
        node.setScope(_curScope);
        
        int success = true;
        if (node.hasContext()) { success = node.getContext().accept(this.visitor()) && success; }
        if (node.hasParameters()) { success = node.getParameters().acceptAll(this.visitor()) && success; }
        return success;
    }
    [int] visitNullExpr(NullExprNode node) {
        node.setScope(_curScope);
        return true;
    }
    [int] visitSignExpr(SignExprNode node) {
        node.setScope(_curScope);
        
        return node.getExpression().accept(this.visitor());
    }
    [int] visitThisExpr(ThisExprNode node) {
        node.setScope(_curScope);
        return true;
    }
    [int] visitVariableExpr(VariableExprNode node) {
        node.setScope(_curScope);
        
        return !node.hasContext() || node.getContext().accept(this.visitor());
    }
    
    // references
    [int] visitAllRef(AllRefNode node) {
        node.setScope(_curScope);
        return true;
    }
    [int] visitAnyRef(AnyRefNode node) {
        node.setScope(_curScope);
        return true;
    }
    [int] visitClassRef(ClassRefNode node) {
        node.setScope(_curScope);
        
        // descent into referenced classes/structs
        ClassScope cs := node.getResolvedType().isClass();
        if (cs && cs.getState() < Scope:STATE_RESOLVING_SCOPES) {
            return cs.getClassDeclNode().accept(this.visitor());
        }
        StructScope ss := node.getResolvedType().isStruct();
        if (ss && ss.getState() < Scope:STATE_RESOLVING_SCOPES) {
            return ss.getStructDeclNode().accept(this.visitor());
        }
        return false;
    }
    [int] visitCStringRef(CStringRefNode node) {
        node.setScope(_curScope);
        return true;
    }
    [int] visitIntRef(IntRefNode node) {
        node.setScope(_curScope);
        return true;
    }
    
    // helper
    [int] _collectSignature(ClassScope cs) {
        if (cs.getState() < Scope:STATE_TYPE_REFERENCES_RESOLVED) {
            this.error().print(cs.getFullQualifiedName()).printCString(": references must be resolved before validating class hierarchy!");
            return false;
        }
        if (cs.getState() >= Scope:STATE_SIGNATURE_COLLECTED) {
            return true;
        }
        
        if (cs.getState() == Scope:STATE_COLLECTING_SIGNATURE) {
            this.error().print(cs.getFullQualifiedName()).printCString(": cyclic class hierarchy detected!");
            cs.setState(Scope:STATE_HIERARCHY_INVALID);
        }
        
        if (cs.getState() == Scope:STATE_HIERARCHY_INVALID) {
            return false;
        }
        
        ClassDeclNode node := cs.getClassDeclNode();
        InstanceScope is := cs.getInstanceScope();
        
        this._traceStart(cs.getFullQualifiedName(), "collecting signature from class hierarchy");
        cs.setState(Scope:STATE_COLLECTING_SIGNATURE);
        {
            AnyIterator it = node.getExtends().iterator();
            while (it.hasNext()) {
                TypeRefNode typeNode = it.next();
                ClassScope extendedClassScope := typeNode.getResolvedType().isClass();
                if (!extendedClassScope) { 
                    this.error().print(cs.getFullQualifiedName()).printCString(": invalid extend type '").print(typeNode).printChar('"');
                    cs.setState(Scope:STATE_HIERARCHY_INVALID);
                } else if (!this._collectSignature(extendedClassScope)) {
                    cs.setState(Scope:STATE_HIERARCHY_INVALID);
                } else {
                    InstanceScope extendedInstanceScope := extendedClassScope.getInstanceScope();
                    is.registerMethodsFromScope(extendedInstanceScope.scope());
                    is.registerVariablesFromScope(extendedInstanceScope.scope());

                    cs.registerSupersFromScope(extendedClassScope);
                    cs.registerMethodsFromScope(extendedClassScope.scope());
                    cs.registerVariablesFromScope(extendedClassScope.scope());
                }
            }
            it.destroy();
        }
        cs.addSuper(cs);
        
        if (cs.getState() == Scope:STATE_HIERARCHY_INVALID) {
            this._traceStop(cs.getFullQualifiedName(), "collected signature from class hierarchy");
            return false;
        }

        // register own constants at last, to overwrite super constants if required
        {
            int index = 0;
            AnyIterator it := node.getConsts().iterator();
            while (it.hasNext()) {
                VariableInitInstNode variableInitDecl := it.next();
                AnyIterator vit := variableInitDecl.getVariables().iterator();
                while (vit.hasNext()) {
                    cs.registerVariable(vit.next());
                }
                vit.destroy();
            }
            it.destroy();
        }
        // register own variables at last, to overwrite super variables if required
        {
            int index = 0;
            AnyIterator it := node.getVariables().iterator();
            while (it.hasNext()) {
                is.registerVariable(it.next());
            }
            it.destroy();
        }

        // register own methods at last, to overwrite super methods if required
        // and generate global method ID
        {
            int index = 0;
            AnyIterator it := node.getMethods().iterator();
            while (it.hasNext()) {
                MethodDeclNode methodDecl := it.next();
                if (methodDecl.isGlobal()) {
                    cs.registerMethod(methodDecl);
                } else {
                    is.registerMethod(methodDecl);
                }
                methodDecl.setIndex(index++);
            }
            it.destroy();
        }
        
        // generate virtual method IDs
        int index = 0;
        {
            AnyIterator it = is.getMethods();
            while (it.hasNext()) {
                MethodScope ms = it.next();
                ms.setIndex(index++);
            }
            it.destroy();
        }
        {
            AnyIterator it = cs.getMethods();
            while (it.hasNext()) {
                MethodScope ms = it.next();
                ms.setIndex(index++);
            }
            it.destroy();
        }
        
        this._traceStop(cs.getFullQualifiedName(), "collected signature from class hierarchy");
        cs.setState(Scope:STATE_SIGNATURE_COLLECTED);
        return true;
    }
    
    [Type] _classToInstance(Type t) {
        ClassScope cs := t.isClass();
        if (cs) {
            return cs.getInstanceScope().type();
        }
        return t;
    }
}
