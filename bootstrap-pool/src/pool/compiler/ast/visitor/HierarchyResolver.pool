/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::visitor;

use pool::compiler::ast::Node;
use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::NodeList;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ArithAssignmentExprNode;
use pool::compiler::ast::node::expression::ArithBinaryExprNode;
use pool::compiler::ast::node::expression::ArithUnaryExprNode;
use pool::compiler::ast::node::expression::AssignmentExprNode;
use pool::compiler::ast::node::expression::ConstCStringExprNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::expression::ExpressionNode;
use pool::compiler::ast::node::expression::LogicalBinaryExprNode;
use pool::compiler::ast::node::expression::LogicalUnaryExprNode;
use pool::compiler::ast::node::expression::MethodCallExprNode;
use pool::compiler::ast::node::expression::NullExprNode;
use pool::compiler::ast::node::expression::SignExprNode;
use pool::compiler::ast::node::expression::ThisExprNode;
use pool::compiler::ast::node::expression::VariableExprNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;
use pool::compiler::ast::node::reference::TypeRefNode;

use pool::compiler::ast::NamedType;
use pool::compiler::ast::Scope;
use pool::compiler::ast::TypeManager;
use pool::compiler::ast::scope::BlockScope;
use pool::compiler::ast::scope::ClassScope;
use pool::compiler::ast::scope::InstanceScope;
use pool::compiler::ast::scope::MethodScope;
use pool::compiler::ast::scope::StructScope;
use pool::compiler::ast::scope::UnitScope;
use pool::compiler::ast::scope::VariableScope;

use pool::storage::Mimetype;
use pool::storage::PoolStorage;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::String;
use sys::stream::OStream;

class HierarchyResolver extends Visitor, sys::log::LoggerAware {

    Scope _curScope;
    
    // declarations
    [int] visitTranslationUnit(TranslationUnitNode node) {
        this.crit().print(node.getName()).printCString(": HierarchyResolver only works for classes, not for translation units!");
        return false;
    }
    
    [int] visitClassDecl(ClassDeclNode node) {
        Scope tmpScope := _curScope;
        ClassScope cs := node.getClassScope();
        if (!cs || cs.getState() < Scope:STATE_TYPE_REFERENCES_RESOLVED) {
            this.error().print(node.getName()).printCString(": references must be resolved before resolving hierarchy!");
            _curScope = tmpScope;
            return false;
        }
        if (cs.getState() >= Scope:STATE_RESOLVING_HIERARCHY) {
            return true;
        }
        _curScope = cs.scope();
        cs.setState(Scope:STATE_RESOLVING_HIERARCHY);
        
        {
            AnyIterator it = node.getExtends().iterator();
            while (it.hasNext()) {
                TypeRefNode typeNode = it.next();
                typeNode.accept(this.visitor());
                ClassScope extendedClassScope := this.rt().cast(ClassScope:CLASSNAME, typeNode.getResolvedType());
                if (extendedClassScope) {
                    if (extendedClassScope.getState() < Scope:STATE_RESOLVING_HIERARCHY) {
                        this.error().print(cs.getFullQualifiedName()).printCString(": cyclic class hierarchy detected! (unfinished ").print(typeNode).printChar(')');
                    } else {
                        AnyIterator sit = extendedClassScope.getSupers();
                        while (sit.hasNext()) { cs.addSuper(sit.next()); }
                        sit.destroy();
                    }
                } else {
                    this.error().print(cs.getFullQualifiedName()).printCString(": invalid super type '").print(typeNode).printChar('"');
                }
            }
            it.destroy();
        }
        cs.addSuper(cs);
        
        node.getConsts().acceptAll(this.visitor());
        node.getVariables().acceptAll(this.visitor());
        node.getMethods().acceptAll(this.visitor());
        
        cs.setState(Scope:STATE_HIERARCHY_RESOLVED);
        /*{
            AnyIterator sit = cs.getSupers();
            this.debug().print(cs.getFullQualifiedName()).printCString(": found supers");
            while (sit.hasNext()) { this.debug().printCString("   ").print(sit.next()); }
            sit.destroy();
        }*/
        _curScope = tmpScope;
        return true;
    }
    
    [int] visitStructDecl(StructDeclNode node) {
        Scope tmpScope := _curScope;
        StructScope ss := node.getStructScope();
        if (!ss || ss.getState() < Scope:STATE_TYPE_REFERENCES_RESOLVED) {
            this.error().print(node.getName()).printCString(": references must be resolved before resolving hierarchy!");
            _curScope = tmpScope;
            return false;
        }
        if (ss.getState() >= Scope:STATE_RESOLVING_HIERARCHY) {
            return true;
        }
        _curScope = ss.scope();
        ss.setState(Scope:STATE_RESOLVING_HIERARCHY);
        //this.debug().print(node.getName()).printCString(": resolving struct hierarchy!");
        
        node.getConsts().acceptAll(this.visitor());
        node.getVariables().acceptAll(this.visitor());
        
        ss.setState(Scope:STATE_HIERARCHY_RESOLVED);
        _curScope = tmpScope;
        return true;
    }
    
    // instructions
    
    // expressions
    
    // references
    [int] visitClassRef(ClassRefNode node) {
        ClassScope cs := this.rt().cast(ClassScope:CLASSNAME, node.getResolvedType());
        if (cs && cs.getState() < Scope:STATE_RESOLVING_HIERARCHY) {
            return cs.getClassDeclNode().accept(this.visitor());
        }
        StructScope ss := this.rt().cast(StructScope:CLASSNAME, node.getResolvedType());
        if (ss && ss.getState() < Scope:STATE_RESOLVING_HIERARCHY) {
            return ss.getStructDeclNode().accept(this.visitor());
        }
        return false;
    }
    
    // helper
}
