/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::visitor;

use pool::compiler::ast::Node;
use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::NodeList;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ArithAssignmentExprNode;
use pool::compiler::ast::node::expression::ArithBinaryExprNode;
use pool::compiler::ast::node::expression::ArithUnaryExprNode;
use pool::compiler::ast::node::expression::AssignmentExprNode;
use pool::compiler::ast::node::expression::ConstCStringExprNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::expression::ExpressionNode;
use pool::compiler::ast::node::expression::LogicalBinaryExprNode;
use pool::compiler::ast::node::expression::LogicalUnaryExprNode;
use pool::compiler::ast::node::expression::MethodCallExprNode;
use pool::compiler::ast::node::expression::NullExprNode;
use pool::compiler::ast::node::expression::SignExprNode;
use pool::compiler::ast::node::expression::ThisExprNode;
use pool::compiler::ast::node::expression::VariableExprNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;
use pool::compiler::ast::node::reference::TypeRefNode;

use pool::compiler::ast::NamedType;
use pool::compiler::ast::Scope;
use pool::compiler::ast::Type;
use pool::compiler::ast::TypeManager;
use pool::compiler::ast::scope::BlockScope;
use pool::compiler::ast::scope::ClassScope;
use pool::compiler::ast::scope::InstanceScope;
use pool::compiler::ast::scope::IntType;
use pool::compiler::ast::scope::MethodScope;
use pool::compiler::ast::scope::StructScope;
use pool::compiler::ast::scope::UnitScope;
use pool::compiler::ast::scope::VariableScope;

use pool::compiler::pir::BasicBlock;
use pool::compiler::pir::Location;
use pool::compiler::pir::Method;
use pool::compiler::pir::Value;
use pool::compiler::pir::statement::CondStatement;

use pool::storage::Mimetype;
use pool::storage::PoolStorage;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::String;
use sys::stream::OStream;

/**
 * Generates intermediate representation of methods
 *
 * error detection:
 * - TODO
 */
class PirGenerator extends Visitor, pool::compiler::pir::Factory {

    TypeManager _typeManager;
    
    Method _curMethod;
    BasicBlock _curBlock;
    Value _lastValue;
    AnyList _lastLocations;
    
    [] __init() {
        _lastLocations = this.createOwn(AnyList:CLASSNAME);
    }
    
    [PirGenerator] setTypeManager(TypeManager manager) { _typeManager = manager; return this; }
    
    [IntType] getIntType() { return _typeManager.getIntType(); }
    [OStream] assert()  {
        if (!_curMethod) { return this.error(); }
        MethodScope ms = _curMethod.getMethodScope();
        return this.error()
            .print(ms.getClassDeclNode().getClassScope().getFullQualifiedName()).printChar(':')
            .print(ms.getMethodDeclNode().getName()).printCString("(): ");
    }
    
    // declarations
    [int] visitTranslationUnit(TranslationUnitNode node) {
        this.crit().print(node.getName()).printCString(": PirGenerator only works for classes, not for translation units!");
        return false;
    }
    
    [int] visitClassDecl(ClassDeclNode node) {
        ClassScope cs := node.getClassScope();
        if (!cs || cs.getState() < Scope:STATE_INSTRUCTIONS_RESOLVED) {
            this.error().print(node.getName()).printCString(": instructions must be resolved before intermediate representation generation!");
            return false;
        }
        if (cs.getState() >= Scope:STATE_PIR_GENERATED) {
            return true;
        }
        
        this._traceStart(cs.getFullQualifiedName(), "generating intermediate representation");
        cs.setState(Scope:STATE_GENERATING_PIR);
        
        node.getMethods().acceptAll(this.visitor());
        
        cs.setState(Scope:STATE_PIR_GENERATED);
        this._traceStop(cs.getFullQualifiedName(), "generated intermediate representation");
        
        return true;
    }

    [int] visitMethodDecl(MethodDeclNode node) {
        if (node.isAbstract()) { return true; }
        
        _curMethod = this.createMethod(node.getMethodScope());
        _curBlock = _curMethod.newBasicBlock();
        
        _curMethod.getEntryBlock().setNext(_curBlock);
        node.getBody().accept(this.visitor());
        if (!_curBlock.getNext()) { _curBlock.setNext(_curMethod.getExitBlock()); }
        
        _curBlock = null;
        _curMethod = null;
        return true;
    }
    
    [int] visitVariableDecl(VariableDeclNode node) {
        VariableScope vs = node.getScope().isVariable();
        if (vs.isLocalVariable()) {
            vs.setPirLocation(_curMethod.newTemp(node.getResolvedType()));
        }
        // method parameters are handled in Method::init
        // instance variables and consts have no location
        return true;
    }
    
    // instructions
    [int] visitExpressionInst(ExpressionInstNode node) {
        int success = node.getExpression().accept(this.visitor());
        _lastLocations.clear();
        _lastValue = null;
        return success;
    }

    [int] visitIfInst(IfInstNode node) {
        BasicBlock next = _curMethod.newBasicBlock();
        BasicBlock trueBlock = _curMethod.newBasicBlock();
        BasicBlock falseBlock = _curMethod.newBasicBlock();
        
        this.branch(node.getCondition(), trueBlock, falseBlock);
        
        if (node.hasTrueBlock()) {
            _curBlock = trueBlock;
            node.getTrueBlock().accept(this.visitor());
            _curBlock.setNext(next);
        }
        if (node.hasFalseBlock()) {
            _curBlock = falseBlock;
            node.getFalseBlock().accept(this.visitor());
            _curBlock.setNext(next);
        }
        
        _curBlock = next;
        return true;
    }
    
    [int] visitReturnInst(ReturnInstNode node) {
        if (!node.hasValues()) { return true; }
        {
            AnyIterator it = node.getValues().iterator();
            int idx = 0;
            while (it.hasNext()) {
                Location tmp = this.exprAsTemp(it.next(), null);
                if (!tmp) { return false; }
                this.addMove(_curBlock, tmp, _curMethod.getRet(idx++), false);
            }
            it.destroy();
        }
        _curBlock.setNext(_curMethod.getExitBlock());
        _curBlock = _curMethod.newBasicBlock();
        return true;
    }
    
    [int] visitVariableInitInst(VariableInitInstNode node) {
        NodeList vars = node.getVariables();
        vars.acceptAll(this.visitor());
        
        if (vars.size() == 1) {
            VariableDeclNode varDecl = vars.first();
            Location tmp = this.exprAsTemp(node.getInitializer(), null);
            if (!tmp) { return false; }
            Location v = varDecl.getVariableScope().getPirLocation();
            if (!v) {
                return this.unresolvedVariableError(node.node(), varDecl);
            }
            this.addMove(_curBlock, tmp, v, false);
        } else {
            node.getInitializer().accept(this.visitor());
            if (!_lastLocations.size() == vars.size()) {
                return this.unexpectedInitializerError(node.node(), node.getInitializer());
            }
            AnyIterator vit = vars.iterator();
            AnyIterator lit = _lastLocations.iterator();
            while (vit.hasNext()) {
                VariableDeclNode varDecl = vit.next();
                Location v = varDecl.getVariableScope().getPirLocation();
                if (!v) {
                    return this.unresolvedVariableError(node.node(), varDecl);
                }
                this.addMove(_curBlock, this.asTemp(lit.next()), v, false);
            }
            lit.destroy();
            vit.destroy();
            _lastLocations.clear();
        }
        return true;
    }
    
    [int] visitWhileInst(WhileInstNode node) {
        BasicBlock next = _curMethod.newBasicBlock();
        BasicBlock body = _curMethod.newBasicBlock();
        BasicBlock test = _curMethod.newBasicBlock();
        if (node.isPostTest()) {
            _curBlock.setNext(body);
        } else {
            _curBlock.setNext(test);
        }
        _curBlock = test;
        this.branch(node.getCondition(), body, next);
        _curBlock = body;
        node.getBlock().accept(this.visitor());
        _curBlock.setNext(test);
        _curBlock = next;
        return true;
    }

    // expressions
    [int] visitConstCStringExpr(ConstCStringExprNode node) {
        _lastValue = _curMethod.getString(node.getValue());
        return true;
    }
    
    [int] visitConstIntExpr(ConstIntExprNode node) {
        _lastValue = _curMethod.getNumber(node.getValue());
        return true;
    }
    
    [int] visitLogicalBinaryExpr(LogicalBinaryExprNode node) {
        this.error().print(node.expression());
        Location tmp = this.exprAsTemp(node.expression(), null);
        if (!tmp) { return false; }
        _lastLocations.add(tmp);
        return true;
    }
    
    [int] visitLogicalUnaryExpr(LogicalUnaryExprNode node) {
        Location tmp = this.exprAsTemp(node.expression(), null);
        if (!tmp) { return false; }
        _lastLocations.add(tmp);
        return true;
    }
    
    [int] visitMethodCallExpr(MethodCallExprNode node) {
        MethodScope ms = node.getResolvedMethod();
        Location context = null;
        if (ms.isInstanceMethod()) {
            node.getContext().accept(this.visitor());
            if (_lastLocations.size() != 1) {
                return this.unexpectedContextError(node.node(), node.getContext());
            }
            context = this.asTemp(_lastLocations.shift());
        }
        AnyList params = this.createOwn(AnyList:CLASSNAME);
        {
            AnyIterator it = node.getParameters().iterator();
            while (it.hasNext()) {
                Location tmp = this.exprAsTemp(it.next(), null);
                if (!tmp) { return false; }
                params.add(tmp);
            }
            it.destroy();
        }
        AnyList rets = this.createOwn(AnyList:CLASSNAME);
        {
            AnyIterator it = ms.getReturnTypes().iterator();
            while (it.hasNext()) {
                Location loc = _curMethod.newTemp(it.next());
                _lastLocations.add(loc);
                rets.add(loc);
            }
            it.destroy();
        }
        if (context) {
            this.addCall(_curBlock, context, ms, params, rets);
        } else {
            this.addGlobalCall(_curBlock, ms, params, rets);
        }
        return true;
    }
    
    [int] visitNullExpr(NullExprNode node) {
        _lastValue = _curMethod.getNull();
        return true;
    }
    
    [int] visitThisExpr(ThisExprNode node) {
        _lastLocations.add(_curMethod.getThis());
        return true;
    }
    
    [int] visitVariableExpr(VariableExprNode node) {
        VariableScope var = node.getResolvedVariable();
        Location loc = var.getPirLocation();
        ExpressionNode init = var.getFinalInitializer();
        if (var.isConst()) {
            // propagate constant value
            return var.getFinalInitializer().accept(this.visitor());
        }
        if (node.hasContext()) {
            node.getContext().accept(this.visitor());
            if (_lastLocations.size() != 1) {
                return this.unexpectedContextError(node.node(), node.getContext());
            }
            Location loc = _lastLocations.shift();
            Location tmp = _curMethod.newTemp(node.getResolvedType());
            this.addGet(_curBlock, this.asTemp(loc), var, tmp);
            _lastLocations.add(tmp);
        } else if (loc) {
            _lastLocations.add(loc);
        } else {
            return this.unresolvedVariableError(node.node(), var.getVariableDeclNode());
        }
        return true;
    }
    
    // references
    
    // helper
    [int] unresolvedVariableError(Node node, VariableDeclNode decl) {
        OStream err = this.assert().printCString("PIR generation: unvisited resolved variable ").print(decl);
        node.debugToStream(err.printCString(" found for "));
        return false;
    }
    
    [int] unexpectedContextError(Node node, ExpressionNode context) {
        OStream err = this.assert().printCString("unexpected context ").print(context);
        node.debugToStream(err.printCString(" for "));
        return false;
    }
    
    [int] unexpectedInitializerError(Node node, ExpressionNode initializer) {
        OStream err = this.assert().printCString("unexpected initializer ").print(initializer);
        node.debugToStream(err.printCString(" in "));
        return false;
    }
    
    [Location] exprAsTemp(ExpressionNode expr, Type interpretAs) {
        if (expr.isLogicalBinary() || expr.isLogicalUnary()) {
            BasicBlock next = _curMethod.newBasicBlock();
            BasicBlock trueBlock = _curMethod.newBasicBlock();
            trueBlock.setNext(next);
            
            Location loc = _curMethod.newTemp(this.getIntType().type());
            this.addMove(_curBlock, _curMethod.getZeroTemp(this.factory()), loc, false);
            this.addMove(trueBlock, _curMethod.getOneTemp(this.factory()), loc, false);
            
            this.branch(expr, trueBlock, next);
            _curBlock = next;
            return loc;
        }
        
        expr.accept(this.visitor());
        
        if (_lastLocations.size() == 1) {
            Location loc = _lastLocations.shift();
            if (interpretAs && !interpretAs.equals(loc.getType())) {
                Location l = _curMethod.newTemp(interpretAs);
                this.addMove(_curBlock, this.asTemp(loc), l, true);
                return l;
            } else {
                return this.asTemp(loc);
            }
        }
        if (_lastValue) {
            Location loc = null;
            if (interpretAs) {
                loc = _curMethod.newTemp(interpretAs);
            } else {
                loc = _curMethod.newTemp(expr.getResolvedType());
            }
            this.addAssign(_curBlock, _lastValue, loc, !!interpretAs);
            _lastValue = null;
            return loc;
        }
        this.crit().printCString("unexpected ").print(expr);
        return null;
    }
    
    [Location] asTemp(Location src) {
        // TODO #11: treat all locations as "temps" until register allocations separates frame and register locations
        return src;
    }
        
    [] branch(ExpressionNode expr, BasicBlock trueBlock, BasicBlock falseBlock) {
        LogicalUnaryExprNode logicalUnary = expr.isLogicalUnary();
        if (logicalUnary) {
            if (logicalUnary.isNot()) {
                this.branch(logicalUnary.getExpression(), falseBlock, trueBlock);
                return;
            }
        }
        LogicalBinaryExprNode logicalBinary = expr.isLogicalBinary();
        if (logicalBinary) {
            if (logicalBinary.isAnd()) {
                BasicBlock nextCond = _curMethod.newBasicBlock();
                this.branch(logicalBinary.getLeft(), nextCond, falseBlock);
                _curBlock = nextCond;
                this.branch(logicalBinary.getRight(), trueBlock, falseBlock);
                return;
            }
            if (logicalBinary.isOr()) {
                BasicBlock nextCond = _curMethod.newBasicBlock();
                this.branch(logicalBinary.getLeft(), trueBlock, nextCond);
                _curBlock = nextCond;
                this.branch(logicalBinary.getRight(), trueBlock, falseBlock);
                return;
            }
            {
                Location left = this.exprAsTemp(logicalBinary.getLeft(), null);
                Location right = this.exprAsTemp(logicalBinary.getRight(), null);
                if (left && right) {
                    CondStatement cond = this.createCond(logicalBinary.getOperation(), left, right);
                    _curBlock.setNext(falseBlock).setCond(cond, trueBlock);
                }
                return;
            }
        }
        
        Location tmp = this.exprAsTemp(expr, this.getIntType().type());
        if (tmp) {
            CondStatement cond = this.createCond(ExpressionNode:OP_NEQ, tmp, _curMethod.getZeroTemp(this.factory()));
            _curBlock.setNext(falseBlock).setCond(cond, trueBlock);
        }
    }
}
