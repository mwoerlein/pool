/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::compiler::ast::visitor;

use pool::compiler::ast::Node;
use pool::compiler::ast::Visitor;
use pool::compiler::ast::node::NodeList;

use pool::compiler::ast::node::declaration::ClassDeclNode;
use pool::compiler::ast::node::declaration::MethodDeclNode;
use pool::compiler::ast::node::declaration::NamespaceDeclNode;
use pool::compiler::ast::node::declaration::StructDeclNode;
use pool::compiler::ast::node::declaration::TranslationUnitNode;
use pool::compiler::ast::node::declaration::UseStatementNode;
use pool::compiler::ast::node::declaration::VariableDeclNode;

use pool::compiler::ast::node::expression::ArithAssignmentExprNode;
use pool::compiler::ast::node::expression::ArithBinaryExprNode;
use pool::compiler::ast::node::expression::ArithUnaryExprNode;
use pool::compiler::ast::node::expression::AssignmentExprNode;
use pool::compiler::ast::node::expression::ConstCStringExprNode;
use pool::compiler::ast::node::expression::ConstIntExprNode;
use pool::compiler::ast::node::expression::ExpressionNode;
use pool::compiler::ast::node::expression::LogicalBinaryExprNode;
use pool::compiler::ast::node::expression::LogicalUnaryExprNode;
use pool::compiler::ast::node::expression::MethodCallExprNode;
use pool::compiler::ast::node::expression::NullExprNode;
use pool::compiler::ast::node::expression::SignExprNode;
use pool::compiler::ast::node::expression::ThisExprNode;
use pool::compiler::ast::node::expression::VariableExprNode;

use pool::compiler::ast::node::instruction::BlockInstNode;
use pool::compiler::ast::node::instruction::ExpressionInstNode;
use pool::compiler::ast::node::instruction::IfInstNode;
use pool::compiler::ast::node::instruction::InlinePasmInstNode;
use pool::compiler::ast::node::instruction::ReturnInstNode;
use pool::compiler::ast::node::instruction::VariableInitInstNode;
use pool::compiler::ast::node::instruction::WhileInstNode;

use pool::compiler::ast::node::reference::AllRefNode;
use pool::compiler::ast::node::reference::AnyRefNode;
use pool::compiler::ast::node::reference::ClassRefNode;
use pool::compiler::ast::node::reference::CStringRefNode;
use pool::compiler::ast::node::reference::IntRefNode;
use pool::compiler::ast::node::reference::TypeRefNode;

use pool::compiler::ast::NamedType;
use pool::compiler::ast::Scope;
use pool::compiler::ast::Type;
use pool::compiler::ast::TypeManager;
use pool::compiler::ast::scope::BlockScope;
use pool::compiler::ast::scope::ClassScope;
use pool::compiler::ast::scope::InstanceScope;
use pool::compiler::ast::scope::IntType;
use pool::compiler::ast::scope::MethodScope;
use pool::compiler::ast::scope::StructScope;
use pool::compiler::ast::scope::UnitScope;
use pool::compiler::ast::scope::VariableScope;

use pool::compiler::pir::BasicBlock;
use pool::compiler::pir::Location;
use pool::compiler::pir::Method;
use pool::compiler::pir::Value;
use pool::compiler::pir::statement::CondStatement;

use pool::storage::Mimetype;
use pool::storage::PoolStorage;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::core::anycollection::AnyMapEntryIterator;
use sys::core::String;
use sys::stream::OStream;

/**
 * Generates intermediate representation of methods
 *
 * error detection:
 * - TODO
 */
class PirGenerator extends Visitor, pool::compiler::pir::Factory {

    TypeManager _typeManager;
    
    Method _curMethod;
    BasicBlock _curBlock;
    Value _lastValue;
    AnyList _lastLocations;
    
    [] __init() {
        _lastLocations = this.createOwn(AnyList:CLASSNAME);
    }
    
    [PirGenerator] setTypeManager(TypeManager manager) { _typeManager = manager; return this; }
    
    [IntType] getIntType() { return _typeManager.getIntType(); }
    [OStream] assert()  {
        if (!_curMethod) { return this.error(); }
        MethodScope ms = _curMethod.getMethodScope();
        return this.error()
            .print(ms.getClassDeclNode().getClassScope().getFullQualifiedName()).printChar(':')
            .print(ms.getMethodDeclNode().getName()).printCString("(): ");
    }
    
    // declarations
    [int] visitTranslationUnit(TranslationUnitNode node) {
        this.crit().print(node.getName()).printCString(": PirGenerator only works for classes, not for translation units!");
        return false;
    }
    
    [int] visitClassDecl(ClassDeclNode node) {
        ClassScope cs := node.getClassScope();
        if (!cs || cs.getState() < Scope:STATE_INSTRUCTIONS_RESOLVED) {
            this.error().print(node.getName()).printCString(": instructions must be resolved before intermediate representation generation!");
            return false;
        }
        if (cs.getState() >= Scope:STATE_PIR_GENERATED) {
            return true;
        }
        
        this._traceStart(cs.getFullQualifiedName(), "generating intermediate representation");
        cs.setState(Scope:STATE_GENERATING_PIR);
        
        node.getMethods().acceptAll(this.visitor());
        
        cs.setState(Scope:STATE_PIR_GENERATED);
        this._traceStop(cs.getFullQualifiedName(), "generated intermediate representation");
        
        return true;
    }

    [int] visitMethodDecl(MethodDeclNode node) {
        if (node.isAbstract()) { return true; }
        
        _curMethod = this.createMethod(node.getMethodScope());
        _curBlock = _curMethod.newBasicBlock();
        
        _curMethod.getEntryBlock().setNext(_curBlock);
        node.getBody().accept(this.visitor());
        if (!_curBlock.getNext()) { _curBlock.setNext(_curMethod.getExitBlock()); }
        
        _curBlock = null;
        _curMethod = null;
        return true;
    }
    
    // instructions
    [int] visitExpressionInst(ExpressionInstNode node) {
        int success = node.getExpression().accept(this.visitor());
        _lastLocations.clear();
        _lastValue = null;
        return success;
    }

    [int] visitReturnInst(ReturnInstNode node) {
        if (!node.hasValues()) { return true; }
        {
            AnyIterator it = node.getValues().iterator();
            int idx = 0;
            while (it.hasNext()) {
                Location tmp = this.exprAsTemp(it.next(), null);
                if (!tmp) { return false; }
                this.addMove(_curBlock, tmp, _curMethod.getRet(idx++), false);
            }
            it.destroy();
        }
        _curBlock.setNext(_curMethod.getExitBlock());
        _curBlock = _curMethod.newBasicBlock();
        return true;
    }
    
    // expressions
    [int] visitConstCStringExpr(ConstCStringExprNode node) {
        _lastValue = _curMethod.getString(node.getValue());
        return true;
    }
    [int] visitConstIntExpr(ConstIntExprNode node) {
        _lastValue = _curMethod.getNumber(node.getValue());
        return true;
    }
    [int] visitNullExpr(NullExprNode node) {
        _lastValue = _curMethod.getNull();
        return true;
    }
    [int] visitThisExpr(ThisExprNode node) {
        _lastLocations.add(_curMethod.getThis());
        return true;
    }
    
    // references
    
    // helper
    [Location] exprAsTemp(ExpressionNode expr, Type interpretAs) {
        /*
        if (expr.isLogicalBinary() || expr.isLogicalUnary()) {
            PIRBasicBlock *next = &curMethod->newBasicBlock();
            PIRBasicBlock *trueBlock = &curMethod->newBasicBlock();
            trueBlock->next = next;
            
            PIRLocation &loc = curMethod->newTemp(types.intType);
            curBlock->addMove(*curMethod->getZeroTemp(types.intType), loc);
            trueBlock->addMove(*curMethod->getOneTemp(types.intType), loc);
            
            branch(expr, *trueBlock, *next);
            curBlock = next;
            return &loc;
        }
        */
        expr.accept(this.visitor());
        
        if (_lastLocations.size() == 1) {
            Location loc = _lastLocations.first();
            _lastLocations.clear();
            if (interpretAs && !interpretAs.equals(loc.getType())) {
                Location l = _curMethod.newTemp(interpretAs);
                this.addMove(_curBlock, this.asTemp(loc), l, true);
                return l;
            } else {
                return this.asTemp(loc);
            }
        }
        if (_lastValue) {
            Location loc = null;
            if (interpretAs) {
                loc = _curMethod.newTemp(interpretAs);
            } else {
                loc = _curMethod.newTemp(expr.getResolvedType());
            }
            this.addAssign(_curBlock, _lastValue, loc, !!interpretAs);
            _lastValue = null;
            return loc;
        }
        this.crit().printCString("unexpected ").print(expr);
        return null;
    }
    
    [Location] asTemp(Location src) {
        // TODO #11: treat all locations as "temps" until register allocations separates frame and register locations
        return src;
    }
        
}
