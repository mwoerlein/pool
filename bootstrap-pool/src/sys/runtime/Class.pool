/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::runtime;

use sys::core::Object;
use sys::core::String;
use sys::memory::Address;

class Class extends Object {
    
    // variables
    ClassDescriptor desc;
    String name;
    
    // methods
    [String] getName() {
        if (!name) {
            name = this.rt().createInstance(String:CLASSNAME);
            name.assignCString(Address:string(desc, desc.classname_offset));
        }
        return name;
    }
    
    [cstring] getCName() {
        return Address:string(desc, desc.classname_offset);
    }
    
    [ClassDescriptor] getDesc() {
        return desc;
    }
    
    // TODO: move to constructor?
    [] setDesc(ClassDescriptor desc) {
        this.desc = desc;
        desc.class_instance = this; 
        if (name) {
            name.destroy();
            name = null;
        }
    }
    
    // TODO: move to destructor with implicit destruction instead of manual one
    [] __destruct() {
        if (name) { name.destroy(); }
    }
    
    global [ClassDescriptor] _getClassDesc() {
        ClassDescriptor desc = null;
        __pasm__("movl 8(%ebp), %eax", {}, {"%eax": desc});
        return desc;
    } 
    
}
