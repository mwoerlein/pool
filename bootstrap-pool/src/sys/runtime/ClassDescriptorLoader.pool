/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::runtime;

use sys::core::Object;
use sys::memory::Address;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;
use sys::memory::MemoryIOStream;
use sys::stream::IStream;

class ClassDescriptorLoader extends Object {
    
    Allocator allocator;
    ClassDescriptorLoader next;
    
    [] __init() { this._initClassDescriptorLoader(); }
    [] _initClassDescriptorLoader() {
        this.allocator = this.rt().getAllocator();
    }
    
    // methods
    abstract [ClassDescriptor] loadClassDesc(cstring name);
    
    [ClassDescriptorLoader] setAllocator(Allocator allocator) { this.allocator = allocator; return this; }
    
    [ClassDescriptor] buildClassDescFromIStream(IStream in, int size) {
        MemoryInfo info = allocator.allocate(size);
        MemoryIOStream s = this.rt().createInstance(MemoryIOStream:CLASSNAME);
        s._initMem(info);
        in.printToStream(s.ostream());
        s.destroy();
        
        ClassDescriptor desc = Address:cast(info.buf);
        desc.mem_info = info;
        desc.class_instance = null;
        desc.resolved = false;
        if (desc.magic != ClassDescriptor:MAGIC) {
            allocator.free(info);
            return null;
        }
        return desc;
    }
    
    [] setNext(ClassDescriptorLoader next) { this.next = next; }
    [ClassDescriptorLoader] getNext() { return next; }
        
    // TODO: remove with implicit cast
    [ClassDescriptorLoader] classDescriptorLoader() { return this; }
}
