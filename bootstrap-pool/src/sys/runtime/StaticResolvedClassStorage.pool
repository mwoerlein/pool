/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::runtime;

use sys::memory::Address;
use sys::memory::Allocator;

class StaticResolvedClassStorage extends ClassStorage {
    
    int classesStart;
    int classesEnd;
    
    // methods
    [] __init() {
        __pasm__("movl __classes_start, %eax", {}, {"%eax": classesStart});
        __pasm__("movl __classes_end, %eax", {}, {"%eax": classesEnd});
    }
    
    [ClassDescriptor] getClassDesc(cstring name) {
        ClassDescriptor classDesc = Address:cast(classesStart);
        while ((Address:from(classDesc) < classesEnd) && (classDesc.magic == ClassDescriptor:MAGIC)) {
            cstring descName = Address:string(classDesc, classDesc.classname_offset);
            if (sys::core::String:compareCStrings(descName, name) == 0) {
                return classDesc;
            }
            classDesc = Address:offset(classDesc, classDesc.class_size);
        }
        return null;
    }
    
    [] transferClasses(DynamicClassStorage store, Allocator allocator) {
        ClassDescriptor classDesc = Address:cast(classesStart);
        while ((Address:from(classDesc) < classesEnd) && (classDesc.magic == ClassDescriptor:MAGIC)) {
            this.transferClass(classDesc, store, allocator);
            classDesc = Address:offset(classDesc, classDesc.class_size);
        }
    }
    
    [] rebuildClasses() {
        Runtime rt = this.rt();
        ClassDescriptor classDesc = Address:cast(classesStart);
        while ((Address:from(classDesc) < classesEnd) && (classDesc.magic == ClassDescriptor:MAGIC)) {
            if (classDesc.class_instance && !rt.equals(classDesc.class_instance.rt())) {
                classDesc.class_instance.destroy();
                rt._createClass(classDesc);
            }
            classDesc = Address:offset(classDesc, classDesc.class_size);
        }
    }
    
    global [ClassDescriptor] _getClassDesc() {
        ClassDescriptor desc = null;
        __pasm__("movl 8(%ebp), %eax", {}, {"%eax": desc});
        return desc;
    } 
}
