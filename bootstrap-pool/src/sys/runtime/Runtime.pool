/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::runtime;

use sys::core::Object;
use sys::core::Thread;
use sys::memory::Address;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;
use sys::stream::OStream;

class Runtime extends Object {

    OStream out;
    OStream err;
    Allocator allocator;
    ClassStorage classStorage;
    
    [OStream] out() { return out; }
    [] setOut(OStream out) { this.out = out; }
    
    [OStream] err() { return err; }
    [] setErr(OStream err) { this.err = err; }
    
    [Allocator] getAllocator() { return allocator; }
    [] setAllocator(Allocator allocator) { this.allocator = allocator; }
    
    [ClassStorage] getClassStorage() { return classStorage; }
    [] setClassStorage(ClassStorage classStorage) { this.classStorage = classStorage; }
    
    [Class] getClass(cstring name) {
        ClassDescriptor classDesc = classStorage.getClassDesc(name);
        if (!classDesc) { return null; } // abort on initialization error
        if (classDesc.class_instance) { return classDesc.class_instance; }
        return this._createClass(classDesc);
    }
    
    // TODO #9: use generic method or special cast syntax instead __all__/__any__
    [__all__] cast(cstring name, __any__ obj) {
        if (!obj) { return null; }
        return Runtime:_castTo(classStorage.getClassDesc(name), obj);
    }
    
    // TODO #9: use generic method or special new syntax instead __all__
    [__all__] createInstance(cstring name) {
        ClassDescriptor classDesc = classStorage.getClassDesc(name);
        if (!classDesc) { return null; } // abort on initialization error
        if (!classDesc.class_instance && !this._createClass(classDesc)) { return null; } // abort on initialization error
        
        // allocate memory for instance
        MemoryInfo instInfo = allocator.allocate(classDesc.inst_tpl_size);
        if (Address:from(instInfo) == MemoryInfo:NONE) { return null; } // abort on initialization error

        [__all__ instance, Object oinstance] = Runtime:_initTemplate(instInfo, classDesc);
        oinstance.setRt(this);
        oinstance.__init();
        return instance;
    }
    
    [__all__] createInstanceAs(cstring name, cstring cast) {
        __all__ tmp = this.createInstance(name);
        __all__ instance = this.cast(cast, tmp);
        if (!instance && tmp) {
            // invalid cast, try to destroy temporary instance 
            Object o = this.cast(Object:CLASSNAME, tmp);
            if (o) { o.destroy(); }
        }
        return instance;
    }
    
    [] createAndRunThread(cstring name) {
        Thread thread = this.createInstanceAs(name, Thread:CLASSNAME);
        if (thread) { 
            thread.run();
            thread.destroy();
        }
    }
    
    [Class] _createClass(ClassDescriptor classDesc) {
        Class cl = this.createInstance(Class:CLASSNAME);
        if (cl) { cl.setDesc(classDesc); }
        return cl;
    }
    
    [Class] _createClassClass() {
        ClassDescriptor classDesc = classStorage.getClassDesc(Class:CLASSNAME);
        if (!classDesc) { return null; } // abort on initialization error
        
        // allocate memory for instance
        MemoryInfo instInfo = allocator.allocate(classDesc.inst_tpl_size);
        if (Address:from(instInfo) == MemoryInfo:NONE) { return null; } // abort on initialization error

        [Class cl, Object oinstance] = Runtime:_initTemplate(instInfo, classDesc);
        if (cl) {
            cl.setRt(this);
            cl.__init();
            cl.setDesc(classDesc);
        }
        return cl;
    }
    
    // TODO #9: use generic method instead of __any__
    [] destroyInstance(__any__ obj) {
        InstanceHandle curHandle = Address:convert(obj);
        allocator.free(curHandle.inst_desc.info);
    }
    
    [] refreshInstance(__any__ obj) {
        InstanceHandle curHandle = Address:convert(obj);
        Object o = Runtime:_initHandles(curHandle.inst_desc);
        o.setRt(this);
    }
    
    // TODO: remove with implicit cast
    [Runtime] runtime() { return this; }
    
    global [ClassDescriptor] _getClassDesc() {
        ClassDescriptor desc = null;
        __pasm__("movl 8(%ebp), %eax", {}, {"%eax": desc});
        return desc;
    } 
    
    // TODO: move to I386Runtime
    global [__all__] _castTo(ClassDescriptor classDesc, __any__ obj) {
        if (classDesc) {
            InstanceHandle curHandle = Address:convert(obj);
            ClassDescriptor objDesc = curHandle.inst_desc.class_desc;
            ClassTableEntry curEntry = Address:offset(objDesc, objDesc.class_tabs_offset);
            while (curEntry.handle_offset) {
                if (Address:equals(classDesc, curEntry.class_desc)) {
                    return Address:offset(curHandle.inst_desc, curEntry.handle_offset);
                }
                curEntry = Address:offset(curEntry, ClassTableEntry:SIZEOF);
            }
        }
        return null;
    }
    
    global [__all__, Object] _initTemplate(MemoryInfo instInfo, ClassDescriptor classDesc) {
        // copy template to object
        Address:copyBytes(
            Address:offsetAddress(classDesc, classDesc.inst_tpl_offset),
            instInfo.buf,
            classDesc.inst_tpl_size
        );
        
        InstanceDescriptor instDesc = Address:cast(instInfo.buf);
        instDesc.class_desc = classDesc;
        instDesc.info = instInfo;
        Object obj = Runtime:_initHandles(instDesc);
        __all__ inst = Address:offset(instDesc, classDesc.class_handle_offset);
        return [inst, obj];
    }
    
    global [Object] _initHandles(InstanceDescriptor instDesc) {
        int call_entry = 0;
        __pasm__("movl 8(%ebp), %eax; addl _cr_mo_call_entry, %eax", {}, {"%eax": call_entry});
        ClassDescriptor classDesc = instDesc.class_desc;
        ClassTableEntry curEntry = Address:offset(classDesc, classDesc.class_tabs_offset);
        while (curEntry.handle_offset) {
            InstanceHandle curHandle = Address:offset(instDesc, curEntry.handle_offset);
            curHandle.call_entry = call_entry;
            curHandle.inst_desc = instDesc;
            curHandle.vtab_offset = curEntry.vtab_offset;
            
            curEntry = Address:offset(curEntry, ClassTableEntry:SIZEOF);
        }
        Object obj = Address:offset(instDesc, classDesc.obj_handle_offset);
        return obj;
    }
    
    __naked__ [] _call_entry() {
        __pasm__(<"
        _cr_mo_call_entry := (_call_entry - _sys_runtime_Runtime)
        _call_entry:
            pushl %ecx
            movl 12(%esp), %ebx // load object handle
            movl 4(%ebx), %ecx	// get object
            movl 0(%ecx), %eax  // get class-desc
            addl 8(%ebx), %eax  // get vtab
            addl 8(%esp), %eax	// get vtab-entry by adding method-offset number
            movl 0(%ecx), %ebx	// get class-desc
            addl 4(%eax), %ebx  // get method-vtabs-entry
            addl 12(%ebx), %ecx  // compute method-@this
            movl %ecx, 12(%esp) // store method-@this
            movl 0(%ebx), %ebx // get method-class-desc
            movl %ebx, 8(%esp)  // store method-class-desc
            movl %ebx, %ecx
            addl 20(%ecx), %ecx   // get methods-tab
            addl 0(%eax), %ecx  // get method-offset-addr
            addl (%ecx), %ebx   // compute method-addr
            popl %ecx
            jmp %ebx            // goto method
        ">);
    }
    
}
