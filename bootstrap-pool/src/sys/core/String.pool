/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::core::utils::Bitset;
use sys::memory::Address;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;
use sys::memory::MemoryIOStream;
use sys::runtime::Runtime;
use sys::stream::IStream;
use sys::stream::OStream;

class String extends OStream {

    int HASH_FACTOR := 33;
    
    int _length;
    int _hash;
    Allocator _allocator;
    MemoryInfo _buffer;
    
    // TODO #7: move to constructor with (implicit) parent calls
    [] __init() { this._initString(16); }
    [] _initString(int size) {
        _allocator = this.rt().getAllocator();
        _buffer = _allocator.allocate(size);
        this.clear();
    }

    // TODO: move to destructor with implicit destruction instead of manual one
    [] __destruct() { this._destructString(); }
    [] _destructString() {
        _allocator.free(_buffer);
    }
    
    // methods
    [String] assignCString(cstring s) { this.clear(); this.printCString(s); return this; }
    [String] assignString(String s) { this.clear(); this.print(s); return this; }

    [int] length() { return _length; }
    
    [] clear() {
        _length = _hash = 0;
        Address:setBytes(_buffer.buf, _buffer.len, 0);
    }

    [OStream] printChar(int c) {
        if (_length+2 >= _buffer.len) {
            this._resizeBufferTo(_length*2);
        }
        
        Address:storeChar(_buffer.buf+_length++, c);
        _hash *= String:HASH_FACTOR;
        _hash += Bitset:and(0xff, c);
        
        return this.ostream();
    }
    
    [int] compareCString(cstring s) {
        return String:compareCStrings(this.toCString(), s);
    }
    
    [int] compareString(String s) {
        return String:compareCStrings(this.toCString(), s.toCString());
    }
    
    [int] hash() { return _hash; }
    [int] equals(__any__ obj) {
        String s = this.rt().cast(String:CLASSNAME, obj);
        if (s) {
            return this.compareString(s) == 0;
        }
        return false;
    }
    [int] cequals(cstring s) {
        return this.compareCString(s) == 0;
    }
    
    [OStream] printToStream(OStream stream) {
        int pos = _buffer.buf;
        int end = _buffer.buf + _length;
        while (pos < end) {
            stream.printChar(Address:loadChar(pos++));
        }
        return stream;
    }
    
    [OStream] printToLowerStream(OStream stream) {
        int pos = _buffer.buf;
        int end = _buffer.buf + _length;
        while (pos < end) {
            stream.printChar(Character:toLowerChar(Address:loadChar(pos++)));
        }
        return stream;
    }
    
    [OStream] printToUpperStream(OStream stream) {
        int pos = _buffer.buf;
        int end = _buffer.buf + _length;
        while (pos < end) {
            stream.printChar(Character:toUpperChar(Address:loadChar(pos++)));
        }
        return stream;
    }
    
    [OStream] escapeToStream(OStream stream) {
        return this._escapeToStream(stream, '"', '\\');
    }
    
    [OStream] _escapeToStream(OStream stream, int enclosure, int escape) {
        stream.printChar(enclosure);
        int pos = _buffer.buf;
        int end = _buffer.buf + _length;
        while (pos < end) {
            int cur = Address:loadChar(pos++);
            if (cur == enclosure) {
                stream.printChar(escape).printChar(cur);
            } else if (cur == escape) {
                stream.printChar(escape).printChar(cur);
            } else if (cur == '\n') {
                stream.printChar(escape).printChar('n');
            } else if (cur == '\r') {
                stream.printChar(escape).printChar('r');
            } else if (cur == '\t') {
                stream.printChar(escape).printChar('t');
            } else {
                stream.printChar(cur);
            }
        }
        return stream.printChar(enclosure);
    }
    
    [OStream] unescapeToStream(OStream stream) {
        return this._unescapeToStream(stream, '"', '\\');
    }
    
    [OStream] _unescapeToStream(OStream stream, int enclosure, int escape) {
        if (_length < 2 || this.at(0) != enclosure || this.at(_length-1) != enclosure) {
            // no enclosure found => keep string as is
            return this.printToStream(stream);
        }
        int pos = _buffer.buf + 1;
        int end = _buffer.buf + _length - 1;
        while (pos < end) {
            int cur = Address:loadChar(pos++);
            if (cur == escape) {
                cur = Address:loadChar(pos++);
                if (pos < end) {
                    if (cur == 'n') {
                        stream.printChar('\n');
                    } else if (cur == 'r') {
                        stream.printChar('\r');
                    } else if (cur == 't') {
                        stream.printChar('\t');
                    } else {
                        stream.printChar(cur);
                    }                
                } else {
                    // final enclosure was escaped => keep enclosure, even if string wasn't correct
                    return stream.printChar(enclosure);
                }
            } else {
                stream.printChar(cur);
            }
        }
        return stream; 
    }
    
    [int] toInt() {
        IStream is = this.toIStream();
        int i = is.readInt();
        is.destroy();
        return i;
    }
    
    [cstring] toCString() {
        return Address:string(null, _buffer.buf);
    }
    
    [IStream] toIStream() {
        MemoryIOStream s = this.rt().createInstance(MemoryIOStream:CLASSNAME);
        s._initBuf(_buffer.buf, _length);
        return s.istream();
    }
    
    [String] toLower() {
        String s = this.rt().createInstance(String:CLASSNAME);
        this.printToLowerStream(s.ostream());
        return s;
    }
    
    [String] toUpper() {
        String s = this.rt().createInstance(String:CLASSNAME);
        this.printToUpperStream(s.ostream());
        return s;
    }
    
    [String] subString(int start, int length) {
        int first = start;
        if (start < 0) { first = _length + start; }
        if (first < 0) { first = 0; }
        int last = first + length;
        if (length <= 0) { last = _length + length; }
        if (last > _length) { last = _length; }
        
        String s = this.rt().createInstance(String:CLASSNAME);
        if (first >= _length || first >= last) { return s; }
        
        int pos = _buffer.buf + first;
        int end = _buffer.buf + last;
        while (pos < end) {
            s.printChar(Address:loadChar(pos++));
        }
        return s;
    }
    
    [int] at(int pos) {
        int i = pos;
        if (pos < 0) { i = _length + pos; }
        if (i < 0 || i >= _length) { return 0; }
        return Address:loadChar(_buffer.buf+i);
    }
    
    [] _resizeBufferTo(int length) {
        MemoryInfo b = _allocator.allocate(length);
        Address:copyBytes(_buffer.buf, b.buf, _buffer.len);
        Address:setBytes(b.buf+_buffer.len, b.len-_buffer.len, 0);
        _allocator.free(_buffer);
        _buffer = b;
    }
    
    global [int] compareCStrings(cstring a, cstring b) {
        int ret = 0;
        __pasm__(<"
            movl 0, %eax
        _scs_strcmp_loop:
            movb (%ebx), %al
            cmpb 0, %al;        je _scs_strcmp_ret_neg_a
            cmpb 0, (%ecx);     je _scs_strcmp_ret
            subb (%ecx), %al;   jnz _scs_strcmp_ret
            addl 1, %ecx
            addl 1, %ebx
            jmp _scs_strcmp_loop
        _scs_strcmp_ret_neg_a:
            subb (%ecx), %al
        _scs_strcmp_ret:
            .byte 0x66; .byte 0x98; #// cbw
            .byte 0x98              #// cwde
        ">, {"%ebx": a, "%ecx": b}, {"%eax": ret});
        return ret;
    }
    
    global [int] hashCString(cstring a) {
        int ret = 0;
        __pasm__(<"
            movl 0, %eax
            movl 0, %edx
        _scs_strhash_loop:
            movb (%ecx), %dl
            cmpb 0, %dl;     je _scs_strhash_ret
            .byte 0x0f; .byte 0xaf; .byte 0xc3 #//imul %ebx, %eax
            addl %edx, %eax;
            addl 1, %ecx
            jmp _scs_strhash_loop
        _scs_strhash_ret:
        ">, {"%ebx": String:HASH_FACTOR, "%ecx": a}, {"%eax": ret});
        return ret;
    }

}
