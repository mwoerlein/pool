/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::memory::Address;
use sys::runtime::Runtime;
use sys::stream::IStream;
use sys::stream::OStream;

class String extends OStream {

    StringElement _first;
    StringElement _last;
    
    int _length;
    int _hash;
    
    // TODO #7: move to constructor with (implicit) parent calls
    [] __init() {
        _first = _last = null;
        _length = _hash = 0;
    }

    // TODO: move to destructor with implicit destruction instead of manual one
    [] __destruct() {
        this.clear();
    }
    
    // methods
    [] assignCString(cstring s) { this.clear(); this.printCString(s); }
    [] assignString(String s) { this.clear(); this.print(s); }

    [int] length() { return _length; }
    
    [] clear() {
        StringElement cur = _first;
        while (cur) {
            StringElement kill = cur;
            cur = cur.getNext();
            kill.destroy();
        }
        _first = _last = null;
        _length = _hash = 0;
    }

    [OStream] printChar(int c) {
        StringElement newElem = this.rt().createInstance(StringElement:CLASSNAME);
        newElem.assignChar(c);
        if (_last) {
            _last.setNext(newElem);
            _last = newElem;
        } else {
            _first = _last = newElem;
        }
        _length++;
        _hash *= 33;
        _hash += c;
        
        return this.ostream();
    }
    
    [int] compareCString(cstring s) {
        StringElement e1 = _first;
        int p2 = Address:fromString(s);
        int c2 = Address:loadChar(p2++);
        while (e1 && c2) {
            int diff = e1.getChar() - c2;
            if (diff) {
                return diff;
            }
            e1 = e1.getNext();
            c2 = Address:loadChar(p2++);
        }
        if (e1) {
            return e1.getChar();
        }
        if (c2) {
            return -c2;
        }
        return 0;
    }
    
    [int] compareString(String s) {
        StringElement e1 = _first;
        StringElement e2 = s._first;
        while (e1 && e2) {
            int diff = e1.getChar() - e2.getChar();
            if (diff) {
                return diff;
            }
            e1 = e1.getNext();
            e2 = e2.getNext();
        }
        if (e1) {
            return e1.getChar();
        }
        if (e2) {
            return -e2.getChar();
        }
        return 0;
    }
    
    [int] hash() { return _hash; }
    [int] equals(__any__ obj) {
        String s = this.rt().cast(String:CLASSNAME, obj);
        if (s) {
            return this.compareString(s) == 0;
        }
        return 0;
    }
    
    [OStream] printToStream(OStream stream) {
        StringElement cur = _first;
        while (cur) {
            stream.print(cur);
            cur = cur.getNext();
        }
        return stream;
    }
    
    [int] toInt() {
        IStream is = this.toIStream();
        int i = is.readInt();
        is.destroy();
        return i;
    }
    
    [cstring] toCString(int buffer) {
        int p = buffer;
        StringElement cur = _first;
        while (cur) {
            Address:storeChar(p++, cur.getChar());
            cur = cur.getNext();
        }
        Address:storeChar(p++, 0);
        return Address:string(null, buffer);
    }
    
    [IStream] toIStream() {
        Runtime rt = this.rt();
        StringIStream s = rt.createInstance(StringIStream:CLASSNAME);
        s.setNext(_first);
        return rt.cast(IStream:CLASSNAME, s);
    }
    
    global [int] compareCStrings(cstring a, cstring b) {
        int ret = 0;
        __pasm__(<"
            movl 0, %ecx
        _lr2_strcmp_loop:
            movb (%ebx), %cl
            cmpb 0, %cl;        je _lr2_strcmp_ret_neg_a
            cmpb 0, (%eax);     je _lr2_strcmp_ret
            subb (%eax), %cl;   jnz _lr2_strcmp_ret
            addl 1, %eax
            addl 1, %ebx
            jmp _lr2_strcmp_loop
        _lr2_strcmp_ret_neg_a:
            subb (%eax), %cl
        _lr2_strcmp_ret:
        ">, {"%eax": a, "%ebx": b}, {"%ecx": ret});
        return ret;
    }
}
