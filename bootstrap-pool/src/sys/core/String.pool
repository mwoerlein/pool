/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::memory::Address;
use sys::memory::MemoryInfo;
use sys::runtime::Runtime;
use sys::stream::IStream;
use sys::stream::OStream;

class String extends OStream {

    int HASH_FACTOR := 33;
    
    StringElement _first;
    StringElement _last;
    
    int _length;
    int _hash;
    MemoryInfo _buffer;
    
    // TODO #7: move to constructor with (implicit) parent calls
    [] __init() {
        _first = _last = null;
        _length = _hash = 0;
    }

    // TODO: move to destructor with implicit destruction instead of manual one
    [] __destruct() {
        this.clear();
    }
    
    // methods
    [] assignCString(cstring s) { this.clear(); this.printCString(s); }
    [] assignString(String s) { this.clear(); this.print(s); }

    [int] length() { return _length; }
    
    [] clear() {
        StringElement cur = _first;
        while (cur) {
            StringElement kill = cur;
            cur = cur.getNext();
            kill.destroy();
        }
        _first = _last = null;
        _length = _hash = 0;
        if (_buffer) { this.rt().getAllocator().free(_buffer); _buffer = null; }
    }

    [OStream] printChar(int c) {
        StringElement newElem = this.rt().createInstance(StringElement:CLASSNAME);
        newElem.assignChar(c);
        if (_last) {
            _last.setNext(newElem);
            _last = newElem;
        } else {
            _first = _last = newElem;
        }
        _length++;
        _hash *= String:HASH_FACTOR;
        _hash += newElem.hash();
        if (_buffer) { this.rt().getAllocator().free(_buffer); _buffer = null; }
        
        return this.ostream();
    }
    
    [int] compareCString(cstring s) {
        StringElement e1 = _first;
        int p2 = Address:fromString(s);
        int c2 = Address:loadChar(p2++);
        while (e1 && c2) {
            int diff = e1.getChar() - c2;
            if (diff) {
                return diff;
            }
            e1 = e1.getNext();
            c2 = Address:loadChar(p2++);
        }
        if (e1) {
            return e1.getChar();
        }
        if (c2) {
            return -c2;
        }
        return 0;
    }
    
    [int] compareString(String s) {
        StringElement e1 = _first;
        StringElement e2 = s._first;
        while (e1 && e2) {
            int diff = e1.getChar() - e2.getChar();
            if (diff) {
                return diff;
            }
            e1 = e1.getNext();
            e2 = e2.getNext();
        }
        if (e1) {
            return e1.getChar();
        }
        if (e2) {
            return -e2.getChar();
        }
        return 0;
    }
    
    [int] hash() { return _hash; }
    [int] equals(__any__ obj) {
        String s = this.rt().cast(String:CLASSNAME, obj);
        if (s) {
            return this.compareString(s) == 0;
        }
        return false;
    }
    [int] cequals(cstring s) {
        return this.compareCString(s) == 0;
    }
    
    [OStream] printToStream(OStream stream) {
        StringElement cur = _first;
        while (cur) {
            stream.print(cur);
            cur = cur.getNext();
        }
        return stream;
    }
    
    [OStream] printToLowerStream(OStream stream) {
        StringElement cur = _first;
        while (cur) {
            stream.printChar(cur.getLowerChar());
            cur = cur.getNext();
        }
        return stream;
    }
    
    [OStream] printToUpperStream(OStream stream) {
        StringElement cur = _first;
        while (cur) {
            stream.printChar(cur.getUpperChar());
            cur = cur.getNext();
        }
        return stream;
    }
    
    [OStream] escapeToStream(OStream stream) {
        return this._escapeToStream(stream, '"', '\\');
    }
    
    [OStream] _escapeToStream(OStream stream, int enclosure, int escape) {
        stream.printChar(enclosure);
        StringElement cur = _first;
        while (cur) {
            if (cur.compareChar(enclosure) == 0) {
                stream.printChar(escape).print(cur);
            } else if (cur.compareChar(escape) == 0) {
                stream.printChar(escape).print(cur);
            } else if (cur.compareChar('\n') == 0) {
                stream.printChar(escape).printChar('n');
            } else if (cur.compareChar('\r') == 0) {
                stream.printChar(escape).printChar('r');
            } else if (cur.compareChar('\t') == 0) {
                stream.printChar(escape).printChar('t');
            } else {
                stream.print(cur);
            }
            cur = cur.getNext();
        }
        return stream.printChar(enclosure);
    }
    
    [OStream] unescapeToStream(OStream stream) {
        return this._unescapeToStream(stream, '"', '\\');
    }
    
    [OStream] _unescapeToStream(OStream stream, int enclosure, int escape) {
        if (_length < 2 || _first.compareChar(enclosure) != 0 || _last.compareChar(enclosure) != 0) {
            // no enclosure found => keep string as is
            return this.printToStream(stream);
        }
        StringElement cur = _first.getNext();
        int i = 2;
        while (i < _length) {
            if (cur.compareChar(escape) == 0) {
                cur = cur.getNext(); i++;
                if (i < _length) {
                    if (cur.compareChar('n') == 0) {
                        stream.printChar('\n');
                    } else if (cur.compareChar('r') == 0) {
                        stream.printChar('\r');
                    } else if (cur.compareChar('t') == 0) {
                        stream.printChar('\t');
                    } else {
                        stream.print(cur);
                    }                
                } else {
                    // final enclosure was escaped => keep enclosure, even if string wasn't correct
                    return stream.printChar(enclosure);
                }
            } else {
                stream.print(cur);
            }
            cur = cur.getNext(); i++;
        }
        return stream; 
    }
    
    [int] toInt() {
        IStream is = this.toIStream();
        int i = is.readInt();
        is.destroy();
        return i;
    }
    
    [cstring] toCString() {
        if (!_buffer) {
            _buffer = this.rt().getAllocator().allocate(this.length() + 1);
            int p = _buffer.buf;
            StringElement cur = _first;
            while (cur) {
                Address:storeChar(p++, cur.getChar());
                cur = cur.getNext();
            }
            Address:storeChar(p++, 0);
        }
        return Address:string(null, _buffer.buf);
    }
    
    [IStream] toIStream() {
        Runtime rt = this.rt();
        StringIStream s = rt.createInstance(StringIStream:CLASSNAME);
        s.setNext(_first);
        return rt.cast(IStream:CLASSNAME, s);
    }
    
    [String] toLower() {
        String s = this.rt().createInstance(String:CLASSNAME);
        this.printToLowerStream(s.ostream());
        return s;
    }
    
    [String] toUpper() {
        String s = this.rt().createInstance(String:CLASSNAME);
        this.printToUpperStream(s.ostream());
        return s;
    }
    
    [String] subString(int start, int length) {
        int first = start;
        if (start < 0) { first = _length + start; }
        if (first < 0) { first = 0; }
        int last = first + length;
        if (length <= 0) { last = _length + length; }
        if (last > _length) { last = _length; }
        
        String s = this.rt().createInstance(String:CLASSNAME);
        if (first >= _length || first >= last) { return s; }
        int i = 0;
        StringElement cur = _first;
        while (i < first) { cur = cur.getNext(); i++; }
        while (i < last) {
            s.printChar(cur.getChar());
            cur = cur.getNext();
            i++;
        }
        return s;
    }
    
    [int] at(int pos) {
        int i = pos;
        if (pos < 0) { i = _length + pos; }
        if (i < 0 || i >= _length) { return 0; }
        StringElement cur = _first;
        while (i--) { cur = cur.getNext(); }
        return cur.getChar();
    }
    
    global [int] compareCStrings(cstring a, cstring b) {
        int ret = 0;
        __pasm__(<"
            movl 0, %ecx
        _scs_strcmp_loop:
            movb (%ebx), %cl
            cmpb 0, %cl;        je _scs_strcmp_ret_neg_a
            cmpb 0, (%eax);     je _scs_strcmp_ret
            subb (%eax), %cl;   jnz _scs_strcmp_ret
            addl 1, %eax
            addl 1, %ebx
            jmp _scs_strcmp_loop
        _scs_strcmp_ret_neg_a:
            subb (%eax), %cl
        _scs_strcmp_ret:
        ">, {"%eax": a, "%ebx": b}, {"%ecx": ret});
        return ret;
    }
    
    global [int] hashCString(cstring a) {
        int ret = 0;
        __pasm__(<"
            movl 0, %eax
            movl 0, %edx
        _scs_strhash_loop:
            movb (%ecx), %dl
            cmpb 0, %dl;     je _scs_strhash_ret
            .byte 0x0f; .byte 0xaf; .byte 0xc3 #//imul %ebx, %eax
            addl %edx, %eax;
            addl 1, %ecx
            jmp _scs_strhash_loop
        _scs_strhash_ret:
        ">, {"%ebx": String:HASH_FACTOR, "%ecx": a}, {"%eax": ret});
        return ret;
    }

}
