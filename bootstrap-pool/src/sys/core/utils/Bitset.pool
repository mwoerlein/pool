/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core::utils;


class Bitset {

    int NONE     := 0;
    int ALL      := 0xFFFFFFFF;
    
    global [int] or(int a, int b) {
        int ret = 0;
        __pasm__("orl %ebx, %eax", {"%eax": a, "%ebx": b}, {"%eax": ret});
        return ret;
    }
    
    global [int] xor(int a, int b) {
        int ret = 0;
        __pasm__("xorl %ebx, %eax", {"%eax": a, "%ebx": b}, {"%eax": ret});
        return ret;
    }
    
    global [int] and(int a, int b) {
        int ret = 0;
        __pasm__("andl %ebx, %eax", {"%eax": a, "%ebx": b}, {"%eax": ret});
        return ret;
    }
    
    global [int] not(int a) {
        int ret = 0;
        __pasm__("notl %eax", {"%eax": a}, {"%eax": ret});
        return ret;
    }
    
    global [int] has(int a, int flags) {
        return this.and(a, flags) == flags;
    }
    
    global [int] set(int a, int bit) {
        int mask = a;
        __pasm__(<"
            movl 1, %ebx
            .byte 0xD3; .byte 0xE3  #// shll %ebx, %cl
            orl %ebx, %eax
        ">, {"%eax": mask, "%ecx": bit}, {"%eax": mask});
        return mask;
    }
    
    global [int] unset(int a, int bit) {
        int mask = a;
        __pasm__(<"
            movl 1, %ebx
            .byte 0xD3; .byte 0xE3  #// shll %ebx, %cl
            notl %ebx
            and %ebx, %eax
        ">, {"%eax": mask, "%ecx": bit}, {"%eax": mask});
        return mask;
    }
    
    global [int] isset(int a, int bit) {
        return this.has(a, this.lshift(1, bit));
    }
    
    global [int] rshift(int a, int bits) {
        int ret = 0;
        __pasm__(".byte 0xD3; .byte 0xE8  #// shrl %eax, %cl", {"%eax": a, "%ecx": bits}, {"%eax": ret});
        return ret;
    }
    
    global [int] lshift(int a, int bits) {
        int ret = 0;
        __pasm__(".byte 0xD3; .byte 0xE0  #// shll %eax, %cl", {"%eax": a, "%ecx": bits}, {"%eax": ret});
        return ret;
    }
    
    global [int] rrotate(int a, int bits) {
        int ret = 0;
        __pasm__(".byte 0xD3; .byte 0xC8  #// rorl %eax, %cl", {"%eax": a, "%ecx": bits}, {"%eax": ret});
        return ret;
    }
    
    global [int] lrotate(int a, int bits) {
        int ret = 0;
        __pasm__(".byte 0xD3; .byte 0xC0  #// roll %eax, %cl", {"%eax": a, "%ecx": bits}, {"%eax": ret});
        return ret;
    }
    
    global [int] isPowerOfTwo(int n) {
        return n && !(Bitset:and(n, n-1));
    }
    
    global [int] numberOfSetBits(int n) {
        int ret = 0;
        __pasm__(<"
            // n -= (n >> 1) & 0x55555555;
            movl %eax, %ebx
            .byte 0xD1; .byte 0xEB  #// shrl %ebx, 1
            andl 0x55555555, %ebx
            subl %ebx, %eax
            // n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
            movl %eax, %ebx
            .byte 0xC1; .byte 0xEB; .byte 2  #// shrl %ebx, 2
            andl 0x33333333, %eax
            andl 0x33333333, %ebx
            addl %ebx, %eax
            // n = (n + (n >> 4)) & 0x0F0F0F0F 
            movl %eax, %ebx
            .byte 0xC1; .byte 0xEB; .byte 4  #// shrl %ebx, 4
            addl %ebx, %eax
            andl 0x0F0F0F0F, %eax
            // n += n >> 8
            movl %eax, %ebx
            .byte 0xC1; .byte 0xEB; .byte 8  #// shrl %ebx, 8
            addl %ebx, %eax
            // n += n >> 16
            movl %eax, %ebx
            .byte 0xC1; .byte 0xEB; .byte 16  #// shrl %ebx, 16
            addl %ebx, %eax
            // n = n & 0x7f;
            andl 0x7f, %eax
        ">, {"%eax": n}, {"%eax": ret, "%ebx": null});
        return ret;
    }
    
    global [int] countTrailingZeros(int n) {
        if (n == 0) { return 32; }
        int c = 0;
        if (!Bitset:and(n, 0x0000FFFF)) { c += 16; n = Bitset:rshift(n, 16); }    
        if (!Bitset:and(n, 0x000000FF)) { c += 8; n = Bitset:rshift(n, 8); }    
        if (!Bitset:and(n, 0x0000000F)) { c += 4; n = Bitset:rshift(n, 4); }    
        if (!Bitset:and(n, 0x00000003)) { c += 2; n = Bitset:rshift(n, 2); }    
        if (!Bitset:and(n, 0x00000001)) { c += 1; }
        return c;    
    }
    
    global [int] countLeadingZeros(int n) {
        if (n == 0) { return 32; }
        int c = 0;
        if (!Bitset:and(n, 0xFFFF0000)) { c += 16; n = Bitset:lshift(n, 16); }    
        if (!Bitset:and(n, 0xFF000000)) { c += 8; n = Bitset:lshift(n, 8); }    
        if (!Bitset:and(n, 0xF0000000)) { c += 4; n = Bitset:lshift(n, 4); }    
        if (!Bitset:and(n, 0xC0000000)) { c += 2; n = Bitset:lshift(n, 2); }    
        if (!Bitset:and(n, 0x80000000)) { c += 1; }
        return c;    
    }
}
