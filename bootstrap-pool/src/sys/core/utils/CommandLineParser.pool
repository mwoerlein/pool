/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core::utils;

use sys::core::Object;
use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::runtime::Runtime;
use sys::stream::IStream;
use sys::stream::OStream;

class CommandLineParser extends Object {

    int MODE_START      := 0;
    int MODE_ARG        := 1;
    int MODE_SHORT_OPT  := 2;
    int MODE_LONG_OPT   := 3;
    int MODE_OPT_VALUE  := 4;
    
    String arg;
    String opt;
    String value;
    int mode;
    CommandLineParserTarget cl;
    
    [] __init() {
        Runtime rt = this.rt();
        arg = rt.createInstance(String:CLASSNAME);
        opt = rt.createInstance(String:CLASSNAME);
        value = rt.createInstance(String:CLASSNAME);
    }
    
    [] __destruct() {
        value.destroy();
        opt.destroy();
        arg.destroy();
    }
    
    [AnyList /*List<String>*/] split(cstring line) {
        Runtime rt = this.rt();
        AnyList list = rt.createInstance(AnyList:CLASSNAME);
        String tmp = rt.createInstance(String:CLASSNAME);
        String l = rt.createInstance(String:CLASSNAME);
        l.assignCString(line);
        IStream input = l.toIStream();
        // TODO: handle ".."- and '..'-sequences with space correctly 
        while (!input.isEmpty()) {
            int c = input.readChar();
            if (c == ' ') {
                if (tmp.length()) {
                    String s = rt.createInstance(String:CLASSNAME);
                    s.assignString(tmp);
                    list.add(s);
                    tmp.clear();
                }
            } else {
                tmp.printChar(c);
            }
        }
        if (tmp.length()) {
            String s = rt.createInstance(String:CLASSNAME);
            s.assignString(tmp);
            list.add(s);
            tmp.clear();
        }
        input.destroy();
        l.destroy();
        tmp.destroy();
        return list;
    }
    
    [int] parse(AnyIterator args, CommandLineParserTarget commandline) {
        mode = MODE_START;
        cl = commandline;
        while (args.hasNext()) {
            String cur = args.next();
            IStream current = cur.toIStream();
            if (!this.parseFirstChar(current.readChar())) {
                current.destroy();
                return false;
            }
            while (!current.isEmpty()) {
                if (!this.parseChar(current.readChar())) {
                    current.destroy();
                    return false;
                }
            }
            current.destroy();
        }
        return this.parseFinalize();
    }
    
    [int] parseFirstChar(int c) {
        if (c == '-') {
            if (mode == MODE_ARG) {
                if (!this._pushArgument(arg)) { return false; }
            } else if (mode == MODE_SHORT_OPT || mode == MODE_LONG_OPT) {
                if (!this._pushOption(opt)) { return false; }
            } else if (mode == MODE_OPT_VALUE) {
                if (!this._pushValueOption(opt, value)) { return false; }
            }
            mode = MODE_SHORT_OPT;
        } else {
            if (mode == MODE_START) {
                mode = MODE_ARG;
                arg.printChar(c);
            } else if (mode == MODE_ARG) {
                if (!this._pushArgument(arg)) { return false; }
                arg.printChar(c);
            } else if (mode == MODE_SHORT_OPT || mode == MODE_LONG_OPT) {
                mode = MODE_OPT_VALUE;
                value.printChar(c);
            } else if (mode == MODE_OPT_VALUE) {
                if (!this._pushValueOption(opt, value)) { return false; }
                mode = MODE_ARG;
                arg.printChar(c);
            }
        }
        return true;
    }
    
    [int] parseChar(int c) {
        if (c == '-') {
            if (mode == MODE_ARG) {
                arg.printChar(c);
            } else if (mode == MODE_SHORT_OPT) {
                if (opt.length()) {
                    this.rt().err().printCString("'-' within short option list").printNewline();
                    return false;
                }
                mode = MODE_LONG_OPT;
            } else if (mode == MODE_LONG_OPT) {
                if (!opt.length()) {
                    this.rt().err().printCString("'-' at start of long option").printNewline();
                    return false;
                }
                opt.printChar(c);
            } else if (mode == MODE_OPT_VALUE) {
                value.printChar(c);
            }
        } else if (c == '=') {
            if (mode == MODE_ARG) {
                arg.printChar(c);
            } else if (mode == MODE_SHORT_OPT || mode == MODE_LONG_OPT) {
                mode = MODE_OPT_VALUE;
            } else if (mode == MODE_OPT_VALUE) {
                value.printChar(c);
            }
        } else {
            if (mode == MODE_ARG) {
                arg.printChar(c);
            } else if (mode == MODE_SHORT_OPT) {
                if (opt.length()) { 
                    if (!this._pushOption(opt)) { return false; }
                }
                opt.printChar(c);
            } else if (mode == MODE_LONG_OPT) {
                opt.printChar(c);
            } else if (mode == MODE_OPT_VALUE) {
                value.printChar(c);
            }
        }
        return true;
    }
    
    [int] parseFinalize() {
        if (mode == MODE_ARG) {
            if (!this._pushArgument(arg)) { return false; }
        } else if (mode == MODE_SHORT_OPT) {
            if (opt.length()) {
                if (!this._pushOption(opt)) { return false; }
            } else {
                arg.printChar('-');
                if (!this._pushArgument(arg)) { return false; }
            }
        } else if (mode == MODE_LONG_OPT) {
            if (opt.length()) {
                if (!this._pushOption(opt)) { return false; }
            } else {
                arg.printChar('-').printChar('-');
                if (!this._pushArgument(arg)) { return false; }
            }
        } else if (mode == MODE_OPT_VALUE) {
            if (!this._pushValueOption(opt, value)) { return false; }
        }
        return true;
    }
    
    [int] _pushArgument(String arg) {
        if (!arg.length()) {
            this.rt().err().printCString("no argument to push").printNewline();
            return false;
        }
        int ret = cl.pushCLArgument(arg);
        arg.clear();
        return ret;
    }
    
    [int] _pushOption(String opt) {
        if (!opt.length()) {
            this.rt().err().printCString("no option to push").printNewline();
            return false;
        }
        int ret = cl.pushCLOption(opt);
        opt.clear();
        return ret;
    }
    
    [int] _pushValueOption(String opt, String val) {
        if (!opt.length() || !val.length()) {
            this.rt().err().printCString("no option with value to push").printNewline();
            return false;
        }
        int ret = cl.pushCLValueOption(opt, val);
        opt.clear();
        val.clear();
        return ret;
    }

}
