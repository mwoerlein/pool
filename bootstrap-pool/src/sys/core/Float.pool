/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::stream::OStream;

// TODO: extends Comparable<Float> for compare operator support, if available
class Float extends Object {
    
    int _f;
    
    // methods
    [Float] assignFlt(int f) { _f = f; return this; }
    [Float] assignFloat(Float f) { _f = f.getFlt(); return this; }
    [Float] assignInt(int n) { _f = Flt:fromInt(n); return this; }
    [Float] assignInteger(Integer n) { _f = Flt:fromInt(n.getInt()); return this; }
    [Float] fromCString(cstring c) {
        sys::core::String s = this.rt().createInstance(sys::core::String:CLASSNAME);
        s.assignCString(c);
        _f = s.toFlt();
        s.destroy();
        return this;
    }
    
    [int] isNaN() { return Flt:isNaN(_f); }
    [int] isInfPos() { return _f == Flt:INF_POS; }
    [int] isInfNeg() { return _f == Flt:INF_NEG; }
    [int] isZero() { return _f == Flt:ZERO_POS || _f == Flt:ZERO_NEG; }
    [int] getFlt() { return _f; }

    [] addFlt(int f) { _f = Flt:add(_f, f); }
    [] subFlt(int f) { _f = Flt:sub(_f, f); }
    [] mulFlt(int f) { _f = Flt:mul(_f, f); }
    [] divFlt(int f) { _f = Flt:div(_f, f); }
    
    [] addFloat(Float f) { _f = Flt:add(_f, f.getFlt()); }
    [] subFloat(Float f) { _f = Flt:sub(_f, f.getFlt()); }
    [] mulFloat(Float f) { _f = Flt:mul(_f, f.getFlt()); }
    [] divFloat(Float f) { _f = Flt:div(_f, f.getFlt()); }
    
    [] sqrt() { _f = Flt:sqrt(_f); }
    
    [int] compareFlt(int f) { return Flt:compare(_f, f); }
    [int] compareFloat(Float f) { return Flt:compare(_f, f.getFlt()); }
    
    [int] hash() { return _f; }
    [int] equals(__any__ obj) {
        Float f = this.rt().cast(Float:CLASSNAME, obj);
        if (f && !this.isNaN()) {
            return this.compareFloat(f) == 0;
        }
        return 0;
    }
    
    [OStream] printToStream(OStream stream) { return stream.printFlt(_f); }

}
