/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::memory::Address;
use sys::runtime::Class;
use sys::runtime::InstanceHandle;
use sys::runtime::Runtime;
use sys::stream::OStream;

class Object {
    
    // variables
    Runtime runtime;
    
    Object owner;
    Object _owned_entry;
    Object _owned_prev;
    Object _owned_next;
    
    // methods
    [Class] getClass() {
        InstanceHandle self = Address:convert(this);
        return self.inst_desc.class_desc.class_instance;
    }
    
    [int] getAddress() {
        InstanceHandle self = Address:convert(this);
        return Address:from(self.inst_desc);
    }
    
    [int] hash() {
        return this.getAddress();
    }
    
    // TODO: use generic method instead of __any__?
    [int] equals(__any__ obj) {
        InstanceHandle self = Address:convert(this);
        InstanceHandle other = Address:convert(obj);
        return Address:equals(self.inst_desc, other.inst_desc);
    }
    
    [OStream] printToStream(OStream stream) {
        return stream.print(this.getClass().getName()).printChar('@').printPtr(this.getAddress());
    }
    
    [Runtime] rt() {
        return runtime;
    }
    
    // TODO #7: move to constructor?
    [] __init() {}
    
    // TODO #7: move to constructor?
    [] setRt(Runtime rt) {
        runtime = rt;
    }
    
    // TODO: move to destructor/implicit destruction instead of manual one
    [] __destruct() {}
    
    // TODO: move to destructor/implicit destruction instead of manual one
    [] destroy() {
        this.__destructOwned();
        this.__destruct();
        this.rt().destroyInstance(this);
    }
    
    [] __destructOwned() {
        if (_owned_entry) {
            Object cur = _owned_entry._owned_next;
            while (Address:compare(cur, _owned_entry) != 0) {
                Object kill = cur;
                cur = cur._owned_next;
                kill.destroy();
            }
            cur.destroy();
        }
    }
    
    [Object] getOwner() { return owner; }
    
    [] own(__any__ o) {
        Object owned = this.rt().cast(Object:CLASSNAME, o);
        if (!owned) { return; }
        if (Address:compare(this, owned.owner) == 0) { return; }
        
        if (owned.owner) {
            // remove from old _owned list
            if (Address:compare(owned, owned.owner._owned_entry) != 0) {
                // remove inside of _owned list
                owned._owned_next._owned_prev = owned._owned_prev;
                owned._owned_prev._owned_next = owned._owned_next;
            } else if (Address:compare(owned, owned.owner._owned_entry._owned_next) != 0) {
                // remove first of _owned list
                owned.owner._owned_entry = owned._owned_prev;
                owned._owned_next._owned_prev = owned._owned_prev;
                owned._owned_prev._owned_next = owned._owned_next;
            } else {
                // remove last element of _owned list
                owned.owner._owned_entry = null;
            }
        }
        
        owned.owner = this;
        // insert into new _owned list
        if (_owned_entry) {
            owned._owned_next = _owned_entry._owned_next;
            owned._owned_prev = _owned_entry;
            owned._owned_next._owned_prev = owned._owned_prev._owned_next = owned;
        } else {
            _owned_entry = owned._owned_prev = owned._owned_next = owned;
        }
    }
    
    [__all__] createOwn(cstring name) {
        __all__ o = this.rt().createInstance(name);
        this.own(o);
        return o;
    }

}
