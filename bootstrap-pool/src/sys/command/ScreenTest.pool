/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::command;

use sys::stream::FOStream;
use sys::tui::Screen;

class ScreenTest extends linux::Command {

    [] configure() {
        this.setName("screentest")
            .setVersion("0.1.0")
            .setUsage(<"
Test for some screen features.

    Usage:
      screentest [options]

    Options:
      -h --help                     Show this screen.
      --version                     Show version.
">);
        this.registerOptionAlias('h', "help")
        ;
    }

    [int] run() {
        sys::runtime::Runtime rt = this.rt();
        sys::stream::OStream out = rt.out();
        if (this.hasOption("help")) {
            out.printCString(usage).printNewline();
            return 0;
        }
        
        linux::LinuxScreen ls = this.initScreen();
        sys::tui::WindowManager wm = this.createOwn(sys::tui::WindowManager:CLASSNAME);
        [Screen vs1, Screen vs2, Screen vs3] = wm._init(ls.screen()).split3Tiled();
        
        vs1.clear(FOStream:BRIGHT_YELLOW, FOStream:BLUE);
        vs2.clear(FOStream:BLACK, FOStream:WHITE);
        vs3.clear(FOStream:DEFAULT, FOStream:DEFAULT);
        
        rt.setOut(vs3.createOStream(FOStream:DEFAULT, FOStream:DEFAULT));
        rt.setErr(vs3.createOStream(FOStream:BRIGHT_RED, FOStream:DEFAULT));
        
        FOStream fout1 = vs1.createFOStream(FOStream:BRIGHT_YELLOW, FOStream:BLUE);
        FOStream fout2 = vs2.createFOStream(FOStream:BLACK, FOStream:WHITE);
        this.sleep(1, 0);
        fout1.printChar('$').printInt(ls.getMaxX()).printChar('x').printInt(ls.getMaxY()).printNewline();
        fout2.printChar('$').printInt(ls.getMaxX()).printChar('x').printInt(ls.getMaxY()).printNewline();
        this.sleep(1, 0);
        fout1.printChar('$').printInt(vs1.getMaxX()).printChar('x').printInt(vs1.getMaxY()).printNewline();
        this.sleep(1, 0);
        fout2.printChar('$').printInt(vs2.getMaxX()).printChar('x').printInt(vs2.getMaxY()).printNewline();
        int i = 60;
        while (i--) {
            this.sleep(0, i * 25000000);
            fout1.printInt(i).printNewline();
            fout2.printInt(i).printNewline();
        }
        
        // wait before termination which clears screen again
        this.sleep(10, 0);
    }
    
    [] sleep(int sec, int nsec) {
        sec += nsec / 1000000000;
        nsec %= 1000000000;
        this.rt().out().printCString("Sleep for ").printInt(sec).printCString("s and ").printInt(nsec).printCString("ns").printNewline();
        this.rt().sleep(sec, nsec);
    }
}
