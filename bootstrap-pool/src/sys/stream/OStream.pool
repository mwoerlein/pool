/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::stream;

use sys::core::BigInt;
use sys::core::Flt;
use sys::core::Object;
use sys::core::String;
use sys::core::utils::Bitset;
use sys::memory::Address;

class OStream extends Object {
    
    abstract [OStream] printChar(int c);
    
    [OStream] printInt(int i) {
        return this._printInt(i, 10, 0);
    }
    
    [OStream] printHex(int i) {
        return this._printHex(i, 0);
    }
    
    [OStream] printUHex(int i) {
        return this._printUHex(i, 0);
    }
    
    [OStream] printPtr(int i) {
        return this._printUHex(i, 8);
    }
    
    [OStream] printAddr(__any__ i) {
        return this._printUHex(Address:from(i), 8);
    }
    
    // float serialisation adopted from https://www.ryanjuckett.com/printing-floating-point-numbers/
    [OStream] printFlt(int f) {
        int sign = Bitset:rshift(f, 31);
        int exp = Bitset:and(Bitset:rshift(f, 23), 0xff);
        int mantissa = Bitset:and(f, 0x7fffff);
        
        if (exp == 0xff) {
            // special values
            if (mantissa == 0) {
                if (sign == 1) { return this.printCString("-Inf"); }
                return this.printCString("+Inf");
            }
            return this.printCString("NaN");
        }
        if (exp == 0 && mantissa == 0) {
            // 0 * 2^x => always 0
            if (sign == 1) { this.printChar('-'); }
            return this.printChar('0');
        }
        
        // determine digits as big integer fraction:  numerator  /  denominator
        BigInt numerator = this.rt().createInstance(BigInt:CLASSNAME);
        BigInt denominator = this.rt().createInstance(BigInt:CLASSNAME);
        if (exp == 0) {
            // denormalized float =>  mant * 2^(1-127-23) => mant  /  2^-(1-127-23)
            numerator.assignInt(mantissa);
            denominator.assignInt(1).shiftBits(149);
        } else if (exp > 150) {
            // normalized float without fractional part =>  mant * 2^exp-127-23  /  1
            numerator.assignInt(mantissa + 0x800000).shiftBits(exp - 150);
            denominator.assignInt(1);
        } else {
            // normalized float with fractional part =>  mant  /  2^-(exp-127-23) 
            numerator.assignInt(mantissa + 0x800000);
            denominator.assignInt(1).shiftBits(150 - exp);
        }
        
        // adjust fraction to get first non-zero digit
        int firstDigitExponent = Flt:floor(Flt:log10(Flt:abs(f)));
        if (firstDigitExponent > 0) {
            denominator.shiftDigits(firstDigitExponent);
        } else {
            numerator.shiftDigits(-firstDigitExponent);
        }
        
        int maxDigits = 64;
        int digits = 0;
        // simple representation: 0.<DIGITS>e<EXPONENT+1> and -0.<DIGITS>e<EXPONENT+1> 
        // TODO: generate common output
        if (sign == 1) { this.printChar('-'); }
        this.printChar('0').printChar('.');
        while (!numerator.isZero() && digits++ < maxDigits) {
            this.printChar(numerator.divToDigit(denominator) + '0');
            numerator.shiftDigits(1);
        }
        this.printChar('e').printInt(firstDigitExponent+1);
        
        numerator.destroy();
        denominator.destroy();
        return this; 
    }
    
    [OStream] printCString(cstring s) {
        return this._printCString(Address:fromString(s));
    }
    
    // TODO: use generic method instead of plain Object?
    [OStream] print(__any__ o) {
        if (!o) {
            return this.printCString("NULL");
        }
        Object obj = this.rt().cast(Object:CLASSNAME, o);
        return obj.printToStream(this);
    }
    
    [OStream] printNewline() {
        return this.printChar('\n');
    }
    
    [OStream] printRawByte(int i) {
        int n = i;
        this.printChar(Bitset:and(n, 0xff));
        return this;
    }
    
    [OStream] printRawWord(int i) {
        int n = i;
        this.printChar(Bitset:and(n, 0xff));
        n = Bitset:rshift(n, 8);
        this.printChar(Bitset:and(n, 0xff));
        return this;
    }
    
    [OStream] printRawInt(int i) {
        int n = i;
        this.printChar(Bitset:and(n, 0xff));
        n = Bitset:rshift(n, 8);
        this.printChar(Bitset:and(n, 0xff));
        n = Bitset:rshift(n, 8);
        this.printChar(Bitset:and(n, 0xff));
        n = Bitset:rshift(n, 8);
        this.printChar(Bitset:and(n, 0xff));
        return this;
    }
    
    [OStream] lowerString(String s) {
        return s.printToLowerStream(this);
    }
    
    [OStream] upperString(String s) {
        return s.printToUpperStream(this);
    }
    
    [OStream] escapeString(String s) {
        return s.escapeToStream(this);
    }
    
    [OStream] escapeChar(int c) {
        this.printChar('\'');
        if (c == '\\') { this.printChar('\\').printChar('\\'); }
        else if (c == '\'') { this.printChar('\\').printChar('\''); }
        else if (c == '\n') { this.printChar('\\').printChar('n'); }
        else if (c == '\r') { this.printChar('\\').printChar('r'); }
        else if (c == '\t') { this.printChar('\\').printChar('t'); }
        else { this.printChar(c); }
        return this.printChar('\'');
    }

    // private
    [OStream] _printInt(int d, int base, int pad) {
        if (d < 0) {
            this.printChar('-');
            d = -d;
        }
        return this._printUInt(d, base, pad);
    }
    
    [OStream] _printUInt(int d, int base, int pad) {
        int p = 0;
        // allocate buffer on stack
        int buf_size = 32;
        if (pad > buf_size) { buf_size = pad; }
        buf_size++; // terminal \0 
        __pasm__("subl %eax, %esp", {"%eax": buf_size} , {"%esp": p});
        
        p += buf_size;          // goto end of buffer..
        Address:storeChar(--p, 0);  // .. and terminate temporal cstring
        int padded_start = p - pad;
        int cur = d;
        int remainder = 0;
        
        /*  Divide D by BASE until D == 0. */
        do {
            // [cur, remainder] /\= base; // unsigned div-mod
            __pasm__("movl 0, %edx; div %ebx", {"%eax": cur, "%ebx": base}, {"%eax": cur, "%edx": remainder});
            if (remainder < 10) {
                Address:storeChar(--p, remainder + '0');
            } else {
                Address:storeChar(--p, remainder + 'a' - 10);
            }
        } while (cur);
        while (p > padded_start) {
            Address:storeChar(--p, '0');
        }
    
        this._printCString(p);
        
        // free stack
        __pasm__("addl %eax, %esp", {"%eax": buf_size});
        return this;
    }
    
    [OStream] _printHex(int d, int pad) {
        if (d < 0) {
            this.printChar('-');
            d = -d;
        }
        return this._printUHex(d, pad);
    }
    
    [OStream] _printUHex(int d, int pad) {
        return this.printChar('0').printChar('x')._printUInt(d, 16, pad);
    }
    
    [OStream] _printCString(int cstringAddress) {
        int p = cstringAddress;
        int c = 0;
        while (c = Address:loadChar(p++)) { this.printChar(c); }
        return this;
    }
    
    // TODO: remove with implicit cast
    [OStream] ostream() { return this; }
}
