/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::stream;

use sys::core::Object;

// TODO: refactor blocking/non-blocking input handling
class IStream extends Object {
    
    // non-blocking check, if readChar/peekChar will never ever return with a valid character
    [int] isDone() { return this.isEmpty(); }
    // non-blocking check, if readChar/peekChar will return immediately with a valid character
    [int] isAvailable() { return !this.isEmpty(); }
    // blocking check, with timeout, if readChar/peekChar will return immediately with a valid character
    [int] awaitAvailable(int sec, int usec) { return !this.isEmpty(); }
    
    // blocking methods, if necessary
    abstract [int] isEmpty();
    abstract [int] peekChar();
    abstract [int] readChar();
    
    [int] readInt() {
        if (this.isEmpty()) { return 0; }
        
        int sign = this._readSign(1, -1);
        int base = 10;
        
        if (this._peekDigit() == 0) {
            this.readChar();
            if (this.isEmpty()) { return 0; }
            int d = this._peekDigit();
            if (d == 11) { // 'b' or 'B'
                base = 2;
                this.readChar();
            } else if (d == 33) { // 'x' or 'X'
                base = 16;
                this.readChar();
            } else if (d >= 0 && d < 8) {
                base = 8;
            } else {
                return 0;
            }
        }
        
        int result = 0;
        int digit = this._peekDigit();
        while (!this.isEmpty() && (digit >= 0 && digit < base)) {
            result *= base;
            result += digit;
            this.readChar();
            digit = this._peekDigit();
        }
        return sign * result;
    }
    
    [int] readFlt() {
        int base := 10;
        
        int sign = this._readSign(0, 0x80000000);
        
        // read integer part
        {
            // push 0 as initial integer part onto float stack
            __pasm__(".byte 0xd9; .byte 0xee; #//fldz #page 929");
                
            int digit = this._peekDigit();
            while (!this.isEmpty() && (digit >= 0 && digit < base)) {
                __pasm__(<"
                    pushl %ebx; .byte 0xda; .byte 0x0c; .byte 0x24; #//fimul (%esp) #page 935
                    pushl %eax; .byte 0xda; .byte 0x04; .byte 0x24; #//fiadd (%esp) #page 886
                    addl 8, %esp
                ">, {"%eax": digit, "%ebx": base}, {});
                this.readChar();
                digit = this._peekDigit();
            }
        }
        
        // read decimal part
        if (this.peekChar() == '.') {
            this.readChar();
            
            // push 0 as initial decimal part onto float stack
            __pasm__(".byte 0xd9; .byte 0xee; #//fldz #page 929");
            
            int digits = 0;
            int digit = this._peekDigit();
            while (!this.isEmpty() && (digit >= 0 && digit < base)) {
                __pasm__(<"
                    pushl %ebx; .byte 0xda; .byte 0x0c; .byte 0x24; #//fimul (%esp) #page 935
                    pushl %eax; .byte 0xda; .byte 0x04; .byte 0x24; #//fiadd (%esp) #page 886
                    addl 8, %esp
                ">, {"%eax": digit, "%ebx": base}, {});
                digits++;
                this.readChar();
                digit = this._peekDigit();
            }
            
            // compute decimal*10^-digits as decimal*2^(rem(-digits*ld(10),1))*2^(floor(-digits*ld(10)))
            __pasm__(<"
                pushl %eax; .byte 0xdb; .byte 0x04; .byte 0x24; #//fild (%esp) #page 917
                addl 4, %esp
                .byte 0xd9; .byte 0xe9; #//fldl2t #page 929
                .byte 0xde; .byte 0xc9; #//fmulp #page 935
                // st(0) = -digits*ld(10)
                .byte 0xd9; .byte 0xe8; #//fld1 #page 929
                .byte 0xd9; .byte 0xc1; #//fld st(1) #page 927
                .byte 0xd9; .byte 0xf8; #//fprem #page 941
                .byte 0xd9; .byte 0xf0; #//f2xm1 #page 883
                .byte 0xde; .byte 0xc1; #//faddp #page 886
                .byte 0xd9; .byte 0xfd; #//fscale #page 953
                .byte 0xdd; .byte 0xd9; #//fstp st(1) #page 961
                // st(0) = 10^-digits
            ">, {"%eax": -digits}, {});
            
            // compute decimal part 
            __pasm__(".byte 0xde; .byte 0xc9; #//fmulp #page 935");
            
            // combine integer and decimal part 
            __pasm__(".byte 0xde; .byte 0xc1; #//faddp #page 886");
        }
        
        // read exponent value
        if (this.peekChar() == 'e' || this.peekChar() == 'E') {
            this.readChar();
            
            int expSign = this._readSign(1, -1);
            int exp = 0;
            int digit = this._peekDigit();
            while (!this.isEmpty() && (digit >= 0 && digit < base)) {
                exp *= base;
                exp += digit;
                this.readChar();
                digit = this._peekDigit();
            }
            
            // compute float*10^signedExp as float*2^(rem(signedExp*ld(10),1))*2^(floor(signedExp*ld(10)))
            __pasm__(<"
                pushl %eax; .byte 0xdb; .byte 0x04; .byte 0x24; #//fild (%esp) #page 917
                addl 4, %esp
                .byte 0xd9; .byte 0xe9; #//fldl2t #page 929
                .byte 0xde; .byte 0xc9; #//fmulp #page 935
                // st(0) = signedExp*ld(10)
                .byte 0xd9; .byte 0xe8; #//fld1 #page 929
                .byte 0xd9; .byte 0xc1; #//fld st(1) #page 927
                .byte 0xd9; .byte 0xf8; #//fprem #page 941
                .byte 0xd9; .byte 0xf0; #//f2xm1 #page 883
                .byte 0xde; .byte 0xc1; #//faddp #page 886
                .byte 0xd9; .byte 0xfd; #//fscale #page 953
                .byte 0xdd; .byte 0xd9; #//fstp st(1) #page 961
                // st(0) = 10^signedExp
            ">, {"%eax": expSign * exp}, {});
            
            // combine float and exponent 
            __pasm__(".byte 0xde; .byte 0xc9; #//fmulp #page 935");
        }
        
        // pop float from float stack and apply sign
        int ret = 0;
        __pasm__(<"
            subl 4, %esp; .byte 0xd9; .byte 0x1c; .byte 0x24; #//fstp (%esp) #page 961
            popl %eax
            or %ebx, %eax
        ">, {"%ebx": sign}, {"%eax": ret});
        return ret;
    }
    
    [int] readRawInt() {
        return this.readChar() + this.readChar() * 0x100 + this.readChar() * 0x10000 + this.readChar() * 0x1000000;
    }
    
    [OStream] printToStream(OStream stream) {
        while (!this.isEmpty()) {
            stream.printChar(this.readChar());
        }
        return stream;
    }
    
    [OStream] printNToStream(int n, OStream stream) {
        int i = n;
        while ((--i >= 0) && !this.isEmpty()) {
            stream.printChar(this.readChar());
        }
        return stream;
    }
    
    [OStream] dumpToStream(OStream stream) {
        stream.printNewline();
        while (!this.isEmpty()) {
            stream.printChar(' ')._printUHex(this.readChar(), 2);
        }
        stream.printNewline();
        return stream;
    }
    


    [int] _peekDigit() {
        int c = this.peekChar();
        if (c >= '0' && c <= '9') { return c - '0'; }
        if (c >= 'a' && c <= 'z') { return c - 'a' + 10; }
        if (c >= 'A' && c <= 'Z') { return c - 'A' + 10; }
        return -1;
    }
    
    [int] _readSign(int pos, int neg) {
        int c = this.peekChar();
        if (c == '+') { this.readChar(); return pos; }
        if (c == '-') { this.readChar(); return neg; }
        return pos;
    }
    
    // TODO: remove with implicit cast
    [IStream] istream() { return this; }
}
