/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::memory;


class Address {
    global int SIZE := 4;
    
    // methods
    global [int] from(__any__ a) {
        int addr = 0;
        __pasm__("", {"%eax": a}, {"%eax": addr});
        return addr;
    }
    
    global [__all__] cast(int addr) {
        __all__ a = null;
        __pasm__("", {"%eax": addr}, {"%eax": a});
        return a;
    }
    
    global [__all__] convert(__any__ src) {
        __all__ a = null;
        __pasm__("", {"%eax": src}, {"%eax": a});
        return a;
    }
    
    global [__all__] offset(__any__ base, int offset) {
        __all__ a = null;
        __pasm__("addl %ebx, %eax", {"%eax": base, "%ebx": offset}, {"%eax": a});
        return a;
    }
    
    global [int] offsetAddress(__any__ base, int offset) {
        int addr = 0;
        __pasm__("addl %ebx, %eax", {"%eax": base, "%ebx": offset}, {"%eax": addr});
        return addr;
    }
    
    global [int] fromString(cstring s) {
        int addr = 0;
        __pasm__("", {"%eax": s}, {"%eax": addr});
        return addr;
    }
    
    global [cstring] string(__any__ base, int offset) {
        cstring s = "";
        __pasm__("addl %ebx, %eax", {"%eax": base, "%ebx": offset}, {"%eax": s});
        return s;
    }
    
    global [int] equals(__any__ a, __any__ b) {
        int eq = 0;
        __pasm__(<"
            cmpl %ebx, %eax
            jne _address_equals_ret
            movl 1, %edx        // return true
        _address_equals_ret:
        ">, {"%eax": a, "%ebx": b, "%edx": eq}, {"%edx": eq});
        return eq;
    }
    
    global [int] compare(__any__ a, __any__ b) {
        return Address:compareAddress(Address:from(a), Address:from(b));
    }
    
    global [int] compareAddress(int a, int b) {
        int cmp = 0;
        __pasm__(<"
            cmpl %ebx, %eax
            ja _address_ca_above
            jb _address_ca_below
        _address_ca_equal:
            movl 0, %ebx
            jmp _address_ca_ret
        _address_ca_above:
            movl 1, %ebx
            jmp _address_ca_ret
        _address_ca_below:
            movl -1, %ebx
        _address_ca_ret:
        ">, {"%eax": a, "%ebx": b}, {"%ebx": cmp});
        return cmp;
    }
    
    global [int] sumOverflow(int a, int b) {
        int diff = 0;
        __pasm__(<"
            movl 1, %edx
            addl %ebx, %eax
            jb _address_so_ret
            movl 0, %edx
        _address_so_ret:
        ">, {"%eax": a, "%ebx": b}, {"%eax": null, "%edx": diff});
        return diff;
    }
    
    global [__all__] load(int addr) {
        __all__ a = null;
        __pasm__("movl (%eax), %eax", {"%eax": addr}, {"%eax": a});
        return a;
    }
    
    global [int] loadAddress(int addr) {
        int a = 0;
        __pasm__("movl (%eax), %eax", {"%eax": addr}, {"%eax": a});
        return a;
    }
    
    global [cstring] loadString(int addr) {
        cstring s = "";
        __pasm__("movl (%eax), %eax", {"%eax": addr}, {"%eax": s});
        return s;
    }
    
    global [int] loadChar(int addr) {
        int c = 0;
        __pasm__("movb (%eax), %bl", {"%eax": addr, "%ebx": c} , {"%ebx": c});
        return c;
    }
    
    global [int] loadWord(int addr) {
        int c = 0;
        __pasm__("movw (%eax), %bx", {"%eax": addr, "%ebx": c} , {"%ebx": c});
        return c;
    }
    
    global [int] loadDWord(int addr) {
        int c = 0;
        __pasm__("movl (%eax), %ebx", {"%eax": addr, "%ebx": c} , {"%ebx": c});
        return c;
    }
    
    global [] store(int addr, __any__ a) {
        __pasm__("movl %ebx, (%eax)", {"%eax": addr, "%ebx": a});
    }
    
    global [] storeAddress(int addr, int a) {
        __pasm__("movl %ebx, (%eax)", {"%eax": addr, "%ebx": a});
    }
    
    global [] storeString(int addr, cstring s) {
        __pasm__("movl %ebx, (%eax)", {"%eax": addr, "%ebx": s});
    }
    
    global [] storeChar(int addr, int c) {
        __pasm__("movb %bl, (%eax)", {"%eax": addr, "%ebx": c});
    }
    
    global [] storeWord(int addr, int c) {
        __pasm__("movw %bx, (%eax)", {"%eax": addr, "%ebx": c});
    }
    
    global [] storeDWord(int addr, int c) {
        __pasm__("movl %ebx, (%eax)", {"%eax": addr, "%ebx": c});
    }
    
    global [] copy(int srcAddr, int destAddr) {
        __pasm__("movl (%ebx), %eax; movl %eax, (%edx)", {"%ebx": srcAddr, "%edx": destAddr}, {"%eax": null});
    }
    
    global [] copyChar(int srcAddr, int destAddr) {
        __pasm__("movb (%ebx), %al; movb %al, (%edx)", {"%ebx": srcAddr, "%edx": destAddr}, {"%eax": null});
    }
    
    global [] copyWord(int srcAddr, int destAddr) {
        __pasm__("movw (%ebx), %ax; movw %ax, (%edx)", {"%ebx": srcAddr, "%edx": destAddr}, {"%eax": null});
    }
    
    global [] copyDWord(int srcAddr, int destAddr) {
        __pasm__("movl (%ebx), %eax; movl %eax, (%edx)", {"%ebx": srcAddr, "%edx": destAddr}, {"%eax": null});
    }
    
    global [] copyBytes(int srcAddr, int destAddr, int n) {
        __pasm__(
            ".byte 0xf3; .byte 0xa4 #// rep movsb",
             {"%ecx": n, "%esi": srcAddr, "%edi": destAddr},
             {"%ecx": null, "%esi": null, "%edi": null}
        );
    }
    
    global [] copyWords(int srcAddr, int destAddr, int n) {
        __pasm__(
            ".byte 0xf3; .byte 0x66; .byte 0xa5 #// rep movsw",
             {"%ecx": n, "%esi": srcAddr, "%edi": destAddr},
             {"%ecx": null, "%esi": null, "%edi": null}
        );
    }
    
    global [] copyDWords(int srcAddr, int destAddr, int n) {
        __pasm__(
            ".byte 0xf3; .byte 0xa5 #// rep movsd",
             {"%ecx": n, "%esi": srcAddr, "%edi": destAddr},
             {"%ecx": null, "%esi": null, "%edi": null}
        );
    }
    
    global [] setBytes(int destAddr, int n, int val) {
        __pasm__(
            ".byte 0xf3; .byte 0xaa #// rep stosb",
             {"%ecx": n, "%eax": val, "%edi": destAddr},
             {"%ecx": null, "%edi": null}
        );
    }
    
    global [] setWords(int destAddr, int n, int val) {
        __pasm__(
            ".byte 0xf3; .byte 0x66; .byte 0xab #// rep stosw",
             {"%ecx": n, "%eax": val, "%edi": destAddr},
             {"%ecx": null, "%edi": null}
        );
    }
    
    global [] setDWords(int destAddr, int n, int val) {
        __pasm__(
            ".byte 0xf3; .byte 0xab #// rep stosd",
             {"%ecx": n, "%eax": val, "%edi": destAddr},
             {"%ecx": null, "%edi": null}
        );
    }
}
