/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::memory;

class PagedMemoryManager extends MemoryManager {
    
    PageAllocator pageAllocator;
    int _minPages;
    
    [PagedMemoryManager] setMinimalPageAllocation(int pages) { _minPages = pages; return this; }
    
    [MemoryInfo] outOfAvailable(int size) {
        int pages = 1 + size / PageAllocator:PAGESIZE;
        if (pages < _minPages) {
            pages = _minPages;
        }
        MemoryInfo newAvailable = pageAllocator.allocatePages(pages);
        if (Address:from(newAvailable) == MemoryInfo:NONE) {
            // TODO #7: return "parent":outOfAvailable(size);
            this.rt().err().printCString("bad allocate ").printPtr(size).printNewline();
            return Address:cast(MemoryInfo:NONE);
        }
        this._mergeMemoryInfoInto(available, newAvailable);
        return this.allocate(size);
    }
    
    [] initFromPageAllocator(PageAllocator pageAllocator, int initialPages) {
        int pages = initialPages;
        if (pages < _minPages) {
            pages = _minPages;
        }
        MemoryInfo initial = pageAllocator.allocatePages(pages);
        if (Address:from(initial) == MemoryInfo:NONE) {
            // bail out
            this.rt().err().printCString("cannot allocate initial pages\n");
            return;
        }
        this.pageAllocator = pageAllocator;
        this.initEmpty(initial, pageAllocator.isIncreasing(), 0);
    }
    
    [] initFromPagedMemoryManager(PageAllocator pageAllocator, PagedMemoryManager src) {
        this.pageAllocator = pageAllocator;
        this._minPages = src._minPages;
        this.initFromMemoryManager(src.rt().cast(MemoryManager:CLASSNAME, src));
    }
    
}
