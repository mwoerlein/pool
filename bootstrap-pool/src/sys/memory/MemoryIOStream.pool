/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::memory;

use sys::memory::Address;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

class MemoryIOStream extends SeekableIOStream {
    
    int _pos;
    int _buf;
    int _len;
    MemoryInfo _owned;
    
    [] _init(int size) {
        _owned = this.rt().getAllocator().allocate(size);
        this._initBuf(_owned.buf, _owned.len);
    }
    
    [] _initMem(MemoryInfo mem) {
        this._initBuf(mem.buf, mem.len);
    }
    
    [] _initBuf(int buf, int len) {
        _buf = buf;
        _len = len;
        _pos = 0;
    }
    
    [] __destruct() {
        if (_owned) {
            this.rt().getAllocator().free(_owned);
        }
    }
     
    [int] isEmpty() {
        return _pos == _len;
    }
    
    [int] length() {
        return _len;
    }
    
    [int] pos() {
        return _pos;
    }
    
    [int] peekChar() {
        if (_pos >= _len) { return 0; }
        return Address:loadChar(_buf + _pos);
    }
    
    [int] readChar() {
        if (_pos >= _len) { return 0; }
        return Address:loadChar(_buf + _pos++);
    }
    
    [OStream] printChar(int c) {
        if (_pos < _len) {
            Address:storeChar(_buf + _pos++, c);
        }
        return this.ostream();
    }
    
    [] seek(int pos) {
        if (pos <= 0) {
            _pos = 0;
        } else if (pos >= _len) {
            _pos = _len;
        } else {
            _pos = pos;
        }
    }
    
    [int] startAddr() {
        return _buf;
    }
}
