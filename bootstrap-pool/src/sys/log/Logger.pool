/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::log;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::stream::OStream;

class Logger extends sys::core::Object {

    int CRITICAL := 7;
    int ERROR    := 6;
    int WARNING  := 5;
    int NOTICE   := 4;
    int INFO     := 3;
    int DEBUG    := 2;
    int TRACE    := 1;
    
    AnyList _entries; // LinkedList<LogEntry>
    int _minLevel;
    int _lastMax;
    
    [] __init() { this._initLogger(); }
    [] _initLogger() {
        _entries = this.createOwn(AnyList:CLASSNAME);
        _minLevel = Logger:NOTICE;
        _lastMax = 0;
    }

    [] __destruct() { this._destructLogger(); }
    [] _destructLogger() {
        this.clear();
    }
    
    [Logger] setLevel(int level) { _minLevel = level; return this; }
    
    [OStream] crit()   { return this.log(Logger:CRITICAL).ostream(); }
    [OStream] error()  { return this.log(Logger:ERROR).ostream(); }
    [OStream] warn()   { return this.log(Logger:WARNING).ostream(); }
    [OStream] notice() { return this.log(Logger:NOTICE).ostream(); }
    [OStream] info()   { return this.log(Logger:INFO).ostream(); }
    [OStream] debug()  { return this.log(Logger:DEBUG).ostream(); }
    [OStream] trace()  { return this.log(Logger:TRACE).ostream(); }
    
    [LogEntry] log(int level) {
        LogEntry e = this.rt().createInstance(LogEntry:CLASSNAME);
        _entries.add(e.setLevel(level));
        if (level > _lastMax) { _lastMax = level; }
        return e;
    }
    
    [int] has(int level) { return _lastMax >= level; }
    
    [] flush() {
        AnyIterator it = _entries.iterator();
        while (it.hasNext()) { this.showEntry(it.next()); }
        it.destroy();
        this.clear();
    }
    
    [] clear() {
        _entries.destroyAll();
        _lastMax = 0;
    }
    
    [] showEntry(LogEntry e) {
        int level = e.getLevel();
        if (level < _minLevel) { /* ignore */}
        else if (level < Logger:WARNING) { this.rt().out().print(e).printNewline(); }
        else { this.rt().err().print(e).printNewline(); }
    }
    
    // TODO: remove with implicit cast
    [Logger] logger() { return this; }
}
