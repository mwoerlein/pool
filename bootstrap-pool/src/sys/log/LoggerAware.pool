/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::log;

use sys::stream::OStream;

class LoggerAware extends sys::core::Object {

    Logger logger;
    [LoggerAware] setLogger(Logger logger) { this.logger = logger; return this; }
    [Logger] getLogger() { return this.logger; }
    
    [OStream] crit()   { return logger.crit(); }
    [OStream] error()  { return logger.error(); }
    [OStream] warn()   { return logger.warn(); }
    [OStream] notice() { return logger.notice(); }
    [OStream] info()   { return logger.info(); }
    [OStream] debug()  { return logger.debug(); }
    [OStream] trace()  { return logger.trace(); }

    [int] hasLogLevel(int level) { return logger.hasLevel(level); }
    
    [LoggerAware] initLoggerFromCommandLine(sys::core::utils::CommandLine cl) {
        Logger l = this.createOwn(Logger:CLASSNAME);
        if (cl) {
            if (cl.hasOption("verbose"))  { l.setLevel(Logger:INFO); }
            if (cl.hasOption("debug"))    { l.setLevel(Logger:DEBUG); }
            if (cl.hasOption("trace"))    { l.setLevel(Logger:TRACE); }
            if (cl.hasOption("warning"))  { l.setLevel(Logger:WARNING); }
            if (cl.hasOption("error"))    { l.setLevel(Logger:ERROR); }
            if (cl.hasOption("critical")) { l.setLevel(Logger:CRITICAL); }
        }
        return this.setLogger(l);                
    }
    
}
