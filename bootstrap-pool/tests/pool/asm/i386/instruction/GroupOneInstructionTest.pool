/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace pool::asm::i386::instruction;

class GroupOneInstructionTest extends pool::asm::test::TestCase {

    [] runAll() {
        this.testMI_imm_reg_32bit();
        this.testMI_imm_reg_16bit();
        this.testMI_imm_ind_32bit();
        this.testMI_imm_ind_16bit();
        this.testMR_reg_reg();
        this.testMR_reg_ind();
        this.testRM_ind_reg();
    }
        
    [int] testMI_imm_reg_32bit() {
        pool::asm::test::TestData t = this.newTestData("testMI_imm_reg_32bit");

        t.in("start:");
        t.in("    add start, %al");
        t.in("    or start, %ax");
        t.in("    adc (0x2 + start), %eax");
        t.in("    sbb 0x12, %ah");
        t.in("    and 0x12, %edi");
        t.in("    sub 0x12345678, %edi");

        t.bin(0x04).bin(0x00);
        t.bin(0x66).bin(0x0D).bin(0x00).bin(0x00);
        t.bin(0x15).bin(0x02).bin(0x00).bin(0x00).bin(0x00);
        t.bin(0x80).bin(0xDC).bin(0x12);
        t.bin(0x83).bin(0xE7).bin(0x12);
        t.bin(0x81).bin(0xEF).bin(0x78).bin(0x56).bin(0x34).bin(0x12);
        
        return this.runTest(t);
    }

    [int] testMI_imm_reg_16bit() {
        pool::asm::test::TestData t = this.newTestData("testMI_imm_ind_16bit");
        
        t.in("    .code16");
        t.in("start:");
        t.in("    xor start, %al");
        t.in("    cmp start, %ax");
        t.in("    or start, %eax");
        t.in("    adc 0x12, %ah");
        t.in("    sbb 0x12, %edi");
        t.in("    and 0x12345678, %edi");

        t.bin(0x34).bin(0x00);
        t.bin(0x3D).bin(0x00).bin(0x00);
        t.bin(0x66).bin(0x0D).bin(0x00).bin(0x00).bin(0x00).bin(0x00);
        t.bin(0x80).bin(0xD4).bin(0x12);
        t.bin(0x66).bin(0x83).bin(0xDF).bin(0x12);
        t.bin(0x66).bin(0x81).bin(0xE7).bin(0x78).bin(0x56).bin(0x34).bin(0x12);
        
        return this.runTest(t);
    }

    [int] testMI_imm_ind_32bit() {
        pool::asm::test::TestData t = this.newTestData("testMI_imm_ind_32bit");

        t.in("start:");
        t.in("    subb 0x12, (%eax)");
        t.in("    xorb 0xff, 2(%esp)");
        t.in("    cmpw 0x4, (%edx)");
        t.in("    addw 0x400, 6(%eax,%edi,4)");
        t.in("    orl 0xffffffff, (%esp)");
        t.in("    adcl 0xc0ffee, (%esp,%ecx,8)");
        // TODO: activate with .addr and .data support in parser
        //t.in("    .addr32 addl 0xdeadbeef, (0x20)");

        t.in("    sbbb start, (%bx)");
        t.in("    andb start, (%bp)");
        t.in("    subb 0xff, 2(%bx)");
        t.in("    xorw 0xc, (%bx,%di)");
        t.in("    cmpw 0x400, 6(%bp,%si)");
        t.in("    addl 0xc0ffee, (%di)");
        t.in("    orl 0xfefe, 43981(%si)");
        // TODO: activate with .addr and .data support in parser
        //t.in("    .addr16 addl 0xdeadbeef, (0x20)");

        t.bin(0x80).bin(0x28).bin(0x12);
        t.bin(0x80).bin(0x74).bin(0x24).bin(0x02).bin(0xFF);
        t.bin(0x66).bin(0x83).bin(0x3A).bin(0x04);
        t.bin(0x66).bin(0x81).bin(0x44).bin(0xB8).bin(0x06).bin(0x00).bin(0x04);
        t.bin(0x83).bin(0x0C).bin(0x24).bin(0xFF);
        t.bin(0x81).bin(0x14).bin(0xCC).bin(0xEE).bin(0xFF).bin(0xC0).bin(0x00);
        // TODO: activate with .addr and .data support in parser
        //t.bin(0x81).bin(0x05).bin(0x20).bin(0x00).bin(0x00).bin(0x00).bin(0xEF).bin(0xBE).bin(0xAD).bin(0xDE);

        t.bin(0x67).bin(0x80).bin(0x1F).bin(0x00);
        t.bin(0x67).bin(0x80).bin(0x66).bin(0x00).bin(0x00);
        t.bin(0x67).bin(0x80).bin(0x6F).bin(0x02).bin(0xFF);
        t.bin(0x66).bin(0x67).bin(0x83).bin(0x31).bin(0x0C);
        t.bin(0x66).bin(0x67).bin(0x81).bin(0x7A).bin(0x06).bin(0x00).bin(0x04);
        t.bin(0x67).bin(0x81).bin(0x05).bin(0xEE).bin(0xFF).bin(0xC0).bin(0x00);
        t.bin(0x67).bin(0x81).bin(0x8C).bin(0xCD).bin(0xAB).bin(0xFE).bin(0xFE).bin(0x00).bin(0x00);
        // TODO: activate with .addr and .data support in parser
        //t.bin(0x67).bin(0x81).bin(0x06).bin(0x20).bin(0x00).bin(0xEF).bin(0xBE).bin(0xAD).bin(0xDE);
        
        return this.runTest(t);
    }

    [int] testMI_imm_ind_16bit() {
        pool::asm::test::TestData t = this.newTestData("testMI_imm_ind_16bit");
        
        t.in("    .code16");
        t.in("start:");
        t.in("    adcb 0x12, (%eax)");
        t.in("    sbbb 0xff, 2(%esp)");
        t.in("    andw 0x4, (%edx)");
        t.in("    subw 0x400, 6(%eax,%edi,4)");
        t.in("    xorl 0xffffffff, (%esp)");
        t.in("    cmpl 0xc0ffee, (%esp,%ecx,8)");
        // TODO: activate with .addr and .data support in parser
        //t.in("    .addr32 addl 0xdeadbeef, (0x20)");

        t.in("    addb start, (%bx)");
        t.in("    orb start, (%bp)");
        t.in("    adcb 0xff, 2(%bx)");
        t.in("    sbbw 0xc, (%bx,%di)");
        t.in("    andw 0x400, 6(%bp,%si)");
        t.in("    subl 0xc0ffee, (%di)");
        t.in("    xorl 0xfefe, 43981(%si)");
        // TODO: activate with .addr and .data support in parser
        //t.in("    .addr16 addl 0xdeadbeef, (0x20)");

        t.bin(0x67).bin(0x80).bin(0x10).bin(0x12);
        t.bin(0x67).bin(0x80).bin(0x5C).bin(0x24).bin(0x02).bin(0xFF);
        t.bin(0x67).bin(0x83).bin(0x22).bin(0x04);
        t.bin(0x67).bin(0x81).bin(0x6C).bin(0xB8).bin(0x06).bin(0x00).bin(0x04);
        t.bin(0x66).bin(0x67).bin(0x83).bin(0x34).bin(0x24).bin(0xFF);
        t.bin(0x66).bin(0x67).bin(0x81).bin(0x3C).bin(0xCC).bin(0xEE).bin(0xFF).bin(0xC0).bin(0x00);
        // TODO: activate with .addr and .data support in parser
        //t.bin(0x66).bin(0x67).bin(0x81).bin(0x05).bin(0x20).bin(0x00).bin(0x00).bin(0x00).bin(0xEF).bin(0xBE).bin(0xAD).bin(0xDE);

        t.bin(0x80).bin(0x07).bin(0x00);
        t.bin(0x80).bin(0x4E).bin(0x00).bin(0x00);
        t.bin(0x80).bin(0x57).bin(0x02).bin(0xFF);
        t.bin(0x83).bin(0x19).bin(0x0C);
        t.bin(0x81).bin(0x62).bin(0x06).bin(0x00).bin(0x04);
        t.bin(0x66).bin(0x81).bin(0x2D).bin(0xEE).bin(0xFF).bin(0xC0).bin(0x00);
        t.bin(0x66).bin(0x81).bin(0xB4).bin(0xCD).bin(0xAB).bin(0xFE).bin(0xFE).bin(0x00).bin(0x00);
        // TODO: activate with .addr and .data support in parser
        //t.bin(0x66).bin(0x81).bin(0x06).bin(0x20).bin(0x00).bin(0xEF).bin(0xBE).bin(0xAD).bin(0xDE);
        
        return this.runTest(t);
    }

    [int] testMR_reg_reg() {
        pool::asm::test::TestData t = this.newTestData("testMR_reg_reg");

        t.in("    cmp %al, %al");
        t.in("    add %bx, %dx");
        t.in("    or %esp, %ebp");

        t.bin(0x38).bin(0xC0);
        t.bin(0x66).bin(0x01).bin(0xDA);
        t.bin(0x09).bin(0xE5);

        return this.runTest(t);
    }

    [int] testMR_reg_ind() {
        pool::asm::test::TestData t = this.newTestData("testMR_reg_ind");

        t.in("    adcb %ah, 2(%esp)");
        t.in("    sbbw %di, 6(%eax,%edi,4)");
        t.in("    andl %ebp, (%esp,%ecx,8)");

        t.bin(0x10).bin(0x64).bin(0x24).bin(0x02);
        t.bin(0x66).bin(0x19).bin(0x7C).bin(0xB8).bin(0x06);
        t.bin(0x21).bin(0x2C).bin(0xCC);

        return this.runTest(t);
    }

    [int] testRM_ind_reg() {
        pool::asm::test::TestData t = this.newTestData("test_I");
        
        t.in("    sub 2(%esp), %ah");
        t.in("    xor 6(%eax,%edi,4), %di");
        t.in("    cmp (%esp,%ecx,8), %ebp");

        t.bin(0x2A).bin(0x64).bin(0x24).bin(0x02);
        t.bin(0x66).bin(0x33).bin(0x7C).bin(0xB8).bin(0x06);
        t.bin(0x3B).bin(0x2C).bin(0xCC);
        
        return this.runTest(t);
    }
    
}
