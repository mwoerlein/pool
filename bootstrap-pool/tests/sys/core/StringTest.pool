/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

use sys::stream::IStream;
use sys::stream::OStream;

class StringTest extends test::TestCase {

    [] runAll() {
        this.testInitializationClearAndLength();
        this.testHashAndEquals();
        this.testComparable();
        this.testSubString();
        this.testAt();
        this.testToInt();
        this.testToCString();
        this.testConversions();
        this.testEscapeUnescape();
        this.testIStream();
        this.testOStream();
        this.testPrintToStream();
        this.testRawInt();
        this.testCompareCStrings();
    }
    
    [int] testInitializationClearAndLength() {
        this.start("testInitializationClearAndLength");
        
        String s1 = this.rt().createInstance(String:CLASSNAME);
        if (s1.length() != 0) { return this.fail("Create empty String"); }
        
        s1.assignCString("0123456789");
        if (s1.length() != 10) { return this.fail("Assign cstring"); }
        
        String s2 = this.rt().createInstance(String:CLASSNAME);
        s2.assignString(s1);
        if (s2.length() != 10) { return this.fail("Assign String"); }
        
        s1.clear();
        if (s1.length() != 0) { return this.fail("Clear String"); }
        
        s2.destroy();
        s1.destroy();
        return this.success();
    }
    
    [int] testHashAndEquals() {
        this.start("testHashAndEquals");
        
        String s1 = this.rt().createInstance(String:CLASSNAME); s1.assignCString("string");
        String s2 = this.rt().createInstance(String:CLASSNAME); s2.assignCString("strin"); s2.printChar(0x2300 + 'g');
        String s3 = this.rt().createInstance(String:CLASSNAME); s3.assignCString("other string");
        
        if (s1.hash() != String:hashCString("string")) { return this.fail("Hash value is not identical to cstring hash"); }
        if (s1.hash() != s1.hash()) { return this.fail("Hash value is not constant"); }
        if (s1.hash() != s2.hash()) { return this.fail("Hash value of Strings differs for same cstring values"); }
        if (s1.hash() == s3.hash()) { return this.fail("Hash value of Strings is identical for different cstring values"); }
        
        if (!s1.equals(s1)) { return this.fail("Identity check"); }
        if (!s1.equals(s2)) { return this.fail("Strings with same cstring value are not equal"); }
        if (!s1.cequals("string")) { return this.fail("String do not cequals with same cstring"); }
        if (s1.equals(s3)) { return this.fail("Strings with different cstring value are equal"); }
        if (s1.equals(this)) { return this.fail("String is equal to non-String"); }
        
        s3.destroy();
        s2.destroy();
        s1.destroy();
        return this.success();
    }
    
    [int] testComparable() {
        this.start("testComparable");
        
        String s1 = this.rt().createInstance(String:CLASSNAME);
        String s2 = this.rt().createInstance(String:CLASSNAME); s2.assignCString("ABC");
        String s3 = this.rt().createInstance(String:CLASSNAME); s3.assignCString("ABCDE");
        String s4 = this.rt().createInstance(String:CLASSNAME); s4.assignCString("ABCDE");
        String s5 = this.rt().createInstance(String:CLASSNAME); s5.assignCString("BCD");
        String s6 = this.rt().createInstance(String:CLASSNAME); s6.assignCString("b");
        String s7 = this.rt().createInstance(String:CLASSNAME);
        
        if (s1.compareString(s2) == 0) { return this.fail("Test '' != 'ABC'"); }
        if (s1.compareString(s3) >= 0) { return this.fail("Test '' <  'ABCDE'"); }
        if (s1.compareString(s6) >  0) { return this.fail("Test '' <= 'b'"); }
        if (s2.compareString(s3) >= 0) { return this.fail("Test 'ABC' <  'ABCDE'"); }
        if (s2.compareString(s5) >  0) { return this.fail("Test 'ABC' <= 'BCD'"); }
        if (s3.compareString(s3) >  0) { return this.fail("Test 'ABCDE' <= 'ABCDE' (identity)"); }
        if (s3.compareString(s4) >  0) { return this.fail("Test 'ABCDE' <= 'ABCDE' (different Strings)"); }
        if (s3.compareString(s3) != 0) { return this.fail("Test 'ABCDE' == 'ABCDE' (identity)"); }
        if (s3.compareString(s4) != 0) { return this.fail("Test 'ABCDE' == 'ABCDE' (different Strings)"); }
        if (s3.compareString(s3) <  0) { return this.fail("Test 'ABCDE' >= 'ABCDE' (identity)"); }
        if (s3.compareString(s4) <  0) { return this.fail("Test 'ABCDE' >= 'ABCDE' (different Strings)"); }
        if (s6.compareString(s2) <= 0) { return this.fail("Test 'a' >  'ABC'"); }
        if (s6.compareString(s5) <  0) { return this.fail("Test 'a' >= 'BCD'"); }
        if (s6.compareString(s3) == 0) { return this.fail("Test 'a' != 'ABCDE'"); }
        if (s1.compareString(s1) != 0) { return this.fail("Test '' == '' (identity)"); }
        if (s1.compareString(s7) != 0) { return this.fail("Test '' == '' (different Strings)"); }
        
        if (s1.compareCString("ABCDE") == 0) { return this.fail("Test '' != 'ABCDE' (cstring)"); }
        if (s3.compareCString("ABCDE") != 0) { return this.fail("Test 'ABCDE' == 'ABCDE' (cstring)"); }
        if (s2.compareCString("ABCDE") >= 0) { return this.fail("Test 'ABC' <  'ABCDE' (cstring)"); }
        if (s2.compareCString("ABCDE") >  0) { return this.fail("Test 'ABC' <= 'ABCDE' (cstring)"); }
        if (s5.compareCString("ABCDE") <= 0) { return this.fail("Test 'BCD' >  'ABCDE' (cstring)"); }
        if (s5.compareCString("ABCDE") <  0) { return this.fail("Test 'BCD' >= 'ABCDE' (cstring)"); }
        
        if (s2.compareString(s3)     != -'D') { return this.fail("Invalid distance from 'ABC' to 'ABCDE'"); }
        if (s5.compareCString("ABC") != 1   ) { return this.fail("Invalid distance from 'BCD' to 'ABC'"); }
        if (s5.compareCString("BCD") != 0   ) { return this.fail("Invalid distance from 'BCD' to 'BCD'"); }
        if (s6.compareString(s3)  != 'b'-'A') { return this.fail("Invalid distance from 'b' to 'ABCDE'"); }
        
        s7.destroy();
        s6.destroy();
        s5.destroy();
        s4.destroy();
        s3.destroy();
        s2.destroy();
        s1.destroy();
        return this.success();
    }
    
    [int] testSubString() {
        this.start("testSubString");
        String digits = this.rt().createInstance(String:CLASSNAME); digits.assignCString("0123456789");
        
        {
            String s = digits.subString(0, 0);
            if (!s.cequals("0123456789")) { return this.fail("Test subString(0, 0)"); }
            s.destroy();
        }
        {
            String s = digits.subString(0, 5);
            if (!s.cequals("01234")) { return this.fail("Test subString(0, 5)"); }
            s.destroy();
        }
        {
            String s = digits.subString(0, -4);
            if (!s.cequals("012345")) { return this.fail("Test subString(0, -4)"); }
            s.destroy();
        }
        {
            String s = digits.subString(4, 0);
            if (!s.cequals("456789")) { return this.fail("Test subString(4, 0)"); }
            s.destroy();
        }
        {
            String s = digits.subString(3, 3);
            if (!s.cequals("345")) { return this.fail("Test subString(3, 3)"); }
            s.destroy();
        }
        {
            String s = digits.subString(2, -3);
            if (!s.cequals("23456")) { return this.fail("Test subString(2, -3)"); }
            s.destroy();
        }
        {
            String s = digits.subString(-3, 0);
            if (!s.cequals("789")) { return this.fail("Test subString(-3, 0)"); }
            s.destroy();
        }
        {
            String s = digits.subString(-2, 1);
            if (!s.cequals("8")) { return this.fail("Test subString(-2, 1)"); }
            s.destroy();
        }
        {
            String s = digits.subString(-4, -1);
            if (!s.cequals("678")) { return this.fail("Test subString(-4, -1)"); }
            s.destroy();
        }
        
        digits.destroy();
        return this.success();
    }
    
    [int] testAt() {
        this.start("testAt");
        String digits = this.rt().createInstance(String:CLASSNAME); digits.assignCString("0123456789");
        
        if (digits.at( 0) != '0') { return this.fail("Test at( 0)"); }
        if (digits.at( 9) != '9') { return this.fail("Test at( 9)"); }
        if (digits.at(10) !=  0 ) { return this.fail("Test at(10)"); }
        if (digits.at(11) !=  0 ) { return this.fail("Test at(11)"); }
        if (digits.at(-2) != '8') { return this.fail("Test at(-2)"); }
        if (digits.at(-10) != '0') { return this.fail("Test at(-10)"); }
        if (digits.at(-11) !=  0 ) { return this.fail("Test at(-11)"); }
        if (digits.at(-12) !=  0 ) { return this.fail("Test at(-12)"); }
        
        digits.destroy();
        return this.success();
    }
    
    [int] testToInt() {
        this.startCases("testToInt");
        String testString = this.rt().createInstance(String:CLASSNAME);
        
        this.caseToInt(""       , 0    );
        this.caseToInt("0"      , 0    );
        this.caseToInt("12345"  , 12345);
        this.caseToInt("-2345"  , -2345);
        this.caseToInt("01234"  , 668  );
        this.caseToInt("-0234"  , -156 );
        this.caseToInt("0B0"    , 0    );
        this.caseToInt("0b10101", 21   );
        this.caseToInt("-0b1111", -15  );
        this.caseToInt("0X0"    , 0    );
        this.caseToInt("0xaBc"  , 2748 );
        this.caseToInt("-0x12"  , -18  );
        
        this.caseToInt("0x7FFFFFFF", 2147483647);
        this.caseToInt("0xFFFFFFFF", -1);
        this.caseToInt("0x80000000", -2147483648);
        
        testString.destroy();
        return this.successCases();
    }
    
    [int] caseToInt(cstring val, int expected) {
        String message = this.rt().createInstance(String:CLASSNAME);
        message.printCString("Case '").printCString(val).printCString("' => ").printInt(expected);
        String testString = this.rt().createInstance(String:CLASSNAME); testString.assignCString(val);
        
        if (testString.toInt() != expected) { return this.failCase(message.ostream()); }
        
        IStream in = testString.toIStream();
        if (in.readInt() != expected) { return this.failCase(message.ostream()); }
        in.destroy();
        
        testString.destroy();
        message.destroy();
        return this.successCase();        
    }
    
    [int] testToCString() {
        this.start("testToCString");
        String testString = this.rt().createInstance(String:CLASSNAME);
        
        if (!testString.cequals(testString.toCString())) { return this.fail("Test \"\".toCString()"); }
        
        testString.assignCString("string");
        if (!testString.cequals(testString.toCString())) { return this.fail("Test \"string\".toCString()"); }
        
        testString.assignCString("s");
        if (!testString.cequals(testString.toCString())) { return this.fail("Test \"s\".toCString()"); }
        
        testString.destroy();
        return this.success();
    }
    
    [int] testConversions() {
        this.start("testConversions");
        String testString = this.rt().createInstance(String:CLASSNAME);
        testString.assignCString("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789=!\"§$%&/()?\'_-+*#");
        
        String lower = testString.toLower();
        if (!lower.cequals("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789=!\"§$%&/()?\'_-+*#")) {
            return this.fail("Test toLower()");
        }
        String upper = testString.toUpper();
        if (!upper.cequals("ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789=!\"§$%&/()?\'_-+*#")) {
            return this.fail("Test toUpper()");
        }
        
        upper.destroy();
        lower.destroy();
        testString.destroy();
        return this.success();
    }
    
    [int] testEscapeUnescape() {
        this.start("testEscapeUnescape");
        
        String unescaped = this.rt().createInstance(String:CLASSNAME);
        unescaped.assignCString("\'\"abc\r\n\t");
        String escaped = this.rt().createInstance(String:CLASSNAME);
        escaped.assignCString("\"'\\\"abc\\r\\n\\t\"");
        
        String testString = this.rt().createInstance(String:CLASSNAME);
        unescaped.escapeToStream(testString.ostream());
        if (!testString.equals(escaped)) {
            this.rt().out()
                .print(unescaped).printNewline()
                .print(escaped).printNewline()
                .print(testString).printNewline();
            return this.fail("Test escapteToStream()");
        }
        
        testString.clear();
        escaped.unescapeToStream(testString.ostream());
        if (!testString.equals(unescaped)) {
            return this.fail("Test unescapteToStream()");
        }
        
        testString.destroy();
        escaped.destroy();
        unescaped.destroy();
        return this.success();
    }
    
    [int] testIStream() {
        this.start("testIStream");
        { // test empty string
            String testString = this.rt().createInstance(String:CLASSNAME);
            IStream testStream = testString.toIStream();
            
            if (!testStream.isEmpty()) { return this.fail("Empty string should have empty stream"); }
            if (testStream.peekChar() !=  0 ) { return this.fail("Empty stream does not peek 0"); }
            if (testStream.readChar() !=  0 ) { return this.fail("Empty stream does not return 0"); }
            
            testStream.destroy();
            testString.destroy();
        }
        { // test filled string
            String testString = this.rt().createInstance(String:CLASSNAME); testString.assignCString("test");
            IStream testStream = testString.toIStream();
            
            if (testStream.isEmpty()) { return this.fail("Stream is empty after creation"); }
            if (testStream.peekChar() != 't') { return this.fail("First char in steam peeks not 't'"); }
            if (testStream.readChar() != 't') { return this.fail("First char in steam is not 't'"); }
            
            if (testStream.isEmpty()) { return this.fail("Stream is empty after first char"); }
            if (testStream.peekChar() != 'e') { return this.fail("Second char in steam peeks not 'e'"); }
            if (testStream.readChar() != 'e') { return this.fail("Second char in steam is not 'e'"); }
            
            if (testStream.isEmpty()) { return this.fail("Stream is empty after second char"); }
            if (testStream.peekChar() != 's') { return this.fail("Third char in steam peeks not 's'"); }
            if (testStream.readChar() != 's') { return this.fail("Third char in steam is not 's'"); }
            
            if (testStream.isEmpty()) { return this.fail("Stream is empty after third char"); }
            if (testStream.peekChar() != 't') { return this.fail("Forth char in steam peeks not 't'"); }
            if (testStream.readChar() != 't') { return this.fail("Forth char in steam is not 't'"); }
            
            if (!testStream.isEmpty()) { return this.fail("Stream is not empty after forth char"); }
            if (testStream.peekChar() !=  0 ) { return this.fail("Empty stream does not peek 0"); }
            if (testStream.readChar() !=  0 ) { return this.fail("Empty stream does not return 0"); }
            
            testStream.destroy();
            testString.destroy();
        }
        
        return this.success();
    }
    
    [int] testOStream() {
        this.start("testOStream");
        
        Boolean b = this.rt().createInstance(Boolean:CLASSNAME); b.assignBool(false);
        Character c = this.rt().createInstance(Character:CLASSNAME); c.assignChar('\n');
        String s = this.rt().createInstance(String:CLASSNAME); s.assignCString("text");
        Integer i = this.rt().createInstance(Integer:CLASSNAME);
        
        String testString = this.rt().createInstance(String:CLASSNAME);
        
        testString.printCString("ABC ").printInt(1).printChar(' ').print(null)
            .printChar(' ').printHex(1234).printChar(0x2300 + ' ').printPtr(0x12).printChar(' ').printAddr(null)
            .printNewline();
        if (!testString.cequals("ABC 1 NULL 0x4d2 0x00000012 0x00000000\n")) { return this.fail("String do not prints natives"); }
        
        testString.clear();
        IStream istream = s.toIStream();
        testString.print(i).printChar(' ').print(s).print(c).print(istream).printCString(" ").print(b);
        istream.destroy();
        if (!testString.cequals("0 text\ntext false")) { return this.fail("String do not prints Char, String, Integer, IStream, and Bool"); }
    
        i.destroy();
        s.destroy();
        c.destroy();
        b.destroy();
        testString.destroy();
        return this.success();
    }
    
    [int] testPrintToStream() {
        this.start("testPrintToStream");
        
        String s = this.rt().createInstance(String:CLASSNAME);
        String stream = this.rt().createInstance(String:CLASSNAME);
        s.assignCString("Hello");
        s.printToStream(stream.ostream());
        if (!stream.cequals("Hello")) { return this.fail("Invalid value printed for 'Hello'"); }
        
        s.assignCString(" world!");
        s.printToStream(stream.ostream());
        if (!stream.cequals("Hello world!")) { return this.fail("Invalid value printed for ' world!'"); }
        
        s.assignCString("Some \"Text\"\twith escaped '\\' chars \n");
        stream.clear();
        s.escapeToStream(stream.ostream());
        if (!stream.cequals("\"Some \\\"Text\\\"\\twith escaped '\\\\' chars \\n\"")) { return this.fail("Invalid escaped string"); }
        
        stream.destroy();
        s.destroy();
        return this.success();
    }
    
    [int] testRawInt() {
        this.start("testRawInt");
        
        String testString = this.rt().createInstance(String:CLASSNAME);
        testString.printRawInt(0x74736554);
        testString.printRawInt(0x65736163);
        if (!testString.cequals("Testcase")) { return this.fail("Invalid raw ints written"); }
        
        IStream in = testString.toIStream();
        if (in.readRawInt() != 0x74736554) { return this.fail("Invalid raw ints read"); }
        if (in.readRawInt() != 0x65736163) { return this.fail("Invalid raw ints read"); }
        if (!in.isEmpty()) { return this.fail("Invalid raw ints read"); }
        in.destroy();
        
        testString.destroy();
        return this.success();
    }
    
    [int] testCompareCStrings() {
        this.start("testCompareCStrings");

        if (String:compareCStrings("", "") != 0) { return this.fail("Test '' == ''"); }
        if (String:compareCStrings("", "ABC") == 0) { return this.fail("Test '' != 'ABC'"); }
        if (String:compareCStrings("", "ABCDE") >= 0) { return this.fail("Test '' <  'ABCDE'"); }
        if (String:compareCStrings("", "b") >  0) { return this.fail("Test '' <= 'b'"); }
        if (String:compareCStrings("ABC", "ABCDE") >= 0) { return this.fail("Test 'ABC' <  'ABCDE'"); }
        if (String:compareCStrings("ABC", "BCD") >  0) { return this.fail("Test 'ABC' <= 'BCD'"); }
        if (String:compareCStrings("ABCDE", "ABCDE") >  0) { return this.fail("Test 'ABCDE' <= 'ABCDE'"); }
        if (String:compareCStrings("ABCDE", "ABCDE") != 0) { return this.fail("Test 'ABCDE' == 'ABCDE'"); }
        if (String:compareCStrings("ABCDE", "ABCDE") <  0) { return this.fail("Test 'ABCDE' >= 'ABCDE'"); }
        if (String:compareCStrings("b", "ABC") <= 0) { return this.fail("Test 'b' >  'ABC'"); }
        if (String:compareCStrings("b", "BCD") <  0) { return this.fail("Test 'b' >= 'BCD'"); }
        if (String:compareCStrings("b", "ABCDE") == 0) { return this.fail("Test 'b' != 'ABCDE'"); }
        
        return this.success();
    }
}
