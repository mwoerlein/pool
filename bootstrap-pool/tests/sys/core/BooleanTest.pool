/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

class BooleanTest extends test::TestCase {

    [] runAll() {
        this.testInitialization();
        this.testHashAndEquals();
        this.testPrintToStream();
    }
    
    [int] testInitialization() {
        this.start("testInitialization");
        
        Boolean b1 = this.rt().createInstance(Boolean:CLASSNAME);
        b1.assignBool(true);
        if (b1.getBool() != true) { return this.fail("Assign native bool"); }
        
        Boolean b2 = this.rt().createInstance(Boolean:CLASSNAME);
        b2.assignBoolean(b1);
        if (b2.getBool() != true) { return this.fail("Assign Boolean"); }
        
        b1.flip();
        if (b1.getBool() != false) { return this.fail("Flip Boolean"); }
        
        b2.destroy();
        b1.destroy();
        return this.success();
    }
    
    [int] testHashAndEquals() {
        this.start("testHashAndEquals");
        
        Boolean b1 = this.rt().createInstance(Boolean:CLASSNAME); b1.assignBool(true);
        Boolean b2 = this.rt().createInstance(Boolean:CLASSNAME); b2.assignBool(true);
        Boolean b3 = this.rt().createInstance(Boolean:CLASSNAME); b3.assignBool(false);
        
        if (b1.hash() != b1.hash()) { return this.fail("Hash value is not constant"); }
        if (b1.hash() != b2.hash()) { return this.fail("Hash value of Booleans differs for same bool values"); }
        if (b1.hash() == b3.hash()) { return this.fail("Hash value of Booleans is identical for different bool values"); }
        
        if (!b1.equals(b1)) { return this.fail("Identity check"); }
        if (!b1.equals(b2)) { return this.fail("Booleans with same bool value are not equal"); }
        if (b1.equals(b3)) { return this.fail("Booleans with different bool value are equal"); }
        if (b1.equals(this)) { return this.fail("Boolean is equal to non-Boolean"); }
        
        b3.destroy();
        b2.destroy();
        b1.destroy();
        return this.success();
    }
    
    [int] testPrintToStream() {
        this.start("testPrintToStream");
        
        Boolean b = this.rt().createInstance(Boolean:CLASSNAME);
        String s = this.rt().createInstance(String:CLASSNAME);
        b.assignBool(true);
        b.printToStream(s.ostream());
        if (!s.cequals("true")) { return this.fail("Invalid value printed for true"); }
        
        b.flip();
        s.clear();
        b.printToStream(s.ostream());
        if (!s.cequals("false")) { return this.fail("Invalid value printed for false"); }
        
        s.destroy();
        b.destroy();
        return this.success();
    }
}
