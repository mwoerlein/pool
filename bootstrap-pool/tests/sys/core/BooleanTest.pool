/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace sys::core;

class BooleanTest extends test::TestCase {

    [] runAll() {
        this.testInitialization();
        this.testHashAndEquals();
    }
    
    [int] testInitialization() {
        this.start("BooleanTest:testInitialization()");
        
        Boolean b1 = this.rt().createInstance(Boolean:CLASSNAME);
        b1.assignBool(true);
        this.assert(b1.getBool() == true, "Assign native bool");
        
        Boolean b2 = this.rt().createInstance(Boolean:CLASSNAME);
        b2.assignBoolean(b1);
        this.assert(b2.getBool() == true, "Assign Boolean");
        
        b1.flip();
        this.assert(b1.getBool() == false, "Flip Boolean");
        
        b2.destroy();
        b1.destroy();
        return this.success();
    }
    
    [int] testHashAndEquals() {
        this.start("BooleanTest:testHashAndEquals()");
        
        Boolean b1 = this.rt().createInstance(Boolean:CLASSNAME); b1.assignBool(true);
        Boolean b2 = this.rt().createInstance(Boolean:CLASSNAME); b2.assignBool(true);
        Boolean b3 = this.rt().createInstance(Boolean:CLASSNAME); b3.assignBool(false);
        
        this.assert(b1.hash() == b1.hash(), "Constant hash");
        this.assert(b1.hash() == b2.hash(), "Same hash for same bool as different Booleans");
        this.assert(b1.hash() != b3.hash(), "Different hash for different bools");
        
        this.assert(b1.equals(b1), "Identity check");
        this.assert(b1.equals(b2), "Same bool as different Booleans are equal");
        this.assert(!b1.equals(b3), "Different chars are not equal");
        this.assert(!b1.equals(this), "Different Objects are not equal");
        
        b3.destroy();
        b2.destroy();
        b1.destroy();
        return this.success();
    }
}
