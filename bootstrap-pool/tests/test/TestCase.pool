/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace test;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMap;
use sys::core::String;
use sys::stream::OStream;

class TestCase extends sys::core::Object {

    abstract [] runAll();
    
    cstring currentTest;
    int availableBytes;
    int result;
    int caseResult;
    
    [] __init() {
        availableBytes = 0;
        result = true;
        caseResult = true;
    }
    
    [int] getResult() { return result; }
    
    [] start(cstring test) {
        currentTest = test;
        availableBytes = this.rt().getAllocator().getAvailableBytes();
    }
    
    [int] fail(cstring message) {
        this.printError(this.rt().err(), message).printNewline();
        availableBytes = 0;
        result = false;
        return false; 
    }
    
    [int] skip() {
        this.printMessage(this.rt().err(), " skipped!").printNewline();
        availableBytes = 0;
        return true;
    }
    
    [int] success() {
        if (availableBytes && !this.checkMemory(availableBytes)) { return false; }
        this.printMessage(this.rt().out(), " successful!").printNewline();
        availableBytes = 0;
        return true;
    }
    
    [] startCases(cstring test) {
        currentTest = test;
        availableBytes = this.rt().getAllocator().getAvailableBytes();
        caseResult = true;
    }
    
    [int] failCase(String message) {
        this.printMessage(this.rt().err(), " failed: ").print(message).printNewline();
        caseResult = false;
        result = false;
        return false; 
    }
    
    [int] successCase() {
        return true;
    }
    
    [int] successCases() {
        if (!caseResult) { availableBytes = 0; return false; }
        return this.success();
    }
    
    [int] checkMemory(int bytes) {
        return (bytes == this.rt().getAllocator().getAvailableBytes()) || this.fail("Memory hole detected");
    }
    
    [OStream] printError(OStream stream, cstring message) {
        return this.printMessage(stream, " failed: ").printCString(message);
    }
    
    [OStream] printMessage(OStream stream, cstring message) {
        stream.printCString(this.getClass().getCName());
        if (availableBytes) { stream.printChar(':').printCString(currentTest).printChar('(').printChar(')'); }
        return stream.printCString(message);
    }
}
