/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace test;

use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMap;
use sys::core::String;
use sys::log::Logger;
use sys::stream::OStream;

class TestCase extends sys::core::Object {

    abstract [] runAll();
    
    cstring currentTest;
    int availableBytes;
    int result;
    Logger logger;
    
    [] init(Logger log) {
        availableBytes = 0;
        result = true;
        this.logger = log;
    }
    
    [int] getResult() { return result; }
    
    [] start(cstring test) {
        currentTest = test;
        availableBytes = this.rt().getAllocator().getAvailableBytes();
    }
    
    [int] fail(cstring message) {
        OStream err = logger.newError();
        if (!availableBytes) { err.printCString(currentTest).printCString(" failed: "); }
        err.printCString(message);
        return false; 
    }
    
    [int] success() {
        OStream out = this.rt().out();
        OStream err = this.rt().err();
        if (!logger.hasErrors() && availableBytes && (availableBytes != this.rt().getAllocator().getAvailableBytes())) {
            logger.newError().printCString(currentTest).printCString(" failed: Memory hole detected");
        } 
        if (logger.flushErrors(err)) {
            result = false;
            availableBytes = 0;
            return false;
        }
        if (!availableBytes) {
            out.printCString("Test successful!").printNewline();
        } else {
            out.printCString(currentTest).printCString(" successful!").printNewline();
        }
        availableBytes = 0;
        return true;
    }
}
