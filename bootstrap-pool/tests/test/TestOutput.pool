/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace test;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyMap;
use sys::log::Logger;
use sys::runtime::Runtime;
use sys::stream::FOStream;
use sys::stream::OStream;

class TestOutput extends sys::log::Logger {

    int TESTS_PER_LINE := 70;
    
    OStream out;
    FOStream fout;
    int tests;
    int failed;
    int skipped;
    
    [] __init() {
        this._initLogger();
        tests = failed = skipped = 0;
        out = this.rt().out();
        fout = this.rt().cast(FOStream:CLASSNAME, out);
    }
    
    [] __destruct() {
        this._finalize();
        this._destructLogger();
    }
    
    [] printFail() { failed++; this._printTest('F', FOStream:BRIGHT_RED); }
    [] printSkip() { skipped++; this._printTest('S', FOStream:BRIGHT_YELLOW); }
    [] printSuccess() { this._printTest('.', FOStream:DEFAULT); }
    
    [] _finalize() {
        if ((tests % TESTS_PER_LINE) > 0) { out.printNewline(); }
        
        this.flush();
        
        OStream result = null;
        if (failed) {
            result = this.rt().err().printNewline().printCString("FAILURES!");
        } else {
            result = this.rt().out().printNewline().printCString("OK!");
        }
        result.printCString(" (Tests: ").printInt(tests);
        if (failed) { result.printCString(", Failed: ").printInt(failed); }
        if (skipped) { result.printCString(", Skipped: ").printInt(skipped); }
        result.printChar(')').printNewline();
    }
    
    [] _printTest(int c, int fg) {
        if (fout) { fout.printFChar(c, fg, FOStream:DEFAULT); } else { out.printChar(c); }
        if ((++tests % TESTS_PER_LINE) == 0) { out.printChar(' ').printInt(tests).printNewline(); }
    }
}
